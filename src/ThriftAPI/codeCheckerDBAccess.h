/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef codeCheckerDBAccess_H
#define codeCheckerDBAccess_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "report_server_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class codeCheckerDBAccessIf {
 public:
  virtual ~codeCheckerDBAccessIf() {}
  virtual void getRunData(RunDataList& _return, const RunFilter& runFilter, const int64_t limit, const int64_t offset) = 0;
  virtual int64_t getRunCount(const RunFilter& runFilter) = 0;
  virtual void getCheckCommand(std::string& _return, const int64_t runHistoryId, const int64_t runId) = 0;
  virtual void getRunHistory(RunHistoryDataList& _return, const std::vector<int64_t> & runIds, const int64_t limit, const int64_t offset, const RunHistoryFilter& runHistoryFilter) = 0;
  virtual int64_t getRunHistoryCount(const std::vector<int64_t> & runIds, const RunHistoryFilter& runHistoryFilter) = 0;
  virtual void getDiffResultsHash(std::vector<std::string> & _return, const std::vector<int64_t> & runIds, const std::vector<std::string> & reportHashes, const DiffType::type diffType, const std::vector<DetectionStatus::type> & skipDetectionStatuses) = 0;
  virtual void getReport(ReportData& _return, const int64_t reportId) = 0;
  virtual void getRunResults(ReportDataList& _return, const std::vector<int64_t> & runIds, const int64_t limit, const int64_t offset, const std::vector<SortMode> & sortType, const ReportFilter& reportFilter, const CompareData& cmpData, const bool getDetails) = 0;
  virtual void getRunReportCounts(RunReportCounts& _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const int64_t limit, const int64_t offset) = 0;
  virtual int64_t getRunResultCount(const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData) = 0;
  virtual void getReportDetails(ReportDetails& _return, const int64_t reportId) = 0;
  virtual void getSourceFileData(SourceFileData& _return, const int64_t fileId, const bool fileContent, const Encoding::type encoding) = 0;
  virtual void getLinesInSourceFileContents(std::map<int64_t, std::map<int64_t, std::string> > & _return, const LinesInFilesRequestedList& linesInFilesRequested, const Encoding::type encoding) = 0;
  virtual bool isReviewStatusChangeDisabled() = 0;
  virtual bool changeReviewStatus(const int64_t reportId, const ReviewStatus::type status, const std::string& message) = 0;
  virtual void getComments(CommentDataList& _return, const int64_t reportId) = 0;
  virtual int64_t getCommentCount(const int64_t reportId) = 0;
  virtual bool addComment(const int64_t reportId, const CommentData& comment) = 0;
  virtual bool updateComment(const int64_t commentId, const std::string& newMessage) = 0;
  virtual bool removeComment(const int64_t commentId) = 0;
  virtual void getCheckerDoc(std::string& _return, const std::string& checkerId) = 0;
  virtual void getPackageVersion(std::string& _return) = 0;
  virtual bool removeRunResults(const std::vector<int64_t> & runIds) = 0;
  virtual bool removeRunReports(const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData) = 0;
  virtual bool removeRun(const int64_t runId) = 0;
  virtual void getSuppressFile(std::string& _return) = 0;
  virtual void getSeverityCounts(std::map<Severity::type, int64_t> & _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData) = 0;
  virtual void getCheckerMsgCounts(std::map<std::string, int64_t> & _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData, const int64_t limit, const int64_t offset) = 0;
  virtual void getReviewStatusCounts(std::map<ReviewStatus::type, int64_t> & _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData) = 0;
  virtual void getDetectionStatusCounts(std::map<DetectionStatus::type, int64_t> & _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData) = 0;
  virtual void getFileCounts(std::map<std::string, int64_t> & _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData, const int64_t limit, const int64_t offset) = 0;
  virtual void getCheckerCounts(CheckerCounts& _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData, const int64_t limit, const int64_t offset) = 0;
  virtual void getRunHistoryTagCounts(RunTagCounts& _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData) = 0;
  virtual bool addSourceComponent(const std::string& name, const std::string& value, const std::string& description) = 0;
  virtual void getSourceComponents(SourceComponentDataList& _return, const std::vector<std::string> & sourceComponentFilter) = 0;
  virtual bool removeSourceComponent(const std::string& name) = 0;
  virtual void getMissingContentHashes(std::vector<std::string> & _return, const std::vector<std::string> & fileHashes) = 0;
  virtual int64_t massStoreRun(const std::string& runName, const std::string& tag, const std::string& version, const std::string& zipfile, const bool force, const std::vector<std::string> & trimPathPrefixes) = 0;
  virtual bool allowsStoringAnalysisStatistics() = 0;
  virtual void getAnalysisStatisticsLimits(std::map<StoreLimitKind::type, int64_t> & _return) = 0;
  virtual bool storeAnalysisStatistics(const std::string& runName, const std::string& zipfile) = 0;
  virtual void getAnalysisStatistics(AnalyzerStatisticsData& _return, const int64_t runId, const int64_t runHistoryId) = 0;
};

class codeCheckerDBAccessIfFactory {
 public:
  typedef codeCheckerDBAccessIf Handler;

  virtual ~codeCheckerDBAccessIfFactory() {}

  virtual codeCheckerDBAccessIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(codeCheckerDBAccessIf* /* handler */) = 0;
};

class codeCheckerDBAccessIfSingletonFactory : virtual public codeCheckerDBAccessIfFactory {
 public:
  codeCheckerDBAccessIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<codeCheckerDBAccessIf>& iface) : iface_(iface) {}
  virtual ~codeCheckerDBAccessIfSingletonFactory() {}

  virtual codeCheckerDBAccessIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(codeCheckerDBAccessIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<codeCheckerDBAccessIf> iface_;
};

class codeCheckerDBAccessNull : virtual public codeCheckerDBAccessIf {
 public:
  virtual ~codeCheckerDBAccessNull() {}
  void getRunData(RunDataList& /* _return */, const RunFilter& /* runFilter */, const int64_t /* limit */, const int64_t /* offset */) {
    return;
  }
  int64_t getRunCount(const RunFilter& /* runFilter */) {
    int64_t _return = 0;
    return _return;
  }
  void getCheckCommand(std::string& /* _return */, const int64_t /* runHistoryId */, const int64_t /* runId */) {
    return;
  }
  void getRunHistory(RunHistoryDataList& /* _return */, const std::vector<int64_t> & /* runIds */, const int64_t /* limit */, const int64_t /* offset */, const RunHistoryFilter& /* runHistoryFilter */) {
    return;
  }
  int64_t getRunHistoryCount(const std::vector<int64_t> & /* runIds */, const RunHistoryFilter& /* runHistoryFilter */) {
    int64_t _return = 0;
    return _return;
  }
  void getDiffResultsHash(std::vector<std::string> & /* _return */, const std::vector<int64_t> & /* runIds */, const std::vector<std::string> & /* reportHashes */, const DiffType::type /* diffType */, const std::vector<DetectionStatus::type> & /* skipDetectionStatuses */) {
    return;
  }
  void getReport(ReportData& /* _return */, const int64_t /* reportId */) {
    return;
  }
  void getRunResults(ReportDataList& /* _return */, const std::vector<int64_t> & /* runIds */, const int64_t /* limit */, const int64_t /* offset */, const std::vector<SortMode> & /* sortType */, const ReportFilter& /* reportFilter */, const CompareData& /* cmpData */, const bool /* getDetails */) {
    return;
  }
  void getRunReportCounts(RunReportCounts& /* _return */, const std::vector<int64_t> & /* runIds */, const ReportFilter& /* reportFilter */, const int64_t /* limit */, const int64_t /* offset */) {
    return;
  }
  int64_t getRunResultCount(const std::vector<int64_t> & /* runIds */, const ReportFilter& /* reportFilter */, const CompareData& /* cmpData */) {
    int64_t _return = 0;
    return _return;
  }
  void getReportDetails(ReportDetails& /* _return */, const int64_t /* reportId */) {
    return;
  }
  void getSourceFileData(SourceFileData& /* _return */, const int64_t /* fileId */, const bool /* fileContent */, const Encoding::type /* encoding */) {
    return;
  }
  void getLinesInSourceFileContents(std::map<int64_t, std::map<int64_t, std::string> > & /* _return */, const LinesInFilesRequestedList& /* linesInFilesRequested */, const Encoding::type /* encoding */) {
    return;
  }
  bool isReviewStatusChangeDisabled() {
    bool _return = false;
    return _return;
  }
  bool changeReviewStatus(const int64_t /* reportId */, const ReviewStatus::type /* status */, const std::string& /* message */) {
    bool _return = false;
    return _return;
  }
  void getComments(CommentDataList& /* _return */, const int64_t /* reportId */) {
    return;
  }
  int64_t getCommentCount(const int64_t /* reportId */) {
    int64_t _return = 0;
    return _return;
  }
  bool addComment(const int64_t /* reportId */, const CommentData& /* comment */) {
    bool _return = false;
    return _return;
  }
  bool updateComment(const int64_t /* commentId */, const std::string& /* newMessage */) {
    bool _return = false;
    return _return;
  }
  bool removeComment(const int64_t /* commentId */) {
    bool _return = false;
    return _return;
  }
  void getCheckerDoc(std::string& /* _return */, const std::string& /* checkerId */) {
    return;
  }
  void getPackageVersion(std::string& /* _return */) {
    return;
  }
  bool removeRunResults(const std::vector<int64_t> & /* runIds */) {
    bool _return = false;
    return _return;
  }
  bool removeRunReports(const std::vector<int64_t> & /* runIds */, const ReportFilter& /* reportFilter */, const CompareData& /* cmpData */) {
    bool _return = false;
    return _return;
  }
  bool removeRun(const int64_t /* runId */) {
    bool _return = false;
    return _return;
  }
  void getSuppressFile(std::string& /* _return */) {
    return;
  }
  void getSeverityCounts(std::map<Severity::type, int64_t> & /* _return */, const std::vector<int64_t> & /* runIds */, const ReportFilter& /* reportFilter */, const CompareData& /* cmpData */) {
    return;
  }
  void getCheckerMsgCounts(std::map<std::string, int64_t> & /* _return */, const std::vector<int64_t> & /* runIds */, const ReportFilter& /* reportFilter */, const CompareData& /* cmpData */, const int64_t /* limit */, const int64_t /* offset */) {
    return;
  }
  void getReviewStatusCounts(std::map<ReviewStatus::type, int64_t> & /* _return */, const std::vector<int64_t> & /* runIds */, const ReportFilter& /* reportFilter */, const CompareData& /* cmpData */) {
    return;
  }
  void getDetectionStatusCounts(std::map<DetectionStatus::type, int64_t> & /* _return */, const std::vector<int64_t> & /* runIds */, const ReportFilter& /* reportFilter */, const CompareData& /* cmpData */) {
    return;
  }
  void getFileCounts(std::map<std::string, int64_t> & /* _return */, const std::vector<int64_t> & /* runIds */, const ReportFilter& /* reportFilter */, const CompareData& /* cmpData */, const int64_t /* limit */, const int64_t /* offset */) {
    return;
  }
  void getCheckerCounts(CheckerCounts& /* _return */, const std::vector<int64_t> & /* runIds */, const ReportFilter& /* reportFilter */, const CompareData& /* cmpData */, const int64_t /* limit */, const int64_t /* offset */) {
    return;
  }
  void getRunHistoryTagCounts(RunTagCounts& /* _return */, const std::vector<int64_t> & /* runIds */, const ReportFilter& /* reportFilter */, const CompareData& /* cmpData */) {
    return;
  }
  bool addSourceComponent(const std::string& /* name */, const std::string& /* value */, const std::string& /* description */) {
    bool _return = false;
    return _return;
  }
  void getSourceComponents(SourceComponentDataList& /* _return */, const std::vector<std::string> & /* sourceComponentFilter */) {
    return;
  }
  bool removeSourceComponent(const std::string& /* name */) {
    bool _return = false;
    return _return;
  }
  void getMissingContentHashes(std::vector<std::string> & /* _return */, const std::vector<std::string> & /* fileHashes */) {
    return;
  }
  int64_t massStoreRun(const std::string& /* runName */, const std::string& /* tag */, const std::string& /* version */, const std::string& /* zipfile */, const bool /* force */, const std::vector<std::string> & /* trimPathPrefixes */) {
    int64_t _return = 0;
    return _return;
  }
  bool allowsStoringAnalysisStatistics() {
    bool _return = false;
    return _return;
  }
  void getAnalysisStatisticsLimits(std::map<StoreLimitKind::type, int64_t> & /* _return */) {
    return;
  }
  bool storeAnalysisStatistics(const std::string& /* runName */, const std::string& /* zipfile */) {
    bool _return = false;
    return _return;
  }
  void getAnalysisStatistics(AnalyzerStatisticsData& /* _return */, const int64_t /* runId */, const int64_t /* runHistoryId */) {
    return;
  }
};

typedef struct _codeCheckerDBAccess_getRunData_args__isset {
  _codeCheckerDBAccess_getRunData_args__isset() : runFilter(false), limit(false), offset(false) {}
  bool runFilter :1;
  bool limit :1;
  bool offset :1;
} _codeCheckerDBAccess_getRunData_args__isset;

class codeCheckerDBAccess_getRunData_args {
 public:

  codeCheckerDBAccess_getRunData_args(const codeCheckerDBAccess_getRunData_args&);
  codeCheckerDBAccess_getRunData_args& operator=(const codeCheckerDBAccess_getRunData_args&);
  codeCheckerDBAccess_getRunData_args() : limit(0), offset(0) {
  }

  virtual ~codeCheckerDBAccess_getRunData_args() throw();
  RunFilter runFilter;
  int64_t limit;
  int64_t offset;

  _codeCheckerDBAccess_getRunData_args__isset __isset;

  void __set_runFilter(const RunFilter& val);

  void __set_limit(const int64_t val);

  void __set_offset(const int64_t val);

  bool operator == (const codeCheckerDBAccess_getRunData_args & rhs) const
  {
    if (!(runFilter == rhs.runFilter))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getRunData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getRunData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_getRunData_pargs {
 public:


  virtual ~codeCheckerDBAccess_getRunData_pargs() throw();
  const RunFilter* runFilter;
  const int64_t* limit;
  const int64_t* offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getRunData_result__isset {
  _codeCheckerDBAccess_getRunData_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getRunData_result__isset;

class codeCheckerDBAccess_getRunData_result {
 public:

  codeCheckerDBAccess_getRunData_result(const codeCheckerDBAccess_getRunData_result&);
  codeCheckerDBAccess_getRunData_result& operator=(const codeCheckerDBAccess_getRunData_result&);
  codeCheckerDBAccess_getRunData_result() {
  }

  virtual ~codeCheckerDBAccess_getRunData_result() throw();
  RunDataList success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getRunData_result__isset __isset;

  void __set_success(const RunDataList& val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_getRunData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getRunData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getRunData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getRunData_presult__isset {
  _codeCheckerDBAccess_getRunData_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getRunData_presult__isset;

class codeCheckerDBAccess_getRunData_presult {
 public:


  virtual ~codeCheckerDBAccess_getRunData_presult() throw();
  RunDataList* success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getRunData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_getRunCount_args__isset {
  _codeCheckerDBAccess_getRunCount_args__isset() : runFilter(false) {}
  bool runFilter :1;
} _codeCheckerDBAccess_getRunCount_args__isset;

class codeCheckerDBAccess_getRunCount_args {
 public:

  codeCheckerDBAccess_getRunCount_args(const codeCheckerDBAccess_getRunCount_args&);
  codeCheckerDBAccess_getRunCount_args& operator=(const codeCheckerDBAccess_getRunCount_args&);
  codeCheckerDBAccess_getRunCount_args() {
  }

  virtual ~codeCheckerDBAccess_getRunCount_args() throw();
  RunFilter runFilter;

  _codeCheckerDBAccess_getRunCount_args__isset __isset;

  void __set_runFilter(const RunFilter& val);

  bool operator == (const codeCheckerDBAccess_getRunCount_args & rhs) const
  {
    if (!(runFilter == rhs.runFilter))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getRunCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getRunCount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_getRunCount_pargs {
 public:


  virtual ~codeCheckerDBAccess_getRunCount_pargs() throw();
  const RunFilter* runFilter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getRunCount_result__isset {
  _codeCheckerDBAccess_getRunCount_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getRunCount_result__isset;

class codeCheckerDBAccess_getRunCount_result {
 public:

  codeCheckerDBAccess_getRunCount_result(const codeCheckerDBAccess_getRunCount_result&);
  codeCheckerDBAccess_getRunCount_result& operator=(const codeCheckerDBAccess_getRunCount_result&);
  codeCheckerDBAccess_getRunCount_result() : success(0) {
  }

  virtual ~codeCheckerDBAccess_getRunCount_result() throw();
  int64_t success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getRunCount_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_getRunCount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getRunCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getRunCount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getRunCount_presult__isset {
  _codeCheckerDBAccess_getRunCount_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getRunCount_presult__isset;

class codeCheckerDBAccess_getRunCount_presult {
 public:


  virtual ~codeCheckerDBAccess_getRunCount_presult() throw();
  int64_t* success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getRunCount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_getCheckCommand_args__isset {
  _codeCheckerDBAccess_getCheckCommand_args__isset() : runHistoryId(false), runId(false) {}
  bool runHistoryId :1;
  bool runId :1;
} _codeCheckerDBAccess_getCheckCommand_args__isset;

class codeCheckerDBAccess_getCheckCommand_args {
 public:

  codeCheckerDBAccess_getCheckCommand_args(const codeCheckerDBAccess_getCheckCommand_args&);
  codeCheckerDBAccess_getCheckCommand_args& operator=(const codeCheckerDBAccess_getCheckCommand_args&);
  codeCheckerDBAccess_getCheckCommand_args() : runHistoryId(0), runId(0) {
  }

  virtual ~codeCheckerDBAccess_getCheckCommand_args() throw();
  int64_t runHistoryId;
  int64_t runId;

  _codeCheckerDBAccess_getCheckCommand_args__isset __isset;

  void __set_runHistoryId(const int64_t val);

  void __set_runId(const int64_t val);

  bool operator == (const codeCheckerDBAccess_getCheckCommand_args & rhs) const
  {
    if (!(runHistoryId == rhs.runHistoryId))
      return false;
    if (!(runId == rhs.runId))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getCheckCommand_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getCheckCommand_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_getCheckCommand_pargs {
 public:


  virtual ~codeCheckerDBAccess_getCheckCommand_pargs() throw();
  const int64_t* runHistoryId;
  const int64_t* runId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getCheckCommand_result__isset {
  _codeCheckerDBAccess_getCheckCommand_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getCheckCommand_result__isset;

class codeCheckerDBAccess_getCheckCommand_result {
 public:

  codeCheckerDBAccess_getCheckCommand_result(const codeCheckerDBAccess_getCheckCommand_result&);
  codeCheckerDBAccess_getCheckCommand_result& operator=(const codeCheckerDBAccess_getCheckCommand_result&);
  codeCheckerDBAccess_getCheckCommand_result() : success() {
  }

  virtual ~codeCheckerDBAccess_getCheckCommand_result() throw();
  std::string success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getCheckCommand_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_getCheckCommand_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getCheckCommand_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getCheckCommand_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getCheckCommand_presult__isset {
  _codeCheckerDBAccess_getCheckCommand_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getCheckCommand_presult__isset;

class codeCheckerDBAccess_getCheckCommand_presult {
 public:


  virtual ~codeCheckerDBAccess_getCheckCommand_presult() throw();
  std::string* success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getCheckCommand_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_getRunHistory_args__isset {
  _codeCheckerDBAccess_getRunHistory_args__isset() : runIds(false), limit(false), offset(false), runHistoryFilter(false) {}
  bool runIds :1;
  bool limit :1;
  bool offset :1;
  bool runHistoryFilter :1;
} _codeCheckerDBAccess_getRunHistory_args__isset;

class codeCheckerDBAccess_getRunHistory_args {
 public:

  codeCheckerDBAccess_getRunHistory_args(const codeCheckerDBAccess_getRunHistory_args&);
  codeCheckerDBAccess_getRunHistory_args& operator=(const codeCheckerDBAccess_getRunHistory_args&);
  codeCheckerDBAccess_getRunHistory_args() : limit(0), offset(0) {
  }

  virtual ~codeCheckerDBAccess_getRunHistory_args() throw();
  std::vector<int64_t>  runIds;
  int64_t limit;
  int64_t offset;
  RunHistoryFilter runHistoryFilter;

  _codeCheckerDBAccess_getRunHistory_args__isset __isset;

  void __set_runIds(const std::vector<int64_t> & val);

  void __set_limit(const int64_t val);

  void __set_offset(const int64_t val);

  void __set_runHistoryFilter(const RunHistoryFilter& val);

  bool operator == (const codeCheckerDBAccess_getRunHistory_args & rhs) const
  {
    if (!(runIds == rhs.runIds))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(runHistoryFilter == rhs.runHistoryFilter))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getRunHistory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getRunHistory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_getRunHistory_pargs {
 public:


  virtual ~codeCheckerDBAccess_getRunHistory_pargs() throw();
  const std::vector<int64_t> * runIds;
  const int64_t* limit;
  const int64_t* offset;
  const RunHistoryFilter* runHistoryFilter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getRunHistory_result__isset {
  _codeCheckerDBAccess_getRunHistory_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getRunHistory_result__isset;

class codeCheckerDBAccess_getRunHistory_result {
 public:

  codeCheckerDBAccess_getRunHistory_result(const codeCheckerDBAccess_getRunHistory_result&);
  codeCheckerDBAccess_getRunHistory_result& operator=(const codeCheckerDBAccess_getRunHistory_result&);
  codeCheckerDBAccess_getRunHistory_result() {
  }

  virtual ~codeCheckerDBAccess_getRunHistory_result() throw();
  RunHistoryDataList success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getRunHistory_result__isset __isset;

  void __set_success(const RunHistoryDataList& val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_getRunHistory_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getRunHistory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getRunHistory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getRunHistory_presult__isset {
  _codeCheckerDBAccess_getRunHistory_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getRunHistory_presult__isset;

class codeCheckerDBAccess_getRunHistory_presult {
 public:


  virtual ~codeCheckerDBAccess_getRunHistory_presult() throw();
  RunHistoryDataList* success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getRunHistory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_getRunHistoryCount_args__isset {
  _codeCheckerDBAccess_getRunHistoryCount_args__isset() : runIds(false), runHistoryFilter(false) {}
  bool runIds :1;
  bool runHistoryFilter :1;
} _codeCheckerDBAccess_getRunHistoryCount_args__isset;

class codeCheckerDBAccess_getRunHistoryCount_args {
 public:

  codeCheckerDBAccess_getRunHistoryCount_args(const codeCheckerDBAccess_getRunHistoryCount_args&);
  codeCheckerDBAccess_getRunHistoryCount_args& operator=(const codeCheckerDBAccess_getRunHistoryCount_args&);
  codeCheckerDBAccess_getRunHistoryCount_args() {
  }

  virtual ~codeCheckerDBAccess_getRunHistoryCount_args() throw();
  std::vector<int64_t>  runIds;
  RunHistoryFilter runHistoryFilter;

  _codeCheckerDBAccess_getRunHistoryCount_args__isset __isset;

  void __set_runIds(const std::vector<int64_t> & val);

  void __set_runHistoryFilter(const RunHistoryFilter& val);

  bool operator == (const codeCheckerDBAccess_getRunHistoryCount_args & rhs) const
  {
    if (!(runIds == rhs.runIds))
      return false;
    if (!(runHistoryFilter == rhs.runHistoryFilter))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getRunHistoryCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getRunHistoryCount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_getRunHistoryCount_pargs {
 public:


  virtual ~codeCheckerDBAccess_getRunHistoryCount_pargs() throw();
  const std::vector<int64_t> * runIds;
  const RunHistoryFilter* runHistoryFilter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getRunHistoryCount_result__isset {
  _codeCheckerDBAccess_getRunHistoryCount_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getRunHistoryCount_result__isset;

class codeCheckerDBAccess_getRunHistoryCount_result {
 public:

  codeCheckerDBAccess_getRunHistoryCount_result(const codeCheckerDBAccess_getRunHistoryCount_result&);
  codeCheckerDBAccess_getRunHistoryCount_result& operator=(const codeCheckerDBAccess_getRunHistoryCount_result&);
  codeCheckerDBAccess_getRunHistoryCount_result() : success(0) {
  }

  virtual ~codeCheckerDBAccess_getRunHistoryCount_result() throw();
  int64_t success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getRunHistoryCount_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_getRunHistoryCount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getRunHistoryCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getRunHistoryCount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getRunHistoryCount_presult__isset {
  _codeCheckerDBAccess_getRunHistoryCount_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getRunHistoryCount_presult__isset;

class codeCheckerDBAccess_getRunHistoryCount_presult {
 public:


  virtual ~codeCheckerDBAccess_getRunHistoryCount_presult() throw();
  int64_t* success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getRunHistoryCount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_getDiffResultsHash_args__isset {
  _codeCheckerDBAccess_getDiffResultsHash_args__isset() : runIds(false), reportHashes(false), diffType(false), skipDetectionStatuses(false) {}
  bool runIds :1;
  bool reportHashes :1;
  bool diffType :1;
  bool skipDetectionStatuses :1;
} _codeCheckerDBAccess_getDiffResultsHash_args__isset;

class codeCheckerDBAccess_getDiffResultsHash_args {
 public:

  codeCheckerDBAccess_getDiffResultsHash_args(const codeCheckerDBAccess_getDiffResultsHash_args&);
  codeCheckerDBAccess_getDiffResultsHash_args& operator=(const codeCheckerDBAccess_getDiffResultsHash_args&);
  codeCheckerDBAccess_getDiffResultsHash_args() : diffType((DiffType::type)0) {
  }

  virtual ~codeCheckerDBAccess_getDiffResultsHash_args() throw();
  std::vector<int64_t>  runIds;
  std::vector<std::string>  reportHashes;
  DiffType::type diffType;
  std::vector<DetectionStatus::type>  skipDetectionStatuses;

  _codeCheckerDBAccess_getDiffResultsHash_args__isset __isset;

  void __set_runIds(const std::vector<int64_t> & val);

  void __set_reportHashes(const std::vector<std::string> & val);

  void __set_diffType(const DiffType::type val);

  void __set_skipDetectionStatuses(const std::vector<DetectionStatus::type> & val);

  bool operator == (const codeCheckerDBAccess_getDiffResultsHash_args & rhs) const
  {
    if (!(runIds == rhs.runIds))
      return false;
    if (!(reportHashes == rhs.reportHashes))
      return false;
    if (!(diffType == rhs.diffType))
      return false;
    if (!(skipDetectionStatuses == rhs.skipDetectionStatuses))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getDiffResultsHash_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getDiffResultsHash_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_getDiffResultsHash_pargs {
 public:


  virtual ~codeCheckerDBAccess_getDiffResultsHash_pargs() throw();
  const std::vector<int64_t> * runIds;
  const std::vector<std::string> * reportHashes;
  const DiffType::type* diffType;
  const std::vector<DetectionStatus::type> * skipDetectionStatuses;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getDiffResultsHash_result__isset {
  _codeCheckerDBAccess_getDiffResultsHash_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getDiffResultsHash_result__isset;

class codeCheckerDBAccess_getDiffResultsHash_result {
 public:

  codeCheckerDBAccess_getDiffResultsHash_result(const codeCheckerDBAccess_getDiffResultsHash_result&);
  codeCheckerDBAccess_getDiffResultsHash_result& operator=(const codeCheckerDBAccess_getDiffResultsHash_result&);
  codeCheckerDBAccess_getDiffResultsHash_result() {
  }

  virtual ~codeCheckerDBAccess_getDiffResultsHash_result() throw();
  std::vector<std::string>  success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getDiffResultsHash_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_getDiffResultsHash_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getDiffResultsHash_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getDiffResultsHash_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getDiffResultsHash_presult__isset {
  _codeCheckerDBAccess_getDiffResultsHash_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getDiffResultsHash_presult__isset;

class codeCheckerDBAccess_getDiffResultsHash_presult {
 public:


  virtual ~codeCheckerDBAccess_getDiffResultsHash_presult() throw();
  std::vector<std::string> * success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getDiffResultsHash_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_getReport_args__isset {
  _codeCheckerDBAccess_getReport_args__isset() : reportId(false) {}
  bool reportId :1;
} _codeCheckerDBAccess_getReport_args__isset;

class codeCheckerDBAccess_getReport_args {
 public:

  codeCheckerDBAccess_getReport_args(const codeCheckerDBAccess_getReport_args&);
  codeCheckerDBAccess_getReport_args& operator=(const codeCheckerDBAccess_getReport_args&);
  codeCheckerDBAccess_getReport_args() : reportId(0) {
  }

  virtual ~codeCheckerDBAccess_getReport_args() throw();
  int64_t reportId;

  _codeCheckerDBAccess_getReport_args__isset __isset;

  void __set_reportId(const int64_t val);

  bool operator == (const codeCheckerDBAccess_getReport_args & rhs) const
  {
    if (!(reportId == rhs.reportId))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getReport_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getReport_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_getReport_pargs {
 public:


  virtual ~codeCheckerDBAccess_getReport_pargs() throw();
  const int64_t* reportId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getReport_result__isset {
  _codeCheckerDBAccess_getReport_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getReport_result__isset;

class codeCheckerDBAccess_getReport_result {
 public:

  codeCheckerDBAccess_getReport_result(const codeCheckerDBAccess_getReport_result&);
  codeCheckerDBAccess_getReport_result& operator=(const codeCheckerDBAccess_getReport_result&);
  codeCheckerDBAccess_getReport_result() {
  }

  virtual ~codeCheckerDBAccess_getReport_result() throw();
  ReportData success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getReport_result__isset __isset;

  void __set_success(const ReportData& val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_getReport_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getReport_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getReport_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getReport_presult__isset {
  _codeCheckerDBAccess_getReport_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getReport_presult__isset;

class codeCheckerDBAccess_getReport_presult {
 public:


  virtual ~codeCheckerDBAccess_getReport_presult() throw();
  ReportData* success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getReport_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_getRunResults_args__isset {
  _codeCheckerDBAccess_getRunResults_args__isset() : runIds(false), limit(false), offset(false), sortType(false), reportFilter(false), cmpData(false), getDetails(false) {}
  bool runIds :1;
  bool limit :1;
  bool offset :1;
  bool sortType :1;
  bool reportFilter :1;
  bool cmpData :1;
  bool getDetails :1;
} _codeCheckerDBAccess_getRunResults_args__isset;

class codeCheckerDBAccess_getRunResults_args {
 public:

  codeCheckerDBAccess_getRunResults_args(const codeCheckerDBAccess_getRunResults_args&);
  codeCheckerDBAccess_getRunResults_args& operator=(const codeCheckerDBAccess_getRunResults_args&);
  codeCheckerDBAccess_getRunResults_args() : limit(0), offset(0), getDetails(0) {
  }

  virtual ~codeCheckerDBAccess_getRunResults_args() throw();
  std::vector<int64_t>  runIds;
  int64_t limit;
  int64_t offset;
  std::vector<SortMode>  sortType;
  ReportFilter reportFilter;
  CompareData cmpData;
  bool getDetails;

  _codeCheckerDBAccess_getRunResults_args__isset __isset;

  void __set_runIds(const std::vector<int64_t> & val);

  void __set_limit(const int64_t val);

  void __set_offset(const int64_t val);

  void __set_sortType(const std::vector<SortMode> & val);

  void __set_reportFilter(const ReportFilter& val);

  void __set_cmpData(const CompareData& val);

  void __set_getDetails(const bool val);

  bool operator == (const codeCheckerDBAccess_getRunResults_args & rhs) const
  {
    if (!(runIds == rhs.runIds))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(sortType == rhs.sortType))
      return false;
    if (!(reportFilter == rhs.reportFilter))
      return false;
    if (!(cmpData == rhs.cmpData))
      return false;
    if (!(getDetails == rhs.getDetails))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getRunResults_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getRunResults_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_getRunResults_pargs {
 public:


  virtual ~codeCheckerDBAccess_getRunResults_pargs() throw();
  const std::vector<int64_t> * runIds;
  const int64_t* limit;
  const int64_t* offset;
  const std::vector<SortMode> * sortType;
  const ReportFilter* reportFilter;
  const CompareData* cmpData;
  const bool* getDetails;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getRunResults_result__isset {
  _codeCheckerDBAccess_getRunResults_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getRunResults_result__isset;

class codeCheckerDBAccess_getRunResults_result {
 public:

  codeCheckerDBAccess_getRunResults_result(const codeCheckerDBAccess_getRunResults_result&);
  codeCheckerDBAccess_getRunResults_result& operator=(const codeCheckerDBAccess_getRunResults_result&);
  codeCheckerDBAccess_getRunResults_result() {
  }

  virtual ~codeCheckerDBAccess_getRunResults_result() throw();
  ReportDataList success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getRunResults_result__isset __isset;

  void __set_success(const ReportDataList& val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_getRunResults_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getRunResults_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getRunResults_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getRunResults_presult__isset {
  _codeCheckerDBAccess_getRunResults_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getRunResults_presult__isset;

class codeCheckerDBAccess_getRunResults_presult {
 public:


  virtual ~codeCheckerDBAccess_getRunResults_presult() throw();
  ReportDataList* success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getRunResults_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_getRunReportCounts_args__isset {
  _codeCheckerDBAccess_getRunReportCounts_args__isset() : runIds(false), reportFilter(false), limit(false), offset(false) {}
  bool runIds :1;
  bool reportFilter :1;
  bool limit :1;
  bool offset :1;
} _codeCheckerDBAccess_getRunReportCounts_args__isset;

class codeCheckerDBAccess_getRunReportCounts_args {
 public:

  codeCheckerDBAccess_getRunReportCounts_args(const codeCheckerDBAccess_getRunReportCounts_args&);
  codeCheckerDBAccess_getRunReportCounts_args& operator=(const codeCheckerDBAccess_getRunReportCounts_args&);
  codeCheckerDBAccess_getRunReportCounts_args() : limit(0), offset(0) {
  }

  virtual ~codeCheckerDBAccess_getRunReportCounts_args() throw();
  std::vector<int64_t>  runIds;
  ReportFilter reportFilter;
  int64_t limit;
  int64_t offset;

  _codeCheckerDBAccess_getRunReportCounts_args__isset __isset;

  void __set_runIds(const std::vector<int64_t> & val);

  void __set_reportFilter(const ReportFilter& val);

  void __set_limit(const int64_t val);

  void __set_offset(const int64_t val);

  bool operator == (const codeCheckerDBAccess_getRunReportCounts_args & rhs) const
  {
    if (!(runIds == rhs.runIds))
      return false;
    if (!(reportFilter == rhs.reportFilter))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getRunReportCounts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getRunReportCounts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_getRunReportCounts_pargs {
 public:


  virtual ~codeCheckerDBAccess_getRunReportCounts_pargs() throw();
  const std::vector<int64_t> * runIds;
  const ReportFilter* reportFilter;
  const int64_t* limit;
  const int64_t* offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getRunReportCounts_result__isset {
  _codeCheckerDBAccess_getRunReportCounts_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getRunReportCounts_result__isset;

class codeCheckerDBAccess_getRunReportCounts_result {
 public:

  codeCheckerDBAccess_getRunReportCounts_result(const codeCheckerDBAccess_getRunReportCounts_result&);
  codeCheckerDBAccess_getRunReportCounts_result& operator=(const codeCheckerDBAccess_getRunReportCounts_result&);
  codeCheckerDBAccess_getRunReportCounts_result() {
  }

  virtual ~codeCheckerDBAccess_getRunReportCounts_result() throw();
  RunReportCounts success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getRunReportCounts_result__isset __isset;

  void __set_success(const RunReportCounts& val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_getRunReportCounts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getRunReportCounts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getRunReportCounts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getRunReportCounts_presult__isset {
  _codeCheckerDBAccess_getRunReportCounts_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getRunReportCounts_presult__isset;

class codeCheckerDBAccess_getRunReportCounts_presult {
 public:


  virtual ~codeCheckerDBAccess_getRunReportCounts_presult() throw();
  RunReportCounts* success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getRunReportCounts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_getRunResultCount_args__isset {
  _codeCheckerDBAccess_getRunResultCount_args__isset() : runIds(false), reportFilter(false), cmpData(false) {}
  bool runIds :1;
  bool reportFilter :1;
  bool cmpData :1;
} _codeCheckerDBAccess_getRunResultCount_args__isset;

class codeCheckerDBAccess_getRunResultCount_args {
 public:

  codeCheckerDBAccess_getRunResultCount_args(const codeCheckerDBAccess_getRunResultCount_args&);
  codeCheckerDBAccess_getRunResultCount_args& operator=(const codeCheckerDBAccess_getRunResultCount_args&);
  codeCheckerDBAccess_getRunResultCount_args() {
  }

  virtual ~codeCheckerDBAccess_getRunResultCount_args() throw();
  std::vector<int64_t>  runIds;
  ReportFilter reportFilter;
  CompareData cmpData;

  _codeCheckerDBAccess_getRunResultCount_args__isset __isset;

  void __set_runIds(const std::vector<int64_t> & val);

  void __set_reportFilter(const ReportFilter& val);

  void __set_cmpData(const CompareData& val);

  bool operator == (const codeCheckerDBAccess_getRunResultCount_args & rhs) const
  {
    if (!(runIds == rhs.runIds))
      return false;
    if (!(reportFilter == rhs.reportFilter))
      return false;
    if (!(cmpData == rhs.cmpData))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getRunResultCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getRunResultCount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_getRunResultCount_pargs {
 public:


  virtual ~codeCheckerDBAccess_getRunResultCount_pargs() throw();
  const std::vector<int64_t> * runIds;
  const ReportFilter* reportFilter;
  const CompareData* cmpData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getRunResultCount_result__isset {
  _codeCheckerDBAccess_getRunResultCount_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getRunResultCount_result__isset;

class codeCheckerDBAccess_getRunResultCount_result {
 public:

  codeCheckerDBAccess_getRunResultCount_result(const codeCheckerDBAccess_getRunResultCount_result&);
  codeCheckerDBAccess_getRunResultCount_result& operator=(const codeCheckerDBAccess_getRunResultCount_result&);
  codeCheckerDBAccess_getRunResultCount_result() : success(0) {
  }

  virtual ~codeCheckerDBAccess_getRunResultCount_result() throw();
  int64_t success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getRunResultCount_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_getRunResultCount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getRunResultCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getRunResultCount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getRunResultCount_presult__isset {
  _codeCheckerDBAccess_getRunResultCount_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getRunResultCount_presult__isset;

class codeCheckerDBAccess_getRunResultCount_presult {
 public:


  virtual ~codeCheckerDBAccess_getRunResultCount_presult() throw();
  int64_t* success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getRunResultCount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_getReportDetails_args__isset {
  _codeCheckerDBAccess_getReportDetails_args__isset() : reportId(false) {}
  bool reportId :1;
} _codeCheckerDBAccess_getReportDetails_args__isset;

class codeCheckerDBAccess_getReportDetails_args {
 public:

  codeCheckerDBAccess_getReportDetails_args(const codeCheckerDBAccess_getReportDetails_args&);
  codeCheckerDBAccess_getReportDetails_args& operator=(const codeCheckerDBAccess_getReportDetails_args&);
  codeCheckerDBAccess_getReportDetails_args() : reportId(0) {
  }

  virtual ~codeCheckerDBAccess_getReportDetails_args() throw();
  int64_t reportId;

  _codeCheckerDBAccess_getReportDetails_args__isset __isset;

  void __set_reportId(const int64_t val);

  bool operator == (const codeCheckerDBAccess_getReportDetails_args & rhs) const
  {
    if (!(reportId == rhs.reportId))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getReportDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getReportDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_getReportDetails_pargs {
 public:


  virtual ~codeCheckerDBAccess_getReportDetails_pargs() throw();
  const int64_t* reportId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getReportDetails_result__isset {
  _codeCheckerDBAccess_getReportDetails_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getReportDetails_result__isset;

class codeCheckerDBAccess_getReportDetails_result {
 public:

  codeCheckerDBAccess_getReportDetails_result(const codeCheckerDBAccess_getReportDetails_result&);
  codeCheckerDBAccess_getReportDetails_result& operator=(const codeCheckerDBAccess_getReportDetails_result&);
  codeCheckerDBAccess_getReportDetails_result() {
  }

  virtual ~codeCheckerDBAccess_getReportDetails_result() throw();
  ReportDetails success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getReportDetails_result__isset __isset;

  void __set_success(const ReportDetails& val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_getReportDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getReportDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getReportDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getReportDetails_presult__isset {
  _codeCheckerDBAccess_getReportDetails_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getReportDetails_presult__isset;

class codeCheckerDBAccess_getReportDetails_presult {
 public:


  virtual ~codeCheckerDBAccess_getReportDetails_presult() throw();
  ReportDetails* success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getReportDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_getSourceFileData_args__isset {
  _codeCheckerDBAccess_getSourceFileData_args__isset() : fileId(false), fileContent(false), encoding(false) {}
  bool fileId :1;
  bool fileContent :1;
  bool encoding :1;
} _codeCheckerDBAccess_getSourceFileData_args__isset;

class codeCheckerDBAccess_getSourceFileData_args {
 public:

  codeCheckerDBAccess_getSourceFileData_args(const codeCheckerDBAccess_getSourceFileData_args&);
  codeCheckerDBAccess_getSourceFileData_args& operator=(const codeCheckerDBAccess_getSourceFileData_args&);
  codeCheckerDBAccess_getSourceFileData_args() : fileId(0), fileContent(0), encoding((Encoding::type)0) {
  }

  virtual ~codeCheckerDBAccess_getSourceFileData_args() throw();
  int64_t fileId;
  bool fileContent;
  Encoding::type encoding;

  _codeCheckerDBAccess_getSourceFileData_args__isset __isset;

  void __set_fileId(const int64_t val);

  void __set_fileContent(const bool val);

  void __set_encoding(const Encoding::type val);

  bool operator == (const codeCheckerDBAccess_getSourceFileData_args & rhs) const
  {
    if (!(fileId == rhs.fileId))
      return false;
    if (!(fileContent == rhs.fileContent))
      return false;
    if (!(encoding == rhs.encoding))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getSourceFileData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getSourceFileData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_getSourceFileData_pargs {
 public:


  virtual ~codeCheckerDBAccess_getSourceFileData_pargs() throw();
  const int64_t* fileId;
  const bool* fileContent;
  const Encoding::type* encoding;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getSourceFileData_result__isset {
  _codeCheckerDBAccess_getSourceFileData_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getSourceFileData_result__isset;

class codeCheckerDBAccess_getSourceFileData_result {
 public:

  codeCheckerDBAccess_getSourceFileData_result(const codeCheckerDBAccess_getSourceFileData_result&);
  codeCheckerDBAccess_getSourceFileData_result& operator=(const codeCheckerDBAccess_getSourceFileData_result&);
  codeCheckerDBAccess_getSourceFileData_result() {
  }

  virtual ~codeCheckerDBAccess_getSourceFileData_result() throw();
  SourceFileData success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getSourceFileData_result__isset __isset;

  void __set_success(const SourceFileData& val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_getSourceFileData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getSourceFileData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getSourceFileData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getSourceFileData_presult__isset {
  _codeCheckerDBAccess_getSourceFileData_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getSourceFileData_presult__isset;

class codeCheckerDBAccess_getSourceFileData_presult {
 public:


  virtual ~codeCheckerDBAccess_getSourceFileData_presult() throw();
  SourceFileData* success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getSourceFileData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_getLinesInSourceFileContents_args__isset {
  _codeCheckerDBAccess_getLinesInSourceFileContents_args__isset() : linesInFilesRequested(false), encoding(false) {}
  bool linesInFilesRequested :1;
  bool encoding :1;
} _codeCheckerDBAccess_getLinesInSourceFileContents_args__isset;

class codeCheckerDBAccess_getLinesInSourceFileContents_args {
 public:

  codeCheckerDBAccess_getLinesInSourceFileContents_args(const codeCheckerDBAccess_getLinesInSourceFileContents_args&);
  codeCheckerDBAccess_getLinesInSourceFileContents_args& operator=(const codeCheckerDBAccess_getLinesInSourceFileContents_args&);
  codeCheckerDBAccess_getLinesInSourceFileContents_args() : encoding((Encoding::type)0) {
  }

  virtual ~codeCheckerDBAccess_getLinesInSourceFileContents_args() throw();
  LinesInFilesRequestedList linesInFilesRequested;
  Encoding::type encoding;

  _codeCheckerDBAccess_getLinesInSourceFileContents_args__isset __isset;

  void __set_linesInFilesRequested(const LinesInFilesRequestedList& val);

  void __set_encoding(const Encoding::type val);

  bool operator == (const codeCheckerDBAccess_getLinesInSourceFileContents_args & rhs) const
  {
    if (!(linesInFilesRequested == rhs.linesInFilesRequested))
      return false;
    if (!(encoding == rhs.encoding))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getLinesInSourceFileContents_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getLinesInSourceFileContents_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_getLinesInSourceFileContents_pargs {
 public:


  virtual ~codeCheckerDBAccess_getLinesInSourceFileContents_pargs() throw();
  const LinesInFilesRequestedList* linesInFilesRequested;
  const Encoding::type* encoding;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getLinesInSourceFileContents_result__isset {
  _codeCheckerDBAccess_getLinesInSourceFileContents_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getLinesInSourceFileContents_result__isset;

class codeCheckerDBAccess_getLinesInSourceFileContents_result {
 public:

  codeCheckerDBAccess_getLinesInSourceFileContents_result(const codeCheckerDBAccess_getLinesInSourceFileContents_result&);
  codeCheckerDBAccess_getLinesInSourceFileContents_result& operator=(const codeCheckerDBAccess_getLinesInSourceFileContents_result&);
  codeCheckerDBAccess_getLinesInSourceFileContents_result() {
  }

  virtual ~codeCheckerDBAccess_getLinesInSourceFileContents_result() throw();
  std::map<int64_t, std::map<int64_t, std::string> >  success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getLinesInSourceFileContents_result__isset __isset;

  void __set_success(const std::map<int64_t, std::map<int64_t, std::string> > & val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_getLinesInSourceFileContents_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getLinesInSourceFileContents_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getLinesInSourceFileContents_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getLinesInSourceFileContents_presult__isset {
  _codeCheckerDBAccess_getLinesInSourceFileContents_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getLinesInSourceFileContents_presult__isset;

class codeCheckerDBAccess_getLinesInSourceFileContents_presult {
 public:


  virtual ~codeCheckerDBAccess_getLinesInSourceFileContents_presult() throw();
  std::map<int64_t, std::map<int64_t, std::string> > * success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getLinesInSourceFileContents_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class codeCheckerDBAccess_isReviewStatusChangeDisabled_args {
 public:

  codeCheckerDBAccess_isReviewStatusChangeDisabled_args(const codeCheckerDBAccess_isReviewStatusChangeDisabled_args&);
  codeCheckerDBAccess_isReviewStatusChangeDisabled_args& operator=(const codeCheckerDBAccess_isReviewStatusChangeDisabled_args&);
  codeCheckerDBAccess_isReviewStatusChangeDisabled_args() {
  }

  virtual ~codeCheckerDBAccess_isReviewStatusChangeDisabled_args() throw();

  bool operator == (const codeCheckerDBAccess_isReviewStatusChangeDisabled_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const codeCheckerDBAccess_isReviewStatusChangeDisabled_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_isReviewStatusChangeDisabled_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_isReviewStatusChangeDisabled_pargs {
 public:


  virtual ~codeCheckerDBAccess_isReviewStatusChangeDisabled_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_isReviewStatusChangeDisabled_result__isset {
  _codeCheckerDBAccess_isReviewStatusChangeDisabled_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_isReviewStatusChangeDisabled_result__isset;

class codeCheckerDBAccess_isReviewStatusChangeDisabled_result {
 public:

  codeCheckerDBAccess_isReviewStatusChangeDisabled_result(const codeCheckerDBAccess_isReviewStatusChangeDisabled_result&);
  codeCheckerDBAccess_isReviewStatusChangeDisabled_result& operator=(const codeCheckerDBAccess_isReviewStatusChangeDisabled_result&);
  codeCheckerDBAccess_isReviewStatusChangeDisabled_result() : success(0) {
  }

  virtual ~codeCheckerDBAccess_isReviewStatusChangeDisabled_result() throw();
  bool success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_isReviewStatusChangeDisabled_result__isset __isset;

  void __set_success(const bool val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_isReviewStatusChangeDisabled_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_isReviewStatusChangeDisabled_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_isReviewStatusChangeDisabled_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_isReviewStatusChangeDisabled_presult__isset {
  _codeCheckerDBAccess_isReviewStatusChangeDisabled_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_isReviewStatusChangeDisabled_presult__isset;

class codeCheckerDBAccess_isReviewStatusChangeDisabled_presult {
 public:


  virtual ~codeCheckerDBAccess_isReviewStatusChangeDisabled_presult() throw();
  bool* success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_isReviewStatusChangeDisabled_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_changeReviewStatus_args__isset {
  _codeCheckerDBAccess_changeReviewStatus_args__isset() : reportId(false), status(false), message(false) {}
  bool reportId :1;
  bool status :1;
  bool message :1;
} _codeCheckerDBAccess_changeReviewStatus_args__isset;

class codeCheckerDBAccess_changeReviewStatus_args {
 public:

  codeCheckerDBAccess_changeReviewStatus_args(const codeCheckerDBAccess_changeReviewStatus_args&);
  codeCheckerDBAccess_changeReviewStatus_args& operator=(const codeCheckerDBAccess_changeReviewStatus_args&);
  codeCheckerDBAccess_changeReviewStatus_args() : reportId(0), status((ReviewStatus::type)0), message() {
  }

  virtual ~codeCheckerDBAccess_changeReviewStatus_args() throw();
  int64_t reportId;
  ReviewStatus::type status;
  std::string message;

  _codeCheckerDBAccess_changeReviewStatus_args__isset __isset;

  void __set_reportId(const int64_t val);

  void __set_status(const ReviewStatus::type val);

  void __set_message(const std::string& val);

  bool operator == (const codeCheckerDBAccess_changeReviewStatus_args & rhs) const
  {
    if (!(reportId == rhs.reportId))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_changeReviewStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_changeReviewStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_changeReviewStatus_pargs {
 public:


  virtual ~codeCheckerDBAccess_changeReviewStatus_pargs() throw();
  const int64_t* reportId;
  const ReviewStatus::type* status;
  const std::string* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_changeReviewStatus_result__isset {
  _codeCheckerDBAccess_changeReviewStatus_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_changeReviewStatus_result__isset;

class codeCheckerDBAccess_changeReviewStatus_result {
 public:

  codeCheckerDBAccess_changeReviewStatus_result(const codeCheckerDBAccess_changeReviewStatus_result&);
  codeCheckerDBAccess_changeReviewStatus_result& operator=(const codeCheckerDBAccess_changeReviewStatus_result&);
  codeCheckerDBAccess_changeReviewStatus_result() : success(0) {
  }

  virtual ~codeCheckerDBAccess_changeReviewStatus_result() throw();
  bool success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_changeReviewStatus_result__isset __isset;

  void __set_success(const bool val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_changeReviewStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_changeReviewStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_changeReviewStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_changeReviewStatus_presult__isset {
  _codeCheckerDBAccess_changeReviewStatus_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_changeReviewStatus_presult__isset;

class codeCheckerDBAccess_changeReviewStatus_presult {
 public:


  virtual ~codeCheckerDBAccess_changeReviewStatus_presult() throw();
  bool* success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_changeReviewStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_getComments_args__isset {
  _codeCheckerDBAccess_getComments_args__isset() : reportId(false) {}
  bool reportId :1;
} _codeCheckerDBAccess_getComments_args__isset;

class codeCheckerDBAccess_getComments_args {
 public:

  codeCheckerDBAccess_getComments_args(const codeCheckerDBAccess_getComments_args&);
  codeCheckerDBAccess_getComments_args& operator=(const codeCheckerDBAccess_getComments_args&);
  codeCheckerDBAccess_getComments_args() : reportId(0) {
  }

  virtual ~codeCheckerDBAccess_getComments_args() throw();
  int64_t reportId;

  _codeCheckerDBAccess_getComments_args__isset __isset;

  void __set_reportId(const int64_t val);

  bool operator == (const codeCheckerDBAccess_getComments_args & rhs) const
  {
    if (!(reportId == rhs.reportId))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getComments_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getComments_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_getComments_pargs {
 public:


  virtual ~codeCheckerDBAccess_getComments_pargs() throw();
  const int64_t* reportId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getComments_result__isset {
  _codeCheckerDBAccess_getComments_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getComments_result__isset;

class codeCheckerDBAccess_getComments_result {
 public:

  codeCheckerDBAccess_getComments_result(const codeCheckerDBAccess_getComments_result&);
  codeCheckerDBAccess_getComments_result& operator=(const codeCheckerDBAccess_getComments_result&);
  codeCheckerDBAccess_getComments_result() {
  }

  virtual ~codeCheckerDBAccess_getComments_result() throw();
  CommentDataList success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getComments_result__isset __isset;

  void __set_success(const CommentDataList& val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_getComments_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getComments_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getComments_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getComments_presult__isset {
  _codeCheckerDBAccess_getComments_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getComments_presult__isset;

class codeCheckerDBAccess_getComments_presult {
 public:


  virtual ~codeCheckerDBAccess_getComments_presult() throw();
  CommentDataList* success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getComments_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_getCommentCount_args__isset {
  _codeCheckerDBAccess_getCommentCount_args__isset() : reportId(false) {}
  bool reportId :1;
} _codeCheckerDBAccess_getCommentCount_args__isset;

class codeCheckerDBAccess_getCommentCount_args {
 public:

  codeCheckerDBAccess_getCommentCount_args(const codeCheckerDBAccess_getCommentCount_args&);
  codeCheckerDBAccess_getCommentCount_args& operator=(const codeCheckerDBAccess_getCommentCount_args&);
  codeCheckerDBAccess_getCommentCount_args() : reportId(0) {
  }

  virtual ~codeCheckerDBAccess_getCommentCount_args() throw();
  int64_t reportId;

  _codeCheckerDBAccess_getCommentCount_args__isset __isset;

  void __set_reportId(const int64_t val);

  bool operator == (const codeCheckerDBAccess_getCommentCount_args & rhs) const
  {
    if (!(reportId == rhs.reportId))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getCommentCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getCommentCount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_getCommentCount_pargs {
 public:


  virtual ~codeCheckerDBAccess_getCommentCount_pargs() throw();
  const int64_t* reportId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getCommentCount_result__isset {
  _codeCheckerDBAccess_getCommentCount_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getCommentCount_result__isset;

class codeCheckerDBAccess_getCommentCount_result {
 public:

  codeCheckerDBAccess_getCommentCount_result(const codeCheckerDBAccess_getCommentCount_result&);
  codeCheckerDBAccess_getCommentCount_result& operator=(const codeCheckerDBAccess_getCommentCount_result&);
  codeCheckerDBAccess_getCommentCount_result() : success(0) {
  }

  virtual ~codeCheckerDBAccess_getCommentCount_result() throw();
  int64_t success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getCommentCount_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_getCommentCount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getCommentCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getCommentCount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getCommentCount_presult__isset {
  _codeCheckerDBAccess_getCommentCount_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getCommentCount_presult__isset;

class codeCheckerDBAccess_getCommentCount_presult {
 public:


  virtual ~codeCheckerDBAccess_getCommentCount_presult() throw();
  int64_t* success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getCommentCount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_addComment_args__isset {
  _codeCheckerDBAccess_addComment_args__isset() : reportId(false), comment(false) {}
  bool reportId :1;
  bool comment :1;
} _codeCheckerDBAccess_addComment_args__isset;

class codeCheckerDBAccess_addComment_args {
 public:

  codeCheckerDBAccess_addComment_args(const codeCheckerDBAccess_addComment_args&);
  codeCheckerDBAccess_addComment_args& operator=(const codeCheckerDBAccess_addComment_args&);
  codeCheckerDBAccess_addComment_args() : reportId(0) {
  }

  virtual ~codeCheckerDBAccess_addComment_args() throw();
  int64_t reportId;
  CommentData comment;

  _codeCheckerDBAccess_addComment_args__isset __isset;

  void __set_reportId(const int64_t val);

  void __set_comment(const CommentData& val);

  bool operator == (const codeCheckerDBAccess_addComment_args & rhs) const
  {
    if (!(reportId == rhs.reportId))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_addComment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_addComment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_addComment_pargs {
 public:


  virtual ~codeCheckerDBAccess_addComment_pargs() throw();
  const int64_t* reportId;
  const CommentData* comment;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_addComment_result__isset {
  _codeCheckerDBAccess_addComment_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_addComment_result__isset;

class codeCheckerDBAccess_addComment_result {
 public:

  codeCheckerDBAccess_addComment_result(const codeCheckerDBAccess_addComment_result&);
  codeCheckerDBAccess_addComment_result& operator=(const codeCheckerDBAccess_addComment_result&);
  codeCheckerDBAccess_addComment_result() : success(0) {
  }

  virtual ~codeCheckerDBAccess_addComment_result() throw();
  bool success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_addComment_result__isset __isset;

  void __set_success(const bool val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_addComment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_addComment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_addComment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_addComment_presult__isset {
  _codeCheckerDBAccess_addComment_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_addComment_presult__isset;

class codeCheckerDBAccess_addComment_presult {
 public:


  virtual ~codeCheckerDBAccess_addComment_presult() throw();
  bool* success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_addComment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_updateComment_args__isset {
  _codeCheckerDBAccess_updateComment_args__isset() : commentId(false), newMessage(false) {}
  bool commentId :1;
  bool newMessage :1;
} _codeCheckerDBAccess_updateComment_args__isset;

class codeCheckerDBAccess_updateComment_args {
 public:

  codeCheckerDBAccess_updateComment_args(const codeCheckerDBAccess_updateComment_args&);
  codeCheckerDBAccess_updateComment_args& operator=(const codeCheckerDBAccess_updateComment_args&);
  codeCheckerDBAccess_updateComment_args() : commentId(0), newMessage() {
  }

  virtual ~codeCheckerDBAccess_updateComment_args() throw();
  int64_t commentId;
  std::string newMessage;

  _codeCheckerDBAccess_updateComment_args__isset __isset;

  void __set_commentId(const int64_t val);

  void __set_newMessage(const std::string& val);

  bool operator == (const codeCheckerDBAccess_updateComment_args & rhs) const
  {
    if (!(commentId == rhs.commentId))
      return false;
    if (!(newMessage == rhs.newMessage))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_updateComment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_updateComment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_updateComment_pargs {
 public:


  virtual ~codeCheckerDBAccess_updateComment_pargs() throw();
  const int64_t* commentId;
  const std::string* newMessage;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_updateComment_result__isset {
  _codeCheckerDBAccess_updateComment_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_updateComment_result__isset;

class codeCheckerDBAccess_updateComment_result {
 public:

  codeCheckerDBAccess_updateComment_result(const codeCheckerDBAccess_updateComment_result&);
  codeCheckerDBAccess_updateComment_result& operator=(const codeCheckerDBAccess_updateComment_result&);
  codeCheckerDBAccess_updateComment_result() : success(0) {
  }

  virtual ~codeCheckerDBAccess_updateComment_result() throw();
  bool success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_updateComment_result__isset __isset;

  void __set_success(const bool val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_updateComment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_updateComment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_updateComment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_updateComment_presult__isset {
  _codeCheckerDBAccess_updateComment_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_updateComment_presult__isset;

class codeCheckerDBAccess_updateComment_presult {
 public:


  virtual ~codeCheckerDBAccess_updateComment_presult() throw();
  bool* success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_updateComment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_removeComment_args__isset {
  _codeCheckerDBAccess_removeComment_args__isset() : commentId(false) {}
  bool commentId :1;
} _codeCheckerDBAccess_removeComment_args__isset;

class codeCheckerDBAccess_removeComment_args {
 public:

  codeCheckerDBAccess_removeComment_args(const codeCheckerDBAccess_removeComment_args&);
  codeCheckerDBAccess_removeComment_args& operator=(const codeCheckerDBAccess_removeComment_args&);
  codeCheckerDBAccess_removeComment_args() : commentId(0) {
  }

  virtual ~codeCheckerDBAccess_removeComment_args() throw();
  int64_t commentId;

  _codeCheckerDBAccess_removeComment_args__isset __isset;

  void __set_commentId(const int64_t val);

  bool operator == (const codeCheckerDBAccess_removeComment_args & rhs) const
  {
    if (!(commentId == rhs.commentId))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_removeComment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_removeComment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_removeComment_pargs {
 public:


  virtual ~codeCheckerDBAccess_removeComment_pargs() throw();
  const int64_t* commentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_removeComment_result__isset {
  _codeCheckerDBAccess_removeComment_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_removeComment_result__isset;

class codeCheckerDBAccess_removeComment_result {
 public:

  codeCheckerDBAccess_removeComment_result(const codeCheckerDBAccess_removeComment_result&);
  codeCheckerDBAccess_removeComment_result& operator=(const codeCheckerDBAccess_removeComment_result&);
  codeCheckerDBAccess_removeComment_result() : success(0) {
  }

  virtual ~codeCheckerDBAccess_removeComment_result() throw();
  bool success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_removeComment_result__isset __isset;

  void __set_success(const bool val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_removeComment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_removeComment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_removeComment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_removeComment_presult__isset {
  _codeCheckerDBAccess_removeComment_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_removeComment_presult__isset;

class codeCheckerDBAccess_removeComment_presult {
 public:


  virtual ~codeCheckerDBAccess_removeComment_presult() throw();
  bool* success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_removeComment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_getCheckerDoc_args__isset {
  _codeCheckerDBAccess_getCheckerDoc_args__isset() : checkerId(false) {}
  bool checkerId :1;
} _codeCheckerDBAccess_getCheckerDoc_args__isset;

class codeCheckerDBAccess_getCheckerDoc_args {
 public:

  codeCheckerDBAccess_getCheckerDoc_args(const codeCheckerDBAccess_getCheckerDoc_args&);
  codeCheckerDBAccess_getCheckerDoc_args& operator=(const codeCheckerDBAccess_getCheckerDoc_args&);
  codeCheckerDBAccess_getCheckerDoc_args() : checkerId() {
  }

  virtual ~codeCheckerDBAccess_getCheckerDoc_args() throw();
  std::string checkerId;

  _codeCheckerDBAccess_getCheckerDoc_args__isset __isset;

  void __set_checkerId(const std::string& val);

  bool operator == (const codeCheckerDBAccess_getCheckerDoc_args & rhs) const
  {
    if (!(checkerId == rhs.checkerId))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getCheckerDoc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getCheckerDoc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_getCheckerDoc_pargs {
 public:


  virtual ~codeCheckerDBAccess_getCheckerDoc_pargs() throw();
  const std::string* checkerId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getCheckerDoc_result__isset {
  _codeCheckerDBAccess_getCheckerDoc_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getCheckerDoc_result__isset;

class codeCheckerDBAccess_getCheckerDoc_result {
 public:

  codeCheckerDBAccess_getCheckerDoc_result(const codeCheckerDBAccess_getCheckerDoc_result&);
  codeCheckerDBAccess_getCheckerDoc_result& operator=(const codeCheckerDBAccess_getCheckerDoc_result&);
  codeCheckerDBAccess_getCheckerDoc_result() : success() {
  }

  virtual ~codeCheckerDBAccess_getCheckerDoc_result() throw();
  std::string success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getCheckerDoc_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_getCheckerDoc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getCheckerDoc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getCheckerDoc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getCheckerDoc_presult__isset {
  _codeCheckerDBAccess_getCheckerDoc_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getCheckerDoc_presult__isset;

class codeCheckerDBAccess_getCheckerDoc_presult {
 public:


  virtual ~codeCheckerDBAccess_getCheckerDoc_presult() throw();
  std::string* success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getCheckerDoc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class codeCheckerDBAccess_getPackageVersion_args {
 public:

  codeCheckerDBAccess_getPackageVersion_args(const codeCheckerDBAccess_getPackageVersion_args&);
  codeCheckerDBAccess_getPackageVersion_args& operator=(const codeCheckerDBAccess_getPackageVersion_args&);
  codeCheckerDBAccess_getPackageVersion_args() {
  }

  virtual ~codeCheckerDBAccess_getPackageVersion_args() throw();

  bool operator == (const codeCheckerDBAccess_getPackageVersion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getPackageVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getPackageVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_getPackageVersion_pargs {
 public:


  virtual ~codeCheckerDBAccess_getPackageVersion_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getPackageVersion_result__isset {
  _codeCheckerDBAccess_getPackageVersion_result__isset() : success(false) {}
  bool success :1;
} _codeCheckerDBAccess_getPackageVersion_result__isset;

class codeCheckerDBAccess_getPackageVersion_result {
 public:

  codeCheckerDBAccess_getPackageVersion_result(const codeCheckerDBAccess_getPackageVersion_result&);
  codeCheckerDBAccess_getPackageVersion_result& operator=(const codeCheckerDBAccess_getPackageVersion_result&);
  codeCheckerDBAccess_getPackageVersion_result() : success() {
  }

  virtual ~codeCheckerDBAccess_getPackageVersion_result() throw();
  std::string success;

  _codeCheckerDBAccess_getPackageVersion_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const codeCheckerDBAccess_getPackageVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getPackageVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getPackageVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getPackageVersion_presult__isset {
  _codeCheckerDBAccess_getPackageVersion_presult__isset() : success(false) {}
  bool success :1;
} _codeCheckerDBAccess_getPackageVersion_presult__isset;

class codeCheckerDBAccess_getPackageVersion_presult {
 public:


  virtual ~codeCheckerDBAccess_getPackageVersion_presult() throw();
  std::string* success;

  _codeCheckerDBAccess_getPackageVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_removeRunResults_args__isset {
  _codeCheckerDBAccess_removeRunResults_args__isset() : runIds(false) {}
  bool runIds :1;
} _codeCheckerDBAccess_removeRunResults_args__isset;

class codeCheckerDBAccess_removeRunResults_args {
 public:

  codeCheckerDBAccess_removeRunResults_args(const codeCheckerDBAccess_removeRunResults_args&);
  codeCheckerDBAccess_removeRunResults_args& operator=(const codeCheckerDBAccess_removeRunResults_args&);
  codeCheckerDBAccess_removeRunResults_args() {
  }

  virtual ~codeCheckerDBAccess_removeRunResults_args() throw();
  std::vector<int64_t>  runIds;

  _codeCheckerDBAccess_removeRunResults_args__isset __isset;

  void __set_runIds(const std::vector<int64_t> & val);

  bool operator == (const codeCheckerDBAccess_removeRunResults_args & rhs) const
  {
    if (!(runIds == rhs.runIds))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_removeRunResults_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_removeRunResults_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_removeRunResults_pargs {
 public:


  virtual ~codeCheckerDBAccess_removeRunResults_pargs() throw();
  const std::vector<int64_t> * runIds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_removeRunResults_result__isset {
  _codeCheckerDBAccess_removeRunResults_result__isset() : success(false) {}
  bool success :1;
} _codeCheckerDBAccess_removeRunResults_result__isset;

class codeCheckerDBAccess_removeRunResults_result {
 public:

  codeCheckerDBAccess_removeRunResults_result(const codeCheckerDBAccess_removeRunResults_result&);
  codeCheckerDBAccess_removeRunResults_result& operator=(const codeCheckerDBAccess_removeRunResults_result&);
  codeCheckerDBAccess_removeRunResults_result() : success(0) {
  }

  virtual ~codeCheckerDBAccess_removeRunResults_result() throw();
  bool success;

  _codeCheckerDBAccess_removeRunResults_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const codeCheckerDBAccess_removeRunResults_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_removeRunResults_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_removeRunResults_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_removeRunResults_presult__isset {
  _codeCheckerDBAccess_removeRunResults_presult__isset() : success(false) {}
  bool success :1;
} _codeCheckerDBAccess_removeRunResults_presult__isset;

class codeCheckerDBAccess_removeRunResults_presult {
 public:


  virtual ~codeCheckerDBAccess_removeRunResults_presult() throw();
  bool* success;

  _codeCheckerDBAccess_removeRunResults_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_removeRunReports_args__isset {
  _codeCheckerDBAccess_removeRunReports_args__isset() : runIds(false), reportFilter(false), cmpData(false) {}
  bool runIds :1;
  bool reportFilter :1;
  bool cmpData :1;
} _codeCheckerDBAccess_removeRunReports_args__isset;

class codeCheckerDBAccess_removeRunReports_args {
 public:

  codeCheckerDBAccess_removeRunReports_args(const codeCheckerDBAccess_removeRunReports_args&);
  codeCheckerDBAccess_removeRunReports_args& operator=(const codeCheckerDBAccess_removeRunReports_args&);
  codeCheckerDBAccess_removeRunReports_args() {
  }

  virtual ~codeCheckerDBAccess_removeRunReports_args() throw();
  std::vector<int64_t>  runIds;
  ReportFilter reportFilter;
  CompareData cmpData;

  _codeCheckerDBAccess_removeRunReports_args__isset __isset;

  void __set_runIds(const std::vector<int64_t> & val);

  void __set_reportFilter(const ReportFilter& val);

  void __set_cmpData(const CompareData& val);

  bool operator == (const codeCheckerDBAccess_removeRunReports_args & rhs) const
  {
    if (!(runIds == rhs.runIds))
      return false;
    if (!(reportFilter == rhs.reportFilter))
      return false;
    if (!(cmpData == rhs.cmpData))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_removeRunReports_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_removeRunReports_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_removeRunReports_pargs {
 public:


  virtual ~codeCheckerDBAccess_removeRunReports_pargs() throw();
  const std::vector<int64_t> * runIds;
  const ReportFilter* reportFilter;
  const CompareData* cmpData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_removeRunReports_result__isset {
  _codeCheckerDBAccess_removeRunReports_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_removeRunReports_result__isset;

class codeCheckerDBAccess_removeRunReports_result {
 public:

  codeCheckerDBAccess_removeRunReports_result(const codeCheckerDBAccess_removeRunReports_result&);
  codeCheckerDBAccess_removeRunReports_result& operator=(const codeCheckerDBAccess_removeRunReports_result&);
  codeCheckerDBAccess_removeRunReports_result() : success(0) {
  }

  virtual ~codeCheckerDBAccess_removeRunReports_result() throw();
  bool success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_removeRunReports_result__isset __isset;

  void __set_success(const bool val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_removeRunReports_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_removeRunReports_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_removeRunReports_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_removeRunReports_presult__isset {
  _codeCheckerDBAccess_removeRunReports_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_removeRunReports_presult__isset;

class codeCheckerDBAccess_removeRunReports_presult {
 public:


  virtual ~codeCheckerDBAccess_removeRunReports_presult() throw();
  bool* success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_removeRunReports_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_removeRun_args__isset {
  _codeCheckerDBAccess_removeRun_args__isset() : runId(false) {}
  bool runId :1;
} _codeCheckerDBAccess_removeRun_args__isset;

class codeCheckerDBAccess_removeRun_args {
 public:

  codeCheckerDBAccess_removeRun_args(const codeCheckerDBAccess_removeRun_args&);
  codeCheckerDBAccess_removeRun_args& operator=(const codeCheckerDBAccess_removeRun_args&);
  codeCheckerDBAccess_removeRun_args() : runId(0) {
  }

  virtual ~codeCheckerDBAccess_removeRun_args() throw();
  int64_t runId;

  _codeCheckerDBAccess_removeRun_args__isset __isset;

  void __set_runId(const int64_t val);

  bool operator == (const codeCheckerDBAccess_removeRun_args & rhs) const
  {
    if (!(runId == rhs.runId))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_removeRun_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_removeRun_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_removeRun_pargs {
 public:


  virtual ~codeCheckerDBAccess_removeRun_pargs() throw();
  const int64_t* runId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_removeRun_result__isset {
  _codeCheckerDBAccess_removeRun_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_removeRun_result__isset;

class codeCheckerDBAccess_removeRun_result {
 public:

  codeCheckerDBAccess_removeRun_result(const codeCheckerDBAccess_removeRun_result&);
  codeCheckerDBAccess_removeRun_result& operator=(const codeCheckerDBAccess_removeRun_result&);
  codeCheckerDBAccess_removeRun_result() : success(0) {
  }

  virtual ~codeCheckerDBAccess_removeRun_result() throw();
  bool success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_removeRun_result__isset __isset;

  void __set_success(const bool val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_removeRun_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_removeRun_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_removeRun_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_removeRun_presult__isset {
  _codeCheckerDBAccess_removeRun_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_removeRun_presult__isset;

class codeCheckerDBAccess_removeRun_presult {
 public:


  virtual ~codeCheckerDBAccess_removeRun_presult() throw();
  bool* success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_removeRun_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class codeCheckerDBAccess_getSuppressFile_args {
 public:

  codeCheckerDBAccess_getSuppressFile_args(const codeCheckerDBAccess_getSuppressFile_args&);
  codeCheckerDBAccess_getSuppressFile_args& operator=(const codeCheckerDBAccess_getSuppressFile_args&);
  codeCheckerDBAccess_getSuppressFile_args() {
  }

  virtual ~codeCheckerDBAccess_getSuppressFile_args() throw();

  bool operator == (const codeCheckerDBAccess_getSuppressFile_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getSuppressFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getSuppressFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_getSuppressFile_pargs {
 public:


  virtual ~codeCheckerDBAccess_getSuppressFile_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getSuppressFile_result__isset {
  _codeCheckerDBAccess_getSuppressFile_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getSuppressFile_result__isset;

class codeCheckerDBAccess_getSuppressFile_result {
 public:

  codeCheckerDBAccess_getSuppressFile_result(const codeCheckerDBAccess_getSuppressFile_result&);
  codeCheckerDBAccess_getSuppressFile_result& operator=(const codeCheckerDBAccess_getSuppressFile_result&);
  codeCheckerDBAccess_getSuppressFile_result() : success() {
  }

  virtual ~codeCheckerDBAccess_getSuppressFile_result() throw();
  std::string success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getSuppressFile_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_getSuppressFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getSuppressFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getSuppressFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getSuppressFile_presult__isset {
  _codeCheckerDBAccess_getSuppressFile_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getSuppressFile_presult__isset;

class codeCheckerDBAccess_getSuppressFile_presult {
 public:


  virtual ~codeCheckerDBAccess_getSuppressFile_presult() throw();
  std::string* success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getSuppressFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_getSeverityCounts_args__isset {
  _codeCheckerDBAccess_getSeverityCounts_args__isset() : runIds(false), reportFilter(false), cmpData(false) {}
  bool runIds :1;
  bool reportFilter :1;
  bool cmpData :1;
} _codeCheckerDBAccess_getSeverityCounts_args__isset;

class codeCheckerDBAccess_getSeverityCounts_args {
 public:

  codeCheckerDBAccess_getSeverityCounts_args(const codeCheckerDBAccess_getSeverityCounts_args&);
  codeCheckerDBAccess_getSeverityCounts_args& operator=(const codeCheckerDBAccess_getSeverityCounts_args&);
  codeCheckerDBAccess_getSeverityCounts_args() {
  }

  virtual ~codeCheckerDBAccess_getSeverityCounts_args() throw();
  std::vector<int64_t>  runIds;
  ReportFilter reportFilter;
  CompareData cmpData;

  _codeCheckerDBAccess_getSeverityCounts_args__isset __isset;

  void __set_runIds(const std::vector<int64_t> & val);

  void __set_reportFilter(const ReportFilter& val);

  void __set_cmpData(const CompareData& val);

  bool operator == (const codeCheckerDBAccess_getSeverityCounts_args & rhs) const
  {
    if (!(runIds == rhs.runIds))
      return false;
    if (!(reportFilter == rhs.reportFilter))
      return false;
    if (!(cmpData == rhs.cmpData))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getSeverityCounts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getSeverityCounts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_getSeverityCounts_pargs {
 public:


  virtual ~codeCheckerDBAccess_getSeverityCounts_pargs() throw();
  const std::vector<int64_t> * runIds;
  const ReportFilter* reportFilter;
  const CompareData* cmpData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getSeverityCounts_result__isset {
  _codeCheckerDBAccess_getSeverityCounts_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getSeverityCounts_result__isset;

class codeCheckerDBAccess_getSeverityCounts_result {
 public:

  codeCheckerDBAccess_getSeverityCounts_result(const codeCheckerDBAccess_getSeverityCounts_result&);
  codeCheckerDBAccess_getSeverityCounts_result& operator=(const codeCheckerDBAccess_getSeverityCounts_result&);
  codeCheckerDBAccess_getSeverityCounts_result() {
  }

  virtual ~codeCheckerDBAccess_getSeverityCounts_result() throw();
  std::map<Severity::type, int64_t>  success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getSeverityCounts_result__isset __isset;

  void __set_success(const std::map<Severity::type, int64_t> & val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_getSeverityCounts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getSeverityCounts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getSeverityCounts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getSeverityCounts_presult__isset {
  _codeCheckerDBAccess_getSeverityCounts_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getSeverityCounts_presult__isset;

class codeCheckerDBAccess_getSeverityCounts_presult {
 public:


  virtual ~codeCheckerDBAccess_getSeverityCounts_presult() throw();
  std::map<Severity::type, int64_t> * success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getSeverityCounts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_getCheckerMsgCounts_args__isset {
  _codeCheckerDBAccess_getCheckerMsgCounts_args__isset() : runIds(false), reportFilter(false), cmpData(false), limit(false), offset(false) {}
  bool runIds :1;
  bool reportFilter :1;
  bool cmpData :1;
  bool limit :1;
  bool offset :1;
} _codeCheckerDBAccess_getCheckerMsgCounts_args__isset;

class codeCheckerDBAccess_getCheckerMsgCounts_args {
 public:

  codeCheckerDBAccess_getCheckerMsgCounts_args(const codeCheckerDBAccess_getCheckerMsgCounts_args&);
  codeCheckerDBAccess_getCheckerMsgCounts_args& operator=(const codeCheckerDBAccess_getCheckerMsgCounts_args&);
  codeCheckerDBAccess_getCheckerMsgCounts_args() : limit(0), offset(0) {
  }

  virtual ~codeCheckerDBAccess_getCheckerMsgCounts_args() throw();
  std::vector<int64_t>  runIds;
  ReportFilter reportFilter;
  CompareData cmpData;
  int64_t limit;
  int64_t offset;

  _codeCheckerDBAccess_getCheckerMsgCounts_args__isset __isset;

  void __set_runIds(const std::vector<int64_t> & val);

  void __set_reportFilter(const ReportFilter& val);

  void __set_cmpData(const CompareData& val);

  void __set_limit(const int64_t val);

  void __set_offset(const int64_t val);

  bool operator == (const codeCheckerDBAccess_getCheckerMsgCounts_args & rhs) const
  {
    if (!(runIds == rhs.runIds))
      return false;
    if (!(reportFilter == rhs.reportFilter))
      return false;
    if (!(cmpData == rhs.cmpData))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getCheckerMsgCounts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getCheckerMsgCounts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_getCheckerMsgCounts_pargs {
 public:


  virtual ~codeCheckerDBAccess_getCheckerMsgCounts_pargs() throw();
  const std::vector<int64_t> * runIds;
  const ReportFilter* reportFilter;
  const CompareData* cmpData;
  const int64_t* limit;
  const int64_t* offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getCheckerMsgCounts_result__isset {
  _codeCheckerDBAccess_getCheckerMsgCounts_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getCheckerMsgCounts_result__isset;

class codeCheckerDBAccess_getCheckerMsgCounts_result {
 public:

  codeCheckerDBAccess_getCheckerMsgCounts_result(const codeCheckerDBAccess_getCheckerMsgCounts_result&);
  codeCheckerDBAccess_getCheckerMsgCounts_result& operator=(const codeCheckerDBAccess_getCheckerMsgCounts_result&);
  codeCheckerDBAccess_getCheckerMsgCounts_result() {
  }

  virtual ~codeCheckerDBAccess_getCheckerMsgCounts_result() throw();
  std::map<std::string, int64_t>  success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getCheckerMsgCounts_result__isset __isset;

  void __set_success(const std::map<std::string, int64_t> & val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_getCheckerMsgCounts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getCheckerMsgCounts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getCheckerMsgCounts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getCheckerMsgCounts_presult__isset {
  _codeCheckerDBAccess_getCheckerMsgCounts_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getCheckerMsgCounts_presult__isset;

class codeCheckerDBAccess_getCheckerMsgCounts_presult {
 public:


  virtual ~codeCheckerDBAccess_getCheckerMsgCounts_presult() throw();
  std::map<std::string, int64_t> * success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getCheckerMsgCounts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_getReviewStatusCounts_args__isset {
  _codeCheckerDBAccess_getReviewStatusCounts_args__isset() : runIds(false), reportFilter(false), cmpData(false) {}
  bool runIds :1;
  bool reportFilter :1;
  bool cmpData :1;
} _codeCheckerDBAccess_getReviewStatusCounts_args__isset;

class codeCheckerDBAccess_getReviewStatusCounts_args {
 public:

  codeCheckerDBAccess_getReviewStatusCounts_args(const codeCheckerDBAccess_getReviewStatusCounts_args&);
  codeCheckerDBAccess_getReviewStatusCounts_args& operator=(const codeCheckerDBAccess_getReviewStatusCounts_args&);
  codeCheckerDBAccess_getReviewStatusCounts_args() {
  }

  virtual ~codeCheckerDBAccess_getReviewStatusCounts_args() throw();
  std::vector<int64_t>  runIds;
  ReportFilter reportFilter;
  CompareData cmpData;

  _codeCheckerDBAccess_getReviewStatusCounts_args__isset __isset;

  void __set_runIds(const std::vector<int64_t> & val);

  void __set_reportFilter(const ReportFilter& val);

  void __set_cmpData(const CompareData& val);

  bool operator == (const codeCheckerDBAccess_getReviewStatusCounts_args & rhs) const
  {
    if (!(runIds == rhs.runIds))
      return false;
    if (!(reportFilter == rhs.reportFilter))
      return false;
    if (!(cmpData == rhs.cmpData))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getReviewStatusCounts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getReviewStatusCounts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_getReviewStatusCounts_pargs {
 public:


  virtual ~codeCheckerDBAccess_getReviewStatusCounts_pargs() throw();
  const std::vector<int64_t> * runIds;
  const ReportFilter* reportFilter;
  const CompareData* cmpData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getReviewStatusCounts_result__isset {
  _codeCheckerDBAccess_getReviewStatusCounts_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getReviewStatusCounts_result__isset;

class codeCheckerDBAccess_getReviewStatusCounts_result {
 public:

  codeCheckerDBAccess_getReviewStatusCounts_result(const codeCheckerDBAccess_getReviewStatusCounts_result&);
  codeCheckerDBAccess_getReviewStatusCounts_result& operator=(const codeCheckerDBAccess_getReviewStatusCounts_result&);
  codeCheckerDBAccess_getReviewStatusCounts_result() {
  }

  virtual ~codeCheckerDBAccess_getReviewStatusCounts_result() throw();
  std::map<ReviewStatus::type, int64_t>  success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getReviewStatusCounts_result__isset __isset;

  void __set_success(const std::map<ReviewStatus::type, int64_t> & val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_getReviewStatusCounts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getReviewStatusCounts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getReviewStatusCounts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getReviewStatusCounts_presult__isset {
  _codeCheckerDBAccess_getReviewStatusCounts_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getReviewStatusCounts_presult__isset;

class codeCheckerDBAccess_getReviewStatusCounts_presult {
 public:


  virtual ~codeCheckerDBAccess_getReviewStatusCounts_presult() throw();
  std::map<ReviewStatus::type, int64_t> * success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getReviewStatusCounts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_getDetectionStatusCounts_args__isset {
  _codeCheckerDBAccess_getDetectionStatusCounts_args__isset() : runIds(false), reportFilter(false), cmpData(false) {}
  bool runIds :1;
  bool reportFilter :1;
  bool cmpData :1;
} _codeCheckerDBAccess_getDetectionStatusCounts_args__isset;

class codeCheckerDBAccess_getDetectionStatusCounts_args {
 public:

  codeCheckerDBAccess_getDetectionStatusCounts_args(const codeCheckerDBAccess_getDetectionStatusCounts_args&);
  codeCheckerDBAccess_getDetectionStatusCounts_args& operator=(const codeCheckerDBAccess_getDetectionStatusCounts_args&);
  codeCheckerDBAccess_getDetectionStatusCounts_args() {
  }

  virtual ~codeCheckerDBAccess_getDetectionStatusCounts_args() throw();
  std::vector<int64_t>  runIds;
  ReportFilter reportFilter;
  CompareData cmpData;

  _codeCheckerDBAccess_getDetectionStatusCounts_args__isset __isset;

  void __set_runIds(const std::vector<int64_t> & val);

  void __set_reportFilter(const ReportFilter& val);

  void __set_cmpData(const CompareData& val);

  bool operator == (const codeCheckerDBAccess_getDetectionStatusCounts_args & rhs) const
  {
    if (!(runIds == rhs.runIds))
      return false;
    if (!(reportFilter == rhs.reportFilter))
      return false;
    if (!(cmpData == rhs.cmpData))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getDetectionStatusCounts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getDetectionStatusCounts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_getDetectionStatusCounts_pargs {
 public:


  virtual ~codeCheckerDBAccess_getDetectionStatusCounts_pargs() throw();
  const std::vector<int64_t> * runIds;
  const ReportFilter* reportFilter;
  const CompareData* cmpData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getDetectionStatusCounts_result__isset {
  _codeCheckerDBAccess_getDetectionStatusCounts_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getDetectionStatusCounts_result__isset;

class codeCheckerDBAccess_getDetectionStatusCounts_result {
 public:

  codeCheckerDBAccess_getDetectionStatusCounts_result(const codeCheckerDBAccess_getDetectionStatusCounts_result&);
  codeCheckerDBAccess_getDetectionStatusCounts_result& operator=(const codeCheckerDBAccess_getDetectionStatusCounts_result&);
  codeCheckerDBAccess_getDetectionStatusCounts_result() {
  }

  virtual ~codeCheckerDBAccess_getDetectionStatusCounts_result() throw();
  std::map<DetectionStatus::type, int64_t>  success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getDetectionStatusCounts_result__isset __isset;

  void __set_success(const std::map<DetectionStatus::type, int64_t> & val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_getDetectionStatusCounts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getDetectionStatusCounts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getDetectionStatusCounts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getDetectionStatusCounts_presult__isset {
  _codeCheckerDBAccess_getDetectionStatusCounts_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getDetectionStatusCounts_presult__isset;

class codeCheckerDBAccess_getDetectionStatusCounts_presult {
 public:


  virtual ~codeCheckerDBAccess_getDetectionStatusCounts_presult() throw();
  std::map<DetectionStatus::type, int64_t> * success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getDetectionStatusCounts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_getFileCounts_args__isset {
  _codeCheckerDBAccess_getFileCounts_args__isset() : runIds(false), reportFilter(false), cmpData(false), limit(false), offset(false) {}
  bool runIds :1;
  bool reportFilter :1;
  bool cmpData :1;
  bool limit :1;
  bool offset :1;
} _codeCheckerDBAccess_getFileCounts_args__isset;

class codeCheckerDBAccess_getFileCounts_args {
 public:

  codeCheckerDBAccess_getFileCounts_args(const codeCheckerDBAccess_getFileCounts_args&);
  codeCheckerDBAccess_getFileCounts_args& operator=(const codeCheckerDBAccess_getFileCounts_args&);
  codeCheckerDBAccess_getFileCounts_args() : limit(0), offset(0) {
  }

  virtual ~codeCheckerDBAccess_getFileCounts_args() throw();
  std::vector<int64_t>  runIds;
  ReportFilter reportFilter;
  CompareData cmpData;
  int64_t limit;
  int64_t offset;

  _codeCheckerDBAccess_getFileCounts_args__isset __isset;

  void __set_runIds(const std::vector<int64_t> & val);

  void __set_reportFilter(const ReportFilter& val);

  void __set_cmpData(const CompareData& val);

  void __set_limit(const int64_t val);

  void __set_offset(const int64_t val);

  bool operator == (const codeCheckerDBAccess_getFileCounts_args & rhs) const
  {
    if (!(runIds == rhs.runIds))
      return false;
    if (!(reportFilter == rhs.reportFilter))
      return false;
    if (!(cmpData == rhs.cmpData))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getFileCounts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getFileCounts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_getFileCounts_pargs {
 public:


  virtual ~codeCheckerDBAccess_getFileCounts_pargs() throw();
  const std::vector<int64_t> * runIds;
  const ReportFilter* reportFilter;
  const CompareData* cmpData;
  const int64_t* limit;
  const int64_t* offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getFileCounts_result__isset {
  _codeCheckerDBAccess_getFileCounts_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getFileCounts_result__isset;

class codeCheckerDBAccess_getFileCounts_result {
 public:

  codeCheckerDBAccess_getFileCounts_result(const codeCheckerDBAccess_getFileCounts_result&);
  codeCheckerDBAccess_getFileCounts_result& operator=(const codeCheckerDBAccess_getFileCounts_result&);
  codeCheckerDBAccess_getFileCounts_result() {
  }

  virtual ~codeCheckerDBAccess_getFileCounts_result() throw();
  std::map<std::string, int64_t>  success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getFileCounts_result__isset __isset;

  void __set_success(const std::map<std::string, int64_t> & val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_getFileCounts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getFileCounts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getFileCounts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getFileCounts_presult__isset {
  _codeCheckerDBAccess_getFileCounts_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getFileCounts_presult__isset;

class codeCheckerDBAccess_getFileCounts_presult {
 public:


  virtual ~codeCheckerDBAccess_getFileCounts_presult() throw();
  std::map<std::string, int64_t> * success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getFileCounts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_getCheckerCounts_args__isset {
  _codeCheckerDBAccess_getCheckerCounts_args__isset() : runIds(false), reportFilter(false), cmpData(false), limit(false), offset(false) {}
  bool runIds :1;
  bool reportFilter :1;
  bool cmpData :1;
  bool limit :1;
  bool offset :1;
} _codeCheckerDBAccess_getCheckerCounts_args__isset;

class codeCheckerDBAccess_getCheckerCounts_args {
 public:

  codeCheckerDBAccess_getCheckerCounts_args(const codeCheckerDBAccess_getCheckerCounts_args&);
  codeCheckerDBAccess_getCheckerCounts_args& operator=(const codeCheckerDBAccess_getCheckerCounts_args&);
  codeCheckerDBAccess_getCheckerCounts_args() : limit(0), offset(0) {
  }

  virtual ~codeCheckerDBAccess_getCheckerCounts_args() throw();
  std::vector<int64_t>  runIds;
  ReportFilter reportFilter;
  CompareData cmpData;
  int64_t limit;
  int64_t offset;

  _codeCheckerDBAccess_getCheckerCounts_args__isset __isset;

  void __set_runIds(const std::vector<int64_t> & val);

  void __set_reportFilter(const ReportFilter& val);

  void __set_cmpData(const CompareData& val);

  void __set_limit(const int64_t val);

  void __set_offset(const int64_t val);

  bool operator == (const codeCheckerDBAccess_getCheckerCounts_args & rhs) const
  {
    if (!(runIds == rhs.runIds))
      return false;
    if (!(reportFilter == rhs.reportFilter))
      return false;
    if (!(cmpData == rhs.cmpData))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getCheckerCounts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getCheckerCounts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_getCheckerCounts_pargs {
 public:


  virtual ~codeCheckerDBAccess_getCheckerCounts_pargs() throw();
  const std::vector<int64_t> * runIds;
  const ReportFilter* reportFilter;
  const CompareData* cmpData;
  const int64_t* limit;
  const int64_t* offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getCheckerCounts_result__isset {
  _codeCheckerDBAccess_getCheckerCounts_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getCheckerCounts_result__isset;

class codeCheckerDBAccess_getCheckerCounts_result {
 public:

  codeCheckerDBAccess_getCheckerCounts_result(const codeCheckerDBAccess_getCheckerCounts_result&);
  codeCheckerDBAccess_getCheckerCounts_result& operator=(const codeCheckerDBAccess_getCheckerCounts_result&);
  codeCheckerDBAccess_getCheckerCounts_result() {
  }

  virtual ~codeCheckerDBAccess_getCheckerCounts_result() throw();
  CheckerCounts success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getCheckerCounts_result__isset __isset;

  void __set_success(const CheckerCounts& val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_getCheckerCounts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getCheckerCounts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getCheckerCounts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getCheckerCounts_presult__isset {
  _codeCheckerDBAccess_getCheckerCounts_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getCheckerCounts_presult__isset;

class codeCheckerDBAccess_getCheckerCounts_presult {
 public:


  virtual ~codeCheckerDBAccess_getCheckerCounts_presult() throw();
  CheckerCounts* success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getCheckerCounts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_getRunHistoryTagCounts_args__isset {
  _codeCheckerDBAccess_getRunHistoryTagCounts_args__isset() : runIds(false), reportFilter(false), cmpData(false) {}
  bool runIds :1;
  bool reportFilter :1;
  bool cmpData :1;
} _codeCheckerDBAccess_getRunHistoryTagCounts_args__isset;

class codeCheckerDBAccess_getRunHistoryTagCounts_args {
 public:

  codeCheckerDBAccess_getRunHistoryTagCounts_args(const codeCheckerDBAccess_getRunHistoryTagCounts_args&);
  codeCheckerDBAccess_getRunHistoryTagCounts_args& operator=(const codeCheckerDBAccess_getRunHistoryTagCounts_args&);
  codeCheckerDBAccess_getRunHistoryTagCounts_args() {
  }

  virtual ~codeCheckerDBAccess_getRunHistoryTagCounts_args() throw();
  std::vector<int64_t>  runIds;
  ReportFilter reportFilter;
  CompareData cmpData;

  _codeCheckerDBAccess_getRunHistoryTagCounts_args__isset __isset;

  void __set_runIds(const std::vector<int64_t> & val);

  void __set_reportFilter(const ReportFilter& val);

  void __set_cmpData(const CompareData& val);

  bool operator == (const codeCheckerDBAccess_getRunHistoryTagCounts_args & rhs) const
  {
    if (!(runIds == rhs.runIds))
      return false;
    if (!(reportFilter == rhs.reportFilter))
      return false;
    if (!(cmpData == rhs.cmpData))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getRunHistoryTagCounts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getRunHistoryTagCounts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_getRunHistoryTagCounts_pargs {
 public:


  virtual ~codeCheckerDBAccess_getRunHistoryTagCounts_pargs() throw();
  const std::vector<int64_t> * runIds;
  const ReportFilter* reportFilter;
  const CompareData* cmpData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getRunHistoryTagCounts_result__isset {
  _codeCheckerDBAccess_getRunHistoryTagCounts_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getRunHistoryTagCounts_result__isset;

class codeCheckerDBAccess_getRunHistoryTagCounts_result {
 public:

  codeCheckerDBAccess_getRunHistoryTagCounts_result(const codeCheckerDBAccess_getRunHistoryTagCounts_result&);
  codeCheckerDBAccess_getRunHistoryTagCounts_result& operator=(const codeCheckerDBAccess_getRunHistoryTagCounts_result&);
  codeCheckerDBAccess_getRunHistoryTagCounts_result() {
  }

  virtual ~codeCheckerDBAccess_getRunHistoryTagCounts_result() throw();
  RunTagCounts success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getRunHistoryTagCounts_result__isset __isset;

  void __set_success(const RunTagCounts& val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_getRunHistoryTagCounts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getRunHistoryTagCounts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getRunHistoryTagCounts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getRunHistoryTagCounts_presult__isset {
  _codeCheckerDBAccess_getRunHistoryTagCounts_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getRunHistoryTagCounts_presult__isset;

class codeCheckerDBAccess_getRunHistoryTagCounts_presult {
 public:


  virtual ~codeCheckerDBAccess_getRunHistoryTagCounts_presult() throw();
  RunTagCounts* success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getRunHistoryTagCounts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_addSourceComponent_args__isset {
  _codeCheckerDBAccess_addSourceComponent_args__isset() : name(false), value(false), description(false) {}
  bool name :1;
  bool value :1;
  bool description :1;
} _codeCheckerDBAccess_addSourceComponent_args__isset;

class codeCheckerDBAccess_addSourceComponent_args {
 public:

  codeCheckerDBAccess_addSourceComponent_args(const codeCheckerDBAccess_addSourceComponent_args&);
  codeCheckerDBAccess_addSourceComponent_args& operator=(const codeCheckerDBAccess_addSourceComponent_args&);
  codeCheckerDBAccess_addSourceComponent_args() : name(), value(), description() {
  }

  virtual ~codeCheckerDBAccess_addSourceComponent_args() throw();
  std::string name;
  std::string value;
  std::string description;

  _codeCheckerDBAccess_addSourceComponent_args__isset __isset;

  void __set_name(const std::string& val);

  void __set_value(const std::string& val);

  void __set_description(const std::string& val);

  bool operator == (const codeCheckerDBAccess_addSourceComponent_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_addSourceComponent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_addSourceComponent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_addSourceComponent_pargs {
 public:


  virtual ~codeCheckerDBAccess_addSourceComponent_pargs() throw();
  const std::string* name;
  const std::string* value;
  const std::string* description;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_addSourceComponent_result__isset {
  _codeCheckerDBAccess_addSourceComponent_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_addSourceComponent_result__isset;

class codeCheckerDBAccess_addSourceComponent_result {
 public:

  codeCheckerDBAccess_addSourceComponent_result(const codeCheckerDBAccess_addSourceComponent_result&);
  codeCheckerDBAccess_addSourceComponent_result& operator=(const codeCheckerDBAccess_addSourceComponent_result&);
  codeCheckerDBAccess_addSourceComponent_result() : success(0) {
  }

  virtual ~codeCheckerDBAccess_addSourceComponent_result() throw();
  bool success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_addSourceComponent_result__isset __isset;

  void __set_success(const bool val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_addSourceComponent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_addSourceComponent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_addSourceComponent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_addSourceComponent_presult__isset {
  _codeCheckerDBAccess_addSourceComponent_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_addSourceComponent_presult__isset;

class codeCheckerDBAccess_addSourceComponent_presult {
 public:


  virtual ~codeCheckerDBAccess_addSourceComponent_presult() throw();
  bool* success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_addSourceComponent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_getSourceComponents_args__isset {
  _codeCheckerDBAccess_getSourceComponents_args__isset() : sourceComponentFilter(false) {}
  bool sourceComponentFilter :1;
} _codeCheckerDBAccess_getSourceComponents_args__isset;

class codeCheckerDBAccess_getSourceComponents_args {
 public:

  codeCheckerDBAccess_getSourceComponents_args(const codeCheckerDBAccess_getSourceComponents_args&);
  codeCheckerDBAccess_getSourceComponents_args& operator=(const codeCheckerDBAccess_getSourceComponents_args&);
  codeCheckerDBAccess_getSourceComponents_args() {
  }

  virtual ~codeCheckerDBAccess_getSourceComponents_args() throw();
  std::vector<std::string>  sourceComponentFilter;

  _codeCheckerDBAccess_getSourceComponents_args__isset __isset;

  void __set_sourceComponentFilter(const std::vector<std::string> & val);

  bool operator == (const codeCheckerDBAccess_getSourceComponents_args & rhs) const
  {
    if (!(sourceComponentFilter == rhs.sourceComponentFilter))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getSourceComponents_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getSourceComponents_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_getSourceComponents_pargs {
 public:


  virtual ~codeCheckerDBAccess_getSourceComponents_pargs() throw();
  const std::vector<std::string> * sourceComponentFilter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getSourceComponents_result__isset {
  _codeCheckerDBAccess_getSourceComponents_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getSourceComponents_result__isset;

class codeCheckerDBAccess_getSourceComponents_result {
 public:

  codeCheckerDBAccess_getSourceComponents_result(const codeCheckerDBAccess_getSourceComponents_result&);
  codeCheckerDBAccess_getSourceComponents_result& operator=(const codeCheckerDBAccess_getSourceComponents_result&);
  codeCheckerDBAccess_getSourceComponents_result() {
  }

  virtual ~codeCheckerDBAccess_getSourceComponents_result() throw();
  SourceComponentDataList success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getSourceComponents_result__isset __isset;

  void __set_success(const SourceComponentDataList& val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_getSourceComponents_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getSourceComponents_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getSourceComponents_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getSourceComponents_presult__isset {
  _codeCheckerDBAccess_getSourceComponents_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getSourceComponents_presult__isset;

class codeCheckerDBAccess_getSourceComponents_presult {
 public:


  virtual ~codeCheckerDBAccess_getSourceComponents_presult() throw();
  SourceComponentDataList* success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getSourceComponents_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_removeSourceComponent_args__isset {
  _codeCheckerDBAccess_removeSourceComponent_args__isset() : name(false) {}
  bool name :1;
} _codeCheckerDBAccess_removeSourceComponent_args__isset;

class codeCheckerDBAccess_removeSourceComponent_args {
 public:

  codeCheckerDBAccess_removeSourceComponent_args(const codeCheckerDBAccess_removeSourceComponent_args&);
  codeCheckerDBAccess_removeSourceComponent_args& operator=(const codeCheckerDBAccess_removeSourceComponent_args&);
  codeCheckerDBAccess_removeSourceComponent_args() : name() {
  }

  virtual ~codeCheckerDBAccess_removeSourceComponent_args() throw();
  std::string name;

  _codeCheckerDBAccess_removeSourceComponent_args__isset __isset;

  void __set_name(const std::string& val);

  bool operator == (const codeCheckerDBAccess_removeSourceComponent_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_removeSourceComponent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_removeSourceComponent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_removeSourceComponent_pargs {
 public:


  virtual ~codeCheckerDBAccess_removeSourceComponent_pargs() throw();
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_removeSourceComponent_result__isset {
  _codeCheckerDBAccess_removeSourceComponent_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_removeSourceComponent_result__isset;

class codeCheckerDBAccess_removeSourceComponent_result {
 public:

  codeCheckerDBAccess_removeSourceComponent_result(const codeCheckerDBAccess_removeSourceComponent_result&);
  codeCheckerDBAccess_removeSourceComponent_result& operator=(const codeCheckerDBAccess_removeSourceComponent_result&);
  codeCheckerDBAccess_removeSourceComponent_result() : success(0) {
  }

  virtual ~codeCheckerDBAccess_removeSourceComponent_result() throw();
  bool success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_removeSourceComponent_result__isset __isset;

  void __set_success(const bool val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_removeSourceComponent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_removeSourceComponent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_removeSourceComponent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_removeSourceComponent_presult__isset {
  _codeCheckerDBAccess_removeSourceComponent_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_removeSourceComponent_presult__isset;

class codeCheckerDBAccess_removeSourceComponent_presult {
 public:


  virtual ~codeCheckerDBAccess_removeSourceComponent_presult() throw();
  bool* success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_removeSourceComponent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_getMissingContentHashes_args__isset {
  _codeCheckerDBAccess_getMissingContentHashes_args__isset() : fileHashes(false) {}
  bool fileHashes :1;
} _codeCheckerDBAccess_getMissingContentHashes_args__isset;

class codeCheckerDBAccess_getMissingContentHashes_args {
 public:

  codeCheckerDBAccess_getMissingContentHashes_args(const codeCheckerDBAccess_getMissingContentHashes_args&);
  codeCheckerDBAccess_getMissingContentHashes_args& operator=(const codeCheckerDBAccess_getMissingContentHashes_args&);
  codeCheckerDBAccess_getMissingContentHashes_args() {
  }

  virtual ~codeCheckerDBAccess_getMissingContentHashes_args() throw();
  std::vector<std::string>  fileHashes;

  _codeCheckerDBAccess_getMissingContentHashes_args__isset __isset;

  void __set_fileHashes(const std::vector<std::string> & val);

  bool operator == (const codeCheckerDBAccess_getMissingContentHashes_args & rhs) const
  {
    if (!(fileHashes == rhs.fileHashes))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getMissingContentHashes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getMissingContentHashes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_getMissingContentHashes_pargs {
 public:


  virtual ~codeCheckerDBAccess_getMissingContentHashes_pargs() throw();
  const std::vector<std::string> * fileHashes;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getMissingContentHashes_result__isset {
  _codeCheckerDBAccess_getMissingContentHashes_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getMissingContentHashes_result__isset;

class codeCheckerDBAccess_getMissingContentHashes_result {
 public:

  codeCheckerDBAccess_getMissingContentHashes_result(const codeCheckerDBAccess_getMissingContentHashes_result&);
  codeCheckerDBAccess_getMissingContentHashes_result& operator=(const codeCheckerDBAccess_getMissingContentHashes_result&);
  codeCheckerDBAccess_getMissingContentHashes_result() {
  }

  virtual ~codeCheckerDBAccess_getMissingContentHashes_result() throw();
  std::vector<std::string>  success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getMissingContentHashes_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_getMissingContentHashes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getMissingContentHashes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getMissingContentHashes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getMissingContentHashes_presult__isset {
  _codeCheckerDBAccess_getMissingContentHashes_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getMissingContentHashes_presult__isset;

class codeCheckerDBAccess_getMissingContentHashes_presult {
 public:


  virtual ~codeCheckerDBAccess_getMissingContentHashes_presult() throw();
  std::vector<std::string> * success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getMissingContentHashes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_massStoreRun_args__isset {
  _codeCheckerDBAccess_massStoreRun_args__isset() : runName(false), tag(false), version(false), zipfile(false), force(false), trimPathPrefixes(false) {}
  bool runName :1;
  bool tag :1;
  bool version :1;
  bool zipfile :1;
  bool force :1;
  bool trimPathPrefixes :1;
} _codeCheckerDBAccess_massStoreRun_args__isset;

class codeCheckerDBAccess_massStoreRun_args {
 public:

  codeCheckerDBAccess_massStoreRun_args(const codeCheckerDBAccess_massStoreRun_args&);
  codeCheckerDBAccess_massStoreRun_args& operator=(const codeCheckerDBAccess_massStoreRun_args&);
  codeCheckerDBAccess_massStoreRun_args() : runName(), tag(), version(), zipfile(), force(0) {
  }

  virtual ~codeCheckerDBAccess_massStoreRun_args() throw();
  std::string runName;
  std::string tag;
  std::string version;
  std::string zipfile;
  bool force;
  std::vector<std::string>  trimPathPrefixes;

  _codeCheckerDBAccess_massStoreRun_args__isset __isset;

  void __set_runName(const std::string& val);

  void __set_tag(const std::string& val);

  void __set_version(const std::string& val);

  void __set_zipfile(const std::string& val);

  void __set_force(const bool val);

  void __set_trimPathPrefixes(const std::vector<std::string> & val);

  bool operator == (const codeCheckerDBAccess_massStoreRun_args & rhs) const
  {
    if (!(runName == rhs.runName))
      return false;
    if (!(tag == rhs.tag))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(zipfile == rhs.zipfile))
      return false;
    if (!(force == rhs.force))
      return false;
    if (!(trimPathPrefixes == rhs.trimPathPrefixes))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_massStoreRun_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_massStoreRun_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_massStoreRun_pargs {
 public:


  virtual ~codeCheckerDBAccess_massStoreRun_pargs() throw();
  const std::string* runName;
  const std::string* tag;
  const std::string* version;
  const std::string* zipfile;
  const bool* force;
  const std::vector<std::string> * trimPathPrefixes;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_massStoreRun_result__isset {
  _codeCheckerDBAccess_massStoreRun_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_massStoreRun_result__isset;

class codeCheckerDBAccess_massStoreRun_result {
 public:

  codeCheckerDBAccess_massStoreRun_result(const codeCheckerDBAccess_massStoreRun_result&);
  codeCheckerDBAccess_massStoreRun_result& operator=(const codeCheckerDBAccess_massStoreRun_result&);
  codeCheckerDBAccess_massStoreRun_result() : success(0) {
  }

  virtual ~codeCheckerDBAccess_massStoreRun_result() throw();
  int64_t success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_massStoreRun_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_massStoreRun_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_massStoreRun_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_massStoreRun_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_massStoreRun_presult__isset {
  _codeCheckerDBAccess_massStoreRun_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_massStoreRun_presult__isset;

class codeCheckerDBAccess_massStoreRun_presult {
 public:


  virtual ~codeCheckerDBAccess_massStoreRun_presult() throw();
  int64_t* success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_massStoreRun_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class codeCheckerDBAccess_allowsStoringAnalysisStatistics_args {
 public:

  codeCheckerDBAccess_allowsStoringAnalysisStatistics_args(const codeCheckerDBAccess_allowsStoringAnalysisStatistics_args&);
  codeCheckerDBAccess_allowsStoringAnalysisStatistics_args& operator=(const codeCheckerDBAccess_allowsStoringAnalysisStatistics_args&);
  codeCheckerDBAccess_allowsStoringAnalysisStatistics_args() {
  }

  virtual ~codeCheckerDBAccess_allowsStoringAnalysisStatistics_args() throw();

  bool operator == (const codeCheckerDBAccess_allowsStoringAnalysisStatistics_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const codeCheckerDBAccess_allowsStoringAnalysisStatistics_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_allowsStoringAnalysisStatistics_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_allowsStoringAnalysisStatistics_pargs {
 public:


  virtual ~codeCheckerDBAccess_allowsStoringAnalysisStatistics_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_allowsStoringAnalysisStatistics_result__isset {
  _codeCheckerDBAccess_allowsStoringAnalysisStatistics_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_allowsStoringAnalysisStatistics_result__isset;

class codeCheckerDBAccess_allowsStoringAnalysisStatistics_result {
 public:

  codeCheckerDBAccess_allowsStoringAnalysisStatistics_result(const codeCheckerDBAccess_allowsStoringAnalysisStatistics_result&);
  codeCheckerDBAccess_allowsStoringAnalysisStatistics_result& operator=(const codeCheckerDBAccess_allowsStoringAnalysisStatistics_result&);
  codeCheckerDBAccess_allowsStoringAnalysisStatistics_result() : success(0) {
  }

  virtual ~codeCheckerDBAccess_allowsStoringAnalysisStatistics_result() throw();
  bool success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_allowsStoringAnalysisStatistics_result__isset __isset;

  void __set_success(const bool val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_allowsStoringAnalysisStatistics_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_allowsStoringAnalysisStatistics_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_allowsStoringAnalysisStatistics_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_allowsStoringAnalysisStatistics_presult__isset {
  _codeCheckerDBAccess_allowsStoringAnalysisStatistics_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_allowsStoringAnalysisStatistics_presult__isset;

class codeCheckerDBAccess_allowsStoringAnalysisStatistics_presult {
 public:


  virtual ~codeCheckerDBAccess_allowsStoringAnalysisStatistics_presult() throw();
  bool* success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_allowsStoringAnalysisStatistics_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class codeCheckerDBAccess_getAnalysisStatisticsLimits_args {
 public:

  codeCheckerDBAccess_getAnalysisStatisticsLimits_args(const codeCheckerDBAccess_getAnalysisStatisticsLimits_args&);
  codeCheckerDBAccess_getAnalysisStatisticsLimits_args& operator=(const codeCheckerDBAccess_getAnalysisStatisticsLimits_args&);
  codeCheckerDBAccess_getAnalysisStatisticsLimits_args() {
  }

  virtual ~codeCheckerDBAccess_getAnalysisStatisticsLimits_args() throw();

  bool operator == (const codeCheckerDBAccess_getAnalysisStatisticsLimits_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getAnalysisStatisticsLimits_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getAnalysisStatisticsLimits_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_getAnalysisStatisticsLimits_pargs {
 public:


  virtual ~codeCheckerDBAccess_getAnalysisStatisticsLimits_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getAnalysisStatisticsLimits_result__isset {
  _codeCheckerDBAccess_getAnalysisStatisticsLimits_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getAnalysisStatisticsLimits_result__isset;

class codeCheckerDBAccess_getAnalysisStatisticsLimits_result {
 public:

  codeCheckerDBAccess_getAnalysisStatisticsLimits_result(const codeCheckerDBAccess_getAnalysisStatisticsLimits_result&);
  codeCheckerDBAccess_getAnalysisStatisticsLimits_result& operator=(const codeCheckerDBAccess_getAnalysisStatisticsLimits_result&);
  codeCheckerDBAccess_getAnalysisStatisticsLimits_result() {
  }

  virtual ~codeCheckerDBAccess_getAnalysisStatisticsLimits_result() throw();
  std::map<StoreLimitKind::type, int64_t>  success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getAnalysisStatisticsLimits_result__isset __isset;

  void __set_success(const std::map<StoreLimitKind::type, int64_t> & val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_getAnalysisStatisticsLimits_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getAnalysisStatisticsLimits_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getAnalysisStatisticsLimits_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getAnalysisStatisticsLimits_presult__isset {
  _codeCheckerDBAccess_getAnalysisStatisticsLimits_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getAnalysisStatisticsLimits_presult__isset;

class codeCheckerDBAccess_getAnalysisStatisticsLimits_presult {
 public:


  virtual ~codeCheckerDBAccess_getAnalysisStatisticsLimits_presult() throw();
  std::map<StoreLimitKind::type, int64_t> * success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getAnalysisStatisticsLimits_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_storeAnalysisStatistics_args__isset {
  _codeCheckerDBAccess_storeAnalysisStatistics_args__isset() : runName(false), zipfile(false) {}
  bool runName :1;
  bool zipfile :1;
} _codeCheckerDBAccess_storeAnalysisStatistics_args__isset;

class codeCheckerDBAccess_storeAnalysisStatistics_args {
 public:

  codeCheckerDBAccess_storeAnalysisStatistics_args(const codeCheckerDBAccess_storeAnalysisStatistics_args&);
  codeCheckerDBAccess_storeAnalysisStatistics_args& operator=(const codeCheckerDBAccess_storeAnalysisStatistics_args&);
  codeCheckerDBAccess_storeAnalysisStatistics_args() : runName(), zipfile() {
  }

  virtual ~codeCheckerDBAccess_storeAnalysisStatistics_args() throw();
  std::string runName;
  std::string zipfile;

  _codeCheckerDBAccess_storeAnalysisStatistics_args__isset __isset;

  void __set_runName(const std::string& val);

  void __set_zipfile(const std::string& val);

  bool operator == (const codeCheckerDBAccess_storeAnalysisStatistics_args & rhs) const
  {
    if (!(runName == rhs.runName))
      return false;
    if (!(zipfile == rhs.zipfile))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_storeAnalysisStatistics_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_storeAnalysisStatistics_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_storeAnalysisStatistics_pargs {
 public:


  virtual ~codeCheckerDBAccess_storeAnalysisStatistics_pargs() throw();
  const std::string* runName;
  const std::string* zipfile;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_storeAnalysisStatistics_result__isset {
  _codeCheckerDBAccess_storeAnalysisStatistics_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_storeAnalysisStatistics_result__isset;

class codeCheckerDBAccess_storeAnalysisStatistics_result {
 public:

  codeCheckerDBAccess_storeAnalysisStatistics_result(const codeCheckerDBAccess_storeAnalysisStatistics_result&);
  codeCheckerDBAccess_storeAnalysisStatistics_result& operator=(const codeCheckerDBAccess_storeAnalysisStatistics_result&);
  codeCheckerDBAccess_storeAnalysisStatistics_result() : success(0) {
  }

  virtual ~codeCheckerDBAccess_storeAnalysisStatistics_result() throw();
  bool success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_storeAnalysisStatistics_result__isset __isset;

  void __set_success(const bool val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_storeAnalysisStatistics_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_storeAnalysisStatistics_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_storeAnalysisStatistics_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_storeAnalysisStatistics_presult__isset {
  _codeCheckerDBAccess_storeAnalysisStatistics_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_storeAnalysisStatistics_presult__isset;

class codeCheckerDBAccess_storeAnalysisStatistics_presult {
 public:


  virtual ~codeCheckerDBAccess_storeAnalysisStatistics_presult() throw();
  bool* success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_storeAnalysisStatistics_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _codeCheckerDBAccess_getAnalysisStatistics_args__isset {
  _codeCheckerDBAccess_getAnalysisStatistics_args__isset() : runId(false), runHistoryId(false) {}
  bool runId :1;
  bool runHistoryId :1;
} _codeCheckerDBAccess_getAnalysisStatistics_args__isset;

class codeCheckerDBAccess_getAnalysisStatistics_args {
 public:

  codeCheckerDBAccess_getAnalysisStatistics_args(const codeCheckerDBAccess_getAnalysisStatistics_args&);
  codeCheckerDBAccess_getAnalysisStatistics_args& operator=(const codeCheckerDBAccess_getAnalysisStatistics_args&);
  codeCheckerDBAccess_getAnalysisStatistics_args() : runId(0), runHistoryId(0) {
  }

  virtual ~codeCheckerDBAccess_getAnalysisStatistics_args() throw();
  int64_t runId;
  int64_t runHistoryId;

  _codeCheckerDBAccess_getAnalysisStatistics_args__isset __isset;

  void __set_runId(const int64_t val);

  void __set_runHistoryId(const int64_t val);

  bool operator == (const codeCheckerDBAccess_getAnalysisStatistics_args & rhs) const
  {
    if (!(runId == rhs.runId))
      return false;
    if (!(runHistoryId == rhs.runHistoryId))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getAnalysisStatistics_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getAnalysisStatistics_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class codeCheckerDBAccess_getAnalysisStatistics_pargs {
 public:


  virtual ~codeCheckerDBAccess_getAnalysisStatistics_pargs() throw();
  const int64_t* runId;
  const int64_t* runHistoryId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getAnalysisStatistics_result__isset {
  _codeCheckerDBAccess_getAnalysisStatistics_result__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getAnalysisStatistics_result__isset;

class codeCheckerDBAccess_getAnalysisStatistics_result {
 public:

  codeCheckerDBAccess_getAnalysisStatistics_result(const codeCheckerDBAccess_getAnalysisStatistics_result&);
  codeCheckerDBAccess_getAnalysisStatistics_result& operator=(const codeCheckerDBAccess_getAnalysisStatistics_result&);
  codeCheckerDBAccess_getAnalysisStatistics_result() {
  }

  virtual ~codeCheckerDBAccess_getAnalysisStatistics_result() throw();
  AnalyzerStatisticsData success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getAnalysisStatistics_result__isset __isset;

  void __set_success(const AnalyzerStatisticsData& val);

  void __set_requestError(const  ::RequestFailed& val);

  bool operator == (const codeCheckerDBAccess_getAnalysisStatistics_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(requestError == rhs.requestError))
      return false;
    return true;
  }
  bool operator != (const codeCheckerDBAccess_getAnalysisStatistics_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const codeCheckerDBAccess_getAnalysisStatistics_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _codeCheckerDBAccess_getAnalysisStatistics_presult__isset {
  _codeCheckerDBAccess_getAnalysisStatistics_presult__isset() : success(false), requestError(false) {}
  bool success :1;
  bool requestError :1;
} _codeCheckerDBAccess_getAnalysisStatistics_presult__isset;

class codeCheckerDBAccess_getAnalysisStatistics_presult {
 public:


  virtual ~codeCheckerDBAccess_getAnalysisStatistics_presult() throw();
  AnalyzerStatisticsData* success;
   ::RequestFailed requestError;

  _codeCheckerDBAccess_getAnalysisStatistics_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class codeCheckerDBAccessClient : virtual public codeCheckerDBAccessIf {
 public:
  codeCheckerDBAccessClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  codeCheckerDBAccessClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getRunData(RunDataList& _return, const RunFilter& runFilter, const int64_t limit, const int64_t offset);
  void send_getRunData(const RunFilter& runFilter, const int64_t limit, const int64_t offset);
  void recv_getRunData(RunDataList& _return);
  int64_t getRunCount(const RunFilter& runFilter);
  void send_getRunCount(const RunFilter& runFilter);
  int64_t recv_getRunCount();
  void getCheckCommand(std::string& _return, const int64_t runHistoryId, const int64_t runId);
  void send_getCheckCommand(const int64_t runHistoryId, const int64_t runId);
  void recv_getCheckCommand(std::string& _return);
  void getRunHistory(RunHistoryDataList& _return, const std::vector<int64_t> & runIds, const int64_t limit, const int64_t offset, const RunHistoryFilter& runHistoryFilter);
  void send_getRunHistory(const std::vector<int64_t> & runIds, const int64_t limit, const int64_t offset, const RunHistoryFilter& runHistoryFilter);
  void recv_getRunHistory(RunHistoryDataList& _return);
  int64_t getRunHistoryCount(const std::vector<int64_t> & runIds, const RunHistoryFilter& runHistoryFilter);
  void send_getRunHistoryCount(const std::vector<int64_t> & runIds, const RunHistoryFilter& runHistoryFilter);
  int64_t recv_getRunHistoryCount();
  void getDiffResultsHash(std::vector<std::string> & _return, const std::vector<int64_t> & runIds, const std::vector<std::string> & reportHashes, const DiffType::type diffType, const std::vector<DetectionStatus::type> & skipDetectionStatuses);
  void send_getDiffResultsHash(const std::vector<int64_t> & runIds, const std::vector<std::string> & reportHashes, const DiffType::type diffType, const std::vector<DetectionStatus::type> & skipDetectionStatuses);
  void recv_getDiffResultsHash(std::vector<std::string> & _return);
  void getReport(ReportData& _return, const int64_t reportId);
  void send_getReport(const int64_t reportId);
  void recv_getReport(ReportData& _return);
  void getRunResults(ReportDataList& _return, const std::vector<int64_t> & runIds, const int64_t limit, const int64_t offset, const std::vector<SortMode> & sortType, const ReportFilter& reportFilter, const CompareData& cmpData, const bool getDetails);
  void send_getRunResults(const std::vector<int64_t> & runIds, const int64_t limit, const int64_t offset, const std::vector<SortMode> & sortType, const ReportFilter& reportFilter, const CompareData& cmpData, const bool getDetails);
  void recv_getRunResults(ReportDataList& _return);
  void getRunReportCounts(RunReportCounts& _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const int64_t limit, const int64_t offset);
  void send_getRunReportCounts(const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const int64_t limit, const int64_t offset);
  void recv_getRunReportCounts(RunReportCounts& _return);
  int64_t getRunResultCount(const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData);
  void send_getRunResultCount(const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData);
  int64_t recv_getRunResultCount();
  void getReportDetails(ReportDetails& _return, const int64_t reportId);
  void send_getReportDetails(const int64_t reportId);
  void recv_getReportDetails(ReportDetails& _return);
  void getSourceFileData(SourceFileData& _return, const int64_t fileId, const bool fileContent, const Encoding::type encoding);
  void send_getSourceFileData(const int64_t fileId, const bool fileContent, const Encoding::type encoding);
  void recv_getSourceFileData(SourceFileData& _return);
  void getLinesInSourceFileContents(std::map<int64_t, std::map<int64_t, std::string> > & _return, const LinesInFilesRequestedList& linesInFilesRequested, const Encoding::type encoding);
  void send_getLinesInSourceFileContents(const LinesInFilesRequestedList& linesInFilesRequested, const Encoding::type encoding);
  void recv_getLinesInSourceFileContents(std::map<int64_t, std::map<int64_t, std::string> > & _return);
  bool isReviewStatusChangeDisabled();
  void send_isReviewStatusChangeDisabled();
  bool recv_isReviewStatusChangeDisabled();
  bool changeReviewStatus(const int64_t reportId, const ReviewStatus::type status, const std::string& message);
  void send_changeReviewStatus(const int64_t reportId, const ReviewStatus::type status, const std::string& message);
  bool recv_changeReviewStatus();
  void getComments(CommentDataList& _return, const int64_t reportId);
  void send_getComments(const int64_t reportId);
  void recv_getComments(CommentDataList& _return);
  int64_t getCommentCount(const int64_t reportId);
  void send_getCommentCount(const int64_t reportId);
  int64_t recv_getCommentCount();
  bool addComment(const int64_t reportId, const CommentData& comment);
  void send_addComment(const int64_t reportId, const CommentData& comment);
  bool recv_addComment();
  bool updateComment(const int64_t commentId, const std::string& newMessage);
  void send_updateComment(const int64_t commentId, const std::string& newMessage);
  bool recv_updateComment();
  bool removeComment(const int64_t commentId);
  void send_removeComment(const int64_t commentId);
  bool recv_removeComment();
  void getCheckerDoc(std::string& _return, const std::string& checkerId);
  void send_getCheckerDoc(const std::string& checkerId);
  void recv_getCheckerDoc(std::string& _return);
  void getPackageVersion(std::string& _return);
  void send_getPackageVersion();
  void recv_getPackageVersion(std::string& _return);
  bool removeRunResults(const std::vector<int64_t> & runIds);
  void send_removeRunResults(const std::vector<int64_t> & runIds);
  bool recv_removeRunResults();
  bool removeRunReports(const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData);
  void send_removeRunReports(const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData);
  bool recv_removeRunReports();
  bool removeRun(const int64_t runId);
  void send_removeRun(const int64_t runId);
  bool recv_removeRun();
  void getSuppressFile(std::string& _return);
  void send_getSuppressFile();
  void recv_getSuppressFile(std::string& _return);
  void getSeverityCounts(std::map<Severity::type, int64_t> & _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData);
  void send_getSeverityCounts(const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData);
  void recv_getSeverityCounts(std::map<Severity::type, int64_t> & _return);
  void getCheckerMsgCounts(std::map<std::string, int64_t> & _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData, const int64_t limit, const int64_t offset);
  void send_getCheckerMsgCounts(const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData, const int64_t limit, const int64_t offset);
  void recv_getCheckerMsgCounts(std::map<std::string, int64_t> & _return);
  void getReviewStatusCounts(std::map<ReviewStatus::type, int64_t> & _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData);
  void send_getReviewStatusCounts(const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData);
  void recv_getReviewStatusCounts(std::map<ReviewStatus::type, int64_t> & _return);
  void getDetectionStatusCounts(std::map<DetectionStatus::type, int64_t> & _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData);
  void send_getDetectionStatusCounts(const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData);
  void recv_getDetectionStatusCounts(std::map<DetectionStatus::type, int64_t> & _return);
  void getFileCounts(std::map<std::string, int64_t> & _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData, const int64_t limit, const int64_t offset);
  void send_getFileCounts(const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData, const int64_t limit, const int64_t offset);
  void recv_getFileCounts(std::map<std::string, int64_t> & _return);
  void getCheckerCounts(CheckerCounts& _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData, const int64_t limit, const int64_t offset);
  void send_getCheckerCounts(const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData, const int64_t limit, const int64_t offset);
  void recv_getCheckerCounts(CheckerCounts& _return);
  void getRunHistoryTagCounts(RunTagCounts& _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData);
  void send_getRunHistoryTagCounts(const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData);
  void recv_getRunHistoryTagCounts(RunTagCounts& _return);
  bool addSourceComponent(const std::string& name, const std::string& value, const std::string& description);
  void send_addSourceComponent(const std::string& name, const std::string& value, const std::string& description);
  bool recv_addSourceComponent();
  void getSourceComponents(SourceComponentDataList& _return, const std::vector<std::string> & sourceComponentFilter);
  void send_getSourceComponents(const std::vector<std::string> & sourceComponentFilter);
  void recv_getSourceComponents(SourceComponentDataList& _return);
  bool removeSourceComponent(const std::string& name);
  void send_removeSourceComponent(const std::string& name);
  bool recv_removeSourceComponent();
  void getMissingContentHashes(std::vector<std::string> & _return, const std::vector<std::string> & fileHashes);
  void send_getMissingContentHashes(const std::vector<std::string> & fileHashes);
  void recv_getMissingContentHashes(std::vector<std::string> & _return);
  int64_t massStoreRun(const std::string& runName, const std::string& tag, const std::string& version, const std::string& zipfile, const bool force, const std::vector<std::string> & trimPathPrefixes);
  void send_massStoreRun(const std::string& runName, const std::string& tag, const std::string& version, const std::string& zipfile, const bool force, const std::vector<std::string> & trimPathPrefixes);
  int64_t recv_massStoreRun();
  bool allowsStoringAnalysisStatistics();
  void send_allowsStoringAnalysisStatistics();
  bool recv_allowsStoringAnalysisStatistics();
  void getAnalysisStatisticsLimits(std::map<StoreLimitKind::type, int64_t> & _return);
  void send_getAnalysisStatisticsLimits();
  void recv_getAnalysisStatisticsLimits(std::map<StoreLimitKind::type, int64_t> & _return);
  bool storeAnalysisStatistics(const std::string& runName, const std::string& zipfile);
  void send_storeAnalysisStatistics(const std::string& runName, const std::string& zipfile);
  bool recv_storeAnalysisStatistics();
  void getAnalysisStatistics(AnalyzerStatisticsData& _return, const int64_t runId, const int64_t runHistoryId);
  void send_getAnalysisStatistics(const int64_t runId, const int64_t runHistoryId);
  void recv_getAnalysisStatistics(AnalyzerStatisticsData& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class codeCheckerDBAccessProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<codeCheckerDBAccessIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (codeCheckerDBAccessProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getRunData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRunCount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCheckCommand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRunHistory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRunHistoryCount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDiffResultsHash(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getReport(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRunResults(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRunReportCounts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRunResultCount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getReportDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSourceFileData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLinesInSourceFileContents(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isReviewStatusChangeDisabled(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_changeReviewStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getComments(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCommentCount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addComment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateComment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeComment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCheckerDoc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPackageVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeRunResults(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeRunReports(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeRun(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSuppressFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSeverityCounts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCheckerMsgCounts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getReviewStatusCounts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDetectionStatusCounts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFileCounts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCheckerCounts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRunHistoryTagCounts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addSourceComponent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSourceComponents(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeSourceComponent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMissingContentHashes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_massStoreRun(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_allowsStoringAnalysisStatistics(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAnalysisStatisticsLimits(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_storeAnalysisStatistics(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAnalysisStatistics(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  codeCheckerDBAccessProcessor(::apache::thrift::stdcxx::shared_ptr<codeCheckerDBAccessIf> iface) :
    iface_(iface) {
    processMap_["getRunData"] = &codeCheckerDBAccessProcessor::process_getRunData;
    processMap_["getRunCount"] = &codeCheckerDBAccessProcessor::process_getRunCount;
    processMap_["getCheckCommand"] = &codeCheckerDBAccessProcessor::process_getCheckCommand;
    processMap_["getRunHistory"] = &codeCheckerDBAccessProcessor::process_getRunHistory;
    processMap_["getRunHistoryCount"] = &codeCheckerDBAccessProcessor::process_getRunHistoryCount;
    processMap_["getDiffResultsHash"] = &codeCheckerDBAccessProcessor::process_getDiffResultsHash;
    processMap_["getReport"] = &codeCheckerDBAccessProcessor::process_getReport;
    processMap_["getRunResults"] = &codeCheckerDBAccessProcessor::process_getRunResults;
    processMap_["getRunReportCounts"] = &codeCheckerDBAccessProcessor::process_getRunReportCounts;
    processMap_["getRunResultCount"] = &codeCheckerDBAccessProcessor::process_getRunResultCount;
    processMap_["getReportDetails"] = &codeCheckerDBAccessProcessor::process_getReportDetails;
    processMap_["getSourceFileData"] = &codeCheckerDBAccessProcessor::process_getSourceFileData;
    processMap_["getLinesInSourceFileContents"] = &codeCheckerDBAccessProcessor::process_getLinesInSourceFileContents;
    processMap_["isReviewStatusChangeDisabled"] = &codeCheckerDBAccessProcessor::process_isReviewStatusChangeDisabled;
    processMap_["changeReviewStatus"] = &codeCheckerDBAccessProcessor::process_changeReviewStatus;
    processMap_["getComments"] = &codeCheckerDBAccessProcessor::process_getComments;
    processMap_["getCommentCount"] = &codeCheckerDBAccessProcessor::process_getCommentCount;
    processMap_["addComment"] = &codeCheckerDBAccessProcessor::process_addComment;
    processMap_["updateComment"] = &codeCheckerDBAccessProcessor::process_updateComment;
    processMap_["removeComment"] = &codeCheckerDBAccessProcessor::process_removeComment;
    processMap_["getCheckerDoc"] = &codeCheckerDBAccessProcessor::process_getCheckerDoc;
    processMap_["getPackageVersion"] = &codeCheckerDBAccessProcessor::process_getPackageVersion;
    processMap_["removeRunResults"] = &codeCheckerDBAccessProcessor::process_removeRunResults;
    processMap_["removeRunReports"] = &codeCheckerDBAccessProcessor::process_removeRunReports;
    processMap_["removeRun"] = &codeCheckerDBAccessProcessor::process_removeRun;
    processMap_["getSuppressFile"] = &codeCheckerDBAccessProcessor::process_getSuppressFile;
    processMap_["getSeverityCounts"] = &codeCheckerDBAccessProcessor::process_getSeverityCounts;
    processMap_["getCheckerMsgCounts"] = &codeCheckerDBAccessProcessor::process_getCheckerMsgCounts;
    processMap_["getReviewStatusCounts"] = &codeCheckerDBAccessProcessor::process_getReviewStatusCounts;
    processMap_["getDetectionStatusCounts"] = &codeCheckerDBAccessProcessor::process_getDetectionStatusCounts;
    processMap_["getFileCounts"] = &codeCheckerDBAccessProcessor::process_getFileCounts;
    processMap_["getCheckerCounts"] = &codeCheckerDBAccessProcessor::process_getCheckerCounts;
    processMap_["getRunHistoryTagCounts"] = &codeCheckerDBAccessProcessor::process_getRunHistoryTagCounts;
    processMap_["addSourceComponent"] = &codeCheckerDBAccessProcessor::process_addSourceComponent;
    processMap_["getSourceComponents"] = &codeCheckerDBAccessProcessor::process_getSourceComponents;
    processMap_["removeSourceComponent"] = &codeCheckerDBAccessProcessor::process_removeSourceComponent;
    processMap_["getMissingContentHashes"] = &codeCheckerDBAccessProcessor::process_getMissingContentHashes;
    processMap_["massStoreRun"] = &codeCheckerDBAccessProcessor::process_massStoreRun;
    processMap_["allowsStoringAnalysisStatistics"] = &codeCheckerDBAccessProcessor::process_allowsStoringAnalysisStatistics;
    processMap_["getAnalysisStatisticsLimits"] = &codeCheckerDBAccessProcessor::process_getAnalysisStatisticsLimits;
    processMap_["storeAnalysisStatistics"] = &codeCheckerDBAccessProcessor::process_storeAnalysisStatistics;
    processMap_["getAnalysisStatistics"] = &codeCheckerDBAccessProcessor::process_getAnalysisStatistics;
  }

  virtual ~codeCheckerDBAccessProcessor() {}
};

class codeCheckerDBAccessProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  codeCheckerDBAccessProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< codeCheckerDBAccessIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< codeCheckerDBAccessIfFactory > handlerFactory_;
};

class codeCheckerDBAccessMultiface : virtual public codeCheckerDBAccessIf {
 public:
  codeCheckerDBAccessMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<codeCheckerDBAccessIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~codeCheckerDBAccessMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<codeCheckerDBAccessIf> > ifaces_;
  codeCheckerDBAccessMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<codeCheckerDBAccessIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getRunData(RunDataList& _return, const RunFilter& runFilter, const int64_t limit, const int64_t offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRunData(_return, runFilter, limit, offset);
    }
    ifaces_[i]->getRunData(_return, runFilter, limit, offset);
    return;
  }

  int64_t getRunCount(const RunFilter& runFilter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRunCount(runFilter);
    }
    return ifaces_[i]->getRunCount(runFilter);
  }

  void getCheckCommand(std::string& _return, const int64_t runHistoryId, const int64_t runId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCheckCommand(_return, runHistoryId, runId);
    }
    ifaces_[i]->getCheckCommand(_return, runHistoryId, runId);
    return;
  }

  void getRunHistory(RunHistoryDataList& _return, const std::vector<int64_t> & runIds, const int64_t limit, const int64_t offset, const RunHistoryFilter& runHistoryFilter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRunHistory(_return, runIds, limit, offset, runHistoryFilter);
    }
    ifaces_[i]->getRunHistory(_return, runIds, limit, offset, runHistoryFilter);
    return;
  }

  int64_t getRunHistoryCount(const std::vector<int64_t> & runIds, const RunHistoryFilter& runHistoryFilter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRunHistoryCount(runIds, runHistoryFilter);
    }
    return ifaces_[i]->getRunHistoryCount(runIds, runHistoryFilter);
  }

  void getDiffResultsHash(std::vector<std::string> & _return, const std::vector<int64_t> & runIds, const std::vector<std::string> & reportHashes, const DiffType::type diffType, const std::vector<DetectionStatus::type> & skipDetectionStatuses) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDiffResultsHash(_return, runIds, reportHashes, diffType, skipDetectionStatuses);
    }
    ifaces_[i]->getDiffResultsHash(_return, runIds, reportHashes, diffType, skipDetectionStatuses);
    return;
  }

  void getReport(ReportData& _return, const int64_t reportId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getReport(_return, reportId);
    }
    ifaces_[i]->getReport(_return, reportId);
    return;
  }

  void getRunResults(ReportDataList& _return, const std::vector<int64_t> & runIds, const int64_t limit, const int64_t offset, const std::vector<SortMode> & sortType, const ReportFilter& reportFilter, const CompareData& cmpData, const bool getDetails) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRunResults(_return, runIds, limit, offset, sortType, reportFilter, cmpData, getDetails);
    }
    ifaces_[i]->getRunResults(_return, runIds, limit, offset, sortType, reportFilter, cmpData, getDetails);
    return;
  }

  void getRunReportCounts(RunReportCounts& _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const int64_t limit, const int64_t offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRunReportCounts(_return, runIds, reportFilter, limit, offset);
    }
    ifaces_[i]->getRunReportCounts(_return, runIds, reportFilter, limit, offset);
    return;
  }

  int64_t getRunResultCount(const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRunResultCount(runIds, reportFilter, cmpData);
    }
    return ifaces_[i]->getRunResultCount(runIds, reportFilter, cmpData);
  }

  void getReportDetails(ReportDetails& _return, const int64_t reportId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getReportDetails(_return, reportId);
    }
    ifaces_[i]->getReportDetails(_return, reportId);
    return;
  }

  void getSourceFileData(SourceFileData& _return, const int64_t fileId, const bool fileContent, const Encoding::type encoding) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSourceFileData(_return, fileId, fileContent, encoding);
    }
    ifaces_[i]->getSourceFileData(_return, fileId, fileContent, encoding);
    return;
  }

  void getLinesInSourceFileContents(std::map<int64_t, std::map<int64_t, std::string> > & _return, const LinesInFilesRequestedList& linesInFilesRequested, const Encoding::type encoding) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLinesInSourceFileContents(_return, linesInFilesRequested, encoding);
    }
    ifaces_[i]->getLinesInSourceFileContents(_return, linesInFilesRequested, encoding);
    return;
  }

  bool isReviewStatusChangeDisabled() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isReviewStatusChangeDisabled();
    }
    return ifaces_[i]->isReviewStatusChangeDisabled();
  }

  bool changeReviewStatus(const int64_t reportId, const ReviewStatus::type status, const std::string& message) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->changeReviewStatus(reportId, status, message);
    }
    return ifaces_[i]->changeReviewStatus(reportId, status, message);
  }

  void getComments(CommentDataList& _return, const int64_t reportId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getComments(_return, reportId);
    }
    ifaces_[i]->getComments(_return, reportId);
    return;
  }

  int64_t getCommentCount(const int64_t reportId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCommentCount(reportId);
    }
    return ifaces_[i]->getCommentCount(reportId);
  }

  bool addComment(const int64_t reportId, const CommentData& comment) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addComment(reportId, comment);
    }
    return ifaces_[i]->addComment(reportId, comment);
  }

  bool updateComment(const int64_t commentId, const std::string& newMessage) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateComment(commentId, newMessage);
    }
    return ifaces_[i]->updateComment(commentId, newMessage);
  }

  bool removeComment(const int64_t commentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeComment(commentId);
    }
    return ifaces_[i]->removeComment(commentId);
  }

  void getCheckerDoc(std::string& _return, const std::string& checkerId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCheckerDoc(_return, checkerId);
    }
    ifaces_[i]->getCheckerDoc(_return, checkerId);
    return;
  }

  void getPackageVersion(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPackageVersion(_return);
    }
    ifaces_[i]->getPackageVersion(_return);
    return;
  }

  bool removeRunResults(const std::vector<int64_t> & runIds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeRunResults(runIds);
    }
    return ifaces_[i]->removeRunResults(runIds);
  }

  bool removeRunReports(const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeRunReports(runIds, reportFilter, cmpData);
    }
    return ifaces_[i]->removeRunReports(runIds, reportFilter, cmpData);
  }

  bool removeRun(const int64_t runId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeRun(runId);
    }
    return ifaces_[i]->removeRun(runId);
  }

  void getSuppressFile(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSuppressFile(_return);
    }
    ifaces_[i]->getSuppressFile(_return);
    return;
  }

  void getSeverityCounts(std::map<Severity::type, int64_t> & _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSeverityCounts(_return, runIds, reportFilter, cmpData);
    }
    ifaces_[i]->getSeverityCounts(_return, runIds, reportFilter, cmpData);
    return;
  }

  void getCheckerMsgCounts(std::map<std::string, int64_t> & _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData, const int64_t limit, const int64_t offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCheckerMsgCounts(_return, runIds, reportFilter, cmpData, limit, offset);
    }
    ifaces_[i]->getCheckerMsgCounts(_return, runIds, reportFilter, cmpData, limit, offset);
    return;
  }

  void getReviewStatusCounts(std::map<ReviewStatus::type, int64_t> & _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getReviewStatusCounts(_return, runIds, reportFilter, cmpData);
    }
    ifaces_[i]->getReviewStatusCounts(_return, runIds, reportFilter, cmpData);
    return;
  }

  void getDetectionStatusCounts(std::map<DetectionStatus::type, int64_t> & _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDetectionStatusCounts(_return, runIds, reportFilter, cmpData);
    }
    ifaces_[i]->getDetectionStatusCounts(_return, runIds, reportFilter, cmpData);
    return;
  }

  void getFileCounts(std::map<std::string, int64_t> & _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData, const int64_t limit, const int64_t offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFileCounts(_return, runIds, reportFilter, cmpData, limit, offset);
    }
    ifaces_[i]->getFileCounts(_return, runIds, reportFilter, cmpData, limit, offset);
    return;
  }

  void getCheckerCounts(CheckerCounts& _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData, const int64_t limit, const int64_t offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCheckerCounts(_return, runIds, reportFilter, cmpData, limit, offset);
    }
    ifaces_[i]->getCheckerCounts(_return, runIds, reportFilter, cmpData, limit, offset);
    return;
  }

  void getRunHistoryTagCounts(RunTagCounts& _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRunHistoryTagCounts(_return, runIds, reportFilter, cmpData);
    }
    ifaces_[i]->getRunHistoryTagCounts(_return, runIds, reportFilter, cmpData);
    return;
  }

  bool addSourceComponent(const std::string& name, const std::string& value, const std::string& description) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addSourceComponent(name, value, description);
    }
    return ifaces_[i]->addSourceComponent(name, value, description);
  }

  void getSourceComponents(SourceComponentDataList& _return, const std::vector<std::string> & sourceComponentFilter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSourceComponents(_return, sourceComponentFilter);
    }
    ifaces_[i]->getSourceComponents(_return, sourceComponentFilter);
    return;
  }

  bool removeSourceComponent(const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeSourceComponent(name);
    }
    return ifaces_[i]->removeSourceComponent(name);
  }

  void getMissingContentHashes(std::vector<std::string> & _return, const std::vector<std::string> & fileHashes) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMissingContentHashes(_return, fileHashes);
    }
    ifaces_[i]->getMissingContentHashes(_return, fileHashes);
    return;
  }

  int64_t massStoreRun(const std::string& runName, const std::string& tag, const std::string& version, const std::string& zipfile, const bool force, const std::vector<std::string> & trimPathPrefixes) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->massStoreRun(runName, tag, version, zipfile, force, trimPathPrefixes);
    }
    return ifaces_[i]->massStoreRun(runName, tag, version, zipfile, force, trimPathPrefixes);
  }

  bool allowsStoringAnalysisStatistics() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->allowsStoringAnalysisStatistics();
    }
    return ifaces_[i]->allowsStoringAnalysisStatistics();
  }

  void getAnalysisStatisticsLimits(std::map<StoreLimitKind::type, int64_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAnalysisStatisticsLimits(_return);
    }
    ifaces_[i]->getAnalysisStatisticsLimits(_return);
    return;
  }

  bool storeAnalysisStatistics(const std::string& runName, const std::string& zipfile) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->storeAnalysisStatistics(runName, zipfile);
    }
    return ifaces_[i]->storeAnalysisStatistics(runName, zipfile);
  }

  void getAnalysisStatistics(AnalyzerStatisticsData& _return, const int64_t runId, const int64_t runHistoryId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAnalysisStatistics(_return, runId, runHistoryId);
    }
    ifaces_[i]->getAnalysisStatistics(_return, runId, runHistoryId);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class codeCheckerDBAccessConcurrentClient : virtual public codeCheckerDBAccessIf {
 public:
  codeCheckerDBAccessConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  codeCheckerDBAccessConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getRunData(RunDataList& _return, const RunFilter& runFilter, const int64_t limit, const int64_t offset);
  int32_t send_getRunData(const RunFilter& runFilter, const int64_t limit, const int64_t offset);
  void recv_getRunData(RunDataList& _return, const int32_t seqid);
  int64_t getRunCount(const RunFilter& runFilter);
  int32_t send_getRunCount(const RunFilter& runFilter);
  int64_t recv_getRunCount(const int32_t seqid);
  void getCheckCommand(std::string& _return, const int64_t runHistoryId, const int64_t runId);
  int32_t send_getCheckCommand(const int64_t runHistoryId, const int64_t runId);
  void recv_getCheckCommand(std::string& _return, const int32_t seqid);
  void getRunHistory(RunHistoryDataList& _return, const std::vector<int64_t> & runIds, const int64_t limit, const int64_t offset, const RunHistoryFilter& runHistoryFilter);
  int32_t send_getRunHistory(const std::vector<int64_t> & runIds, const int64_t limit, const int64_t offset, const RunHistoryFilter& runHistoryFilter);
  void recv_getRunHistory(RunHistoryDataList& _return, const int32_t seqid);
  int64_t getRunHistoryCount(const std::vector<int64_t> & runIds, const RunHistoryFilter& runHistoryFilter);
  int32_t send_getRunHistoryCount(const std::vector<int64_t> & runIds, const RunHistoryFilter& runHistoryFilter);
  int64_t recv_getRunHistoryCount(const int32_t seqid);
  void getDiffResultsHash(std::vector<std::string> & _return, const std::vector<int64_t> & runIds, const std::vector<std::string> & reportHashes, const DiffType::type diffType, const std::vector<DetectionStatus::type> & skipDetectionStatuses);
  int32_t send_getDiffResultsHash(const std::vector<int64_t> & runIds, const std::vector<std::string> & reportHashes, const DiffType::type diffType, const std::vector<DetectionStatus::type> & skipDetectionStatuses);
  void recv_getDiffResultsHash(std::vector<std::string> & _return, const int32_t seqid);
  void getReport(ReportData& _return, const int64_t reportId);
  int32_t send_getReport(const int64_t reportId);
  void recv_getReport(ReportData& _return, const int32_t seqid);
  void getRunResults(ReportDataList& _return, const std::vector<int64_t> & runIds, const int64_t limit, const int64_t offset, const std::vector<SortMode> & sortType, const ReportFilter& reportFilter, const CompareData& cmpData, const bool getDetails);
  int32_t send_getRunResults(const std::vector<int64_t> & runIds, const int64_t limit, const int64_t offset, const std::vector<SortMode> & sortType, const ReportFilter& reportFilter, const CompareData& cmpData, const bool getDetails);
  void recv_getRunResults(ReportDataList& _return, const int32_t seqid);
  void getRunReportCounts(RunReportCounts& _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const int64_t limit, const int64_t offset);
  int32_t send_getRunReportCounts(const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const int64_t limit, const int64_t offset);
  void recv_getRunReportCounts(RunReportCounts& _return, const int32_t seqid);
  int64_t getRunResultCount(const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData);
  int32_t send_getRunResultCount(const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData);
  int64_t recv_getRunResultCount(const int32_t seqid);
  void getReportDetails(ReportDetails& _return, const int64_t reportId);
  int32_t send_getReportDetails(const int64_t reportId);
  void recv_getReportDetails(ReportDetails& _return, const int32_t seqid);
  void getSourceFileData(SourceFileData& _return, const int64_t fileId, const bool fileContent, const Encoding::type encoding);
  int32_t send_getSourceFileData(const int64_t fileId, const bool fileContent, const Encoding::type encoding);
  void recv_getSourceFileData(SourceFileData& _return, const int32_t seqid);
  void getLinesInSourceFileContents(std::map<int64_t, std::map<int64_t, std::string> > & _return, const LinesInFilesRequestedList& linesInFilesRequested, const Encoding::type encoding);
  int32_t send_getLinesInSourceFileContents(const LinesInFilesRequestedList& linesInFilesRequested, const Encoding::type encoding);
  void recv_getLinesInSourceFileContents(std::map<int64_t, std::map<int64_t, std::string> > & _return, const int32_t seqid);
  bool isReviewStatusChangeDisabled();
  int32_t send_isReviewStatusChangeDisabled();
  bool recv_isReviewStatusChangeDisabled(const int32_t seqid);
  bool changeReviewStatus(const int64_t reportId, const ReviewStatus::type status, const std::string& message);
  int32_t send_changeReviewStatus(const int64_t reportId, const ReviewStatus::type status, const std::string& message);
  bool recv_changeReviewStatus(const int32_t seqid);
  void getComments(CommentDataList& _return, const int64_t reportId);
  int32_t send_getComments(const int64_t reportId);
  void recv_getComments(CommentDataList& _return, const int32_t seqid);
  int64_t getCommentCount(const int64_t reportId);
  int32_t send_getCommentCount(const int64_t reportId);
  int64_t recv_getCommentCount(const int32_t seqid);
  bool addComment(const int64_t reportId, const CommentData& comment);
  int32_t send_addComment(const int64_t reportId, const CommentData& comment);
  bool recv_addComment(const int32_t seqid);
  bool updateComment(const int64_t commentId, const std::string& newMessage);
  int32_t send_updateComment(const int64_t commentId, const std::string& newMessage);
  bool recv_updateComment(const int32_t seqid);
  bool removeComment(const int64_t commentId);
  int32_t send_removeComment(const int64_t commentId);
  bool recv_removeComment(const int32_t seqid);
  void getCheckerDoc(std::string& _return, const std::string& checkerId);
  int32_t send_getCheckerDoc(const std::string& checkerId);
  void recv_getCheckerDoc(std::string& _return, const int32_t seqid);
  void getPackageVersion(std::string& _return);
  int32_t send_getPackageVersion();
  void recv_getPackageVersion(std::string& _return, const int32_t seqid);
  bool removeRunResults(const std::vector<int64_t> & runIds);
  int32_t send_removeRunResults(const std::vector<int64_t> & runIds);
  bool recv_removeRunResults(const int32_t seqid);
  bool removeRunReports(const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData);
  int32_t send_removeRunReports(const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData);
  bool recv_removeRunReports(const int32_t seqid);
  bool removeRun(const int64_t runId);
  int32_t send_removeRun(const int64_t runId);
  bool recv_removeRun(const int32_t seqid);
  void getSuppressFile(std::string& _return);
  int32_t send_getSuppressFile();
  void recv_getSuppressFile(std::string& _return, const int32_t seqid);
  void getSeverityCounts(std::map<Severity::type, int64_t> & _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData);
  int32_t send_getSeverityCounts(const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData);
  void recv_getSeverityCounts(std::map<Severity::type, int64_t> & _return, const int32_t seqid);
  void getCheckerMsgCounts(std::map<std::string, int64_t> & _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData, const int64_t limit, const int64_t offset);
  int32_t send_getCheckerMsgCounts(const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData, const int64_t limit, const int64_t offset);
  void recv_getCheckerMsgCounts(std::map<std::string, int64_t> & _return, const int32_t seqid);
  void getReviewStatusCounts(std::map<ReviewStatus::type, int64_t> & _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData);
  int32_t send_getReviewStatusCounts(const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData);
  void recv_getReviewStatusCounts(std::map<ReviewStatus::type, int64_t> & _return, const int32_t seqid);
  void getDetectionStatusCounts(std::map<DetectionStatus::type, int64_t> & _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData);
  int32_t send_getDetectionStatusCounts(const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData);
  void recv_getDetectionStatusCounts(std::map<DetectionStatus::type, int64_t> & _return, const int32_t seqid);
  void getFileCounts(std::map<std::string, int64_t> & _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData, const int64_t limit, const int64_t offset);
  int32_t send_getFileCounts(const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData, const int64_t limit, const int64_t offset);
  void recv_getFileCounts(std::map<std::string, int64_t> & _return, const int32_t seqid);
  void getCheckerCounts(CheckerCounts& _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData, const int64_t limit, const int64_t offset);
  int32_t send_getCheckerCounts(const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData, const int64_t limit, const int64_t offset);
  void recv_getCheckerCounts(CheckerCounts& _return, const int32_t seqid);
  void getRunHistoryTagCounts(RunTagCounts& _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData);
  int32_t send_getRunHistoryTagCounts(const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData);
  void recv_getRunHistoryTagCounts(RunTagCounts& _return, const int32_t seqid);
  bool addSourceComponent(const std::string& name, const std::string& value, const std::string& description);
  int32_t send_addSourceComponent(const std::string& name, const std::string& value, const std::string& description);
  bool recv_addSourceComponent(const int32_t seqid);
  void getSourceComponents(SourceComponentDataList& _return, const std::vector<std::string> & sourceComponentFilter);
  int32_t send_getSourceComponents(const std::vector<std::string> & sourceComponentFilter);
  void recv_getSourceComponents(SourceComponentDataList& _return, const int32_t seqid);
  bool removeSourceComponent(const std::string& name);
  int32_t send_removeSourceComponent(const std::string& name);
  bool recv_removeSourceComponent(const int32_t seqid);
  void getMissingContentHashes(std::vector<std::string> & _return, const std::vector<std::string> & fileHashes);
  int32_t send_getMissingContentHashes(const std::vector<std::string> & fileHashes);
  void recv_getMissingContentHashes(std::vector<std::string> & _return, const int32_t seqid);
  int64_t massStoreRun(const std::string& runName, const std::string& tag, const std::string& version, const std::string& zipfile, const bool force, const std::vector<std::string> & trimPathPrefixes);
  int32_t send_massStoreRun(const std::string& runName, const std::string& tag, const std::string& version, const std::string& zipfile, const bool force, const std::vector<std::string> & trimPathPrefixes);
  int64_t recv_massStoreRun(const int32_t seqid);
  bool allowsStoringAnalysisStatistics();
  int32_t send_allowsStoringAnalysisStatistics();
  bool recv_allowsStoringAnalysisStatistics(const int32_t seqid);
  void getAnalysisStatisticsLimits(std::map<StoreLimitKind::type, int64_t> & _return);
  int32_t send_getAnalysisStatisticsLimits();
  void recv_getAnalysisStatisticsLimits(std::map<StoreLimitKind::type, int64_t> & _return, const int32_t seqid);
  bool storeAnalysisStatistics(const std::string& runName, const std::string& zipfile);
  int32_t send_storeAnalysisStatistics(const std::string& runName, const std::string& zipfile);
  bool recv_storeAnalysisStatistics(const int32_t seqid);
  void getAnalysisStatistics(AnalyzerStatisticsData& _return, const int64_t runId, const int64_t runHistoryId);
  int32_t send_getAnalysisStatistics(const int64_t runId, const int64_t runHistoryId);
  void recv_getAnalysisStatistics(AnalyzerStatisticsData& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
