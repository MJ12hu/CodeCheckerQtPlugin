// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "codeCheckerDBAccess.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class codeCheckerDBAccessHandler : virtual public codeCheckerDBAccessIf {
 public:
  codeCheckerDBAccessHandler() {
    // Your initialization goes here
  }

  void getRunData(RunDataList& _return, const RunFilter& runFilter, const int64_t limit, const int64_t offset) {
    // Your implementation goes here
    printf("getRunData\n");
  }

  int64_t getRunCount(const RunFilter& runFilter) {
    // Your implementation goes here
    printf("getRunCount\n");
  }

  void getCheckCommand(std::string& _return, const int64_t runHistoryId, const int64_t runId) {
    // Your implementation goes here
    printf("getCheckCommand\n");
  }

  void getRunHistory(RunHistoryDataList& _return, const std::vector<int64_t> & runIds, const int64_t limit, const int64_t offset, const RunHistoryFilter& runHistoryFilter) {
    // Your implementation goes here
    printf("getRunHistory\n");
  }

  int64_t getRunHistoryCount(const std::vector<int64_t> & runIds, const RunHistoryFilter& runHistoryFilter) {
    // Your implementation goes here
    printf("getRunHistoryCount\n");
  }

  void getDiffResultsHash(std::vector<std::string> & _return, const std::vector<int64_t> & runIds, const std::vector<std::string> & reportHashes, const DiffType::type diffType, const std::vector<DetectionStatus::type> & skipDetectionStatuses) {
    // Your implementation goes here
    printf("getDiffResultsHash\n");
  }

  void getReport(ReportData& _return, const int64_t reportId) {
    // Your implementation goes here
    printf("getReport\n");
  }

  void getRunResults(ReportDataList& _return, const std::vector<int64_t> & runIds, const int64_t limit, const int64_t offset, const std::vector<SortMode> & sortType, const ReportFilter& reportFilter, const CompareData& cmpData, const bool getDetails) {
    // Your implementation goes here
    printf("getRunResults\n");
  }

  void getRunReportCounts(RunReportCounts& _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const int64_t limit, const int64_t offset) {
    // Your implementation goes here
    printf("getRunReportCounts\n");
  }

  int64_t getRunResultCount(const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData) {
    // Your implementation goes here
    printf("getRunResultCount\n");
  }

  void getReportDetails(ReportDetails& _return, const int64_t reportId) {
    // Your implementation goes here
    printf("getReportDetails\n");
  }

  void getSourceFileData(SourceFileData& _return, const int64_t fileId, const bool fileContent, const Encoding::type encoding) {
    // Your implementation goes here
    printf("getSourceFileData\n");
  }

  void getLinesInSourceFileContents(std::map<int64_t, std::map<int64_t, std::string> > & _return, const LinesInFilesRequestedList& linesInFilesRequested, const Encoding::type encoding) {
    // Your implementation goes here
    printf("getLinesInSourceFileContents\n");
  }

  bool isReviewStatusChangeDisabled() {
    // Your implementation goes here
    printf("isReviewStatusChangeDisabled\n");
  }

  bool changeReviewStatus(const int64_t reportId, const ReviewStatus::type status, const std::string& message) {
    // Your implementation goes here
    printf("changeReviewStatus\n");
  }

  void getComments(CommentDataList& _return, const int64_t reportId) {
    // Your implementation goes here
    printf("getComments\n");
  }

  int64_t getCommentCount(const int64_t reportId) {
    // Your implementation goes here
    printf("getCommentCount\n");
  }

  bool addComment(const int64_t reportId, const CommentData& comment) {
    // Your implementation goes here
    printf("addComment\n");
  }

  bool updateComment(const int64_t commentId, const std::string& newMessage) {
    // Your implementation goes here
    printf("updateComment\n");
  }

  bool removeComment(const int64_t commentId) {
    // Your implementation goes here
    printf("removeComment\n");
  }

  void getCheckerDoc(std::string& _return, const std::string& checkerId) {
    // Your implementation goes here
    printf("getCheckerDoc\n");
  }

  void getPackageVersion(std::string& _return) {
    // Your implementation goes here
    printf("getPackageVersion\n");
  }

  bool removeRunResults(const std::vector<int64_t> & runIds) {
    // Your implementation goes here
    printf("removeRunResults\n");
  }

  bool removeRunReports(const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData) {
    // Your implementation goes here
    printf("removeRunReports\n");
  }

  bool removeRun(const int64_t runId) {
    // Your implementation goes here
    printf("removeRun\n");
  }

  void getSuppressFile(std::string& _return) {
    // Your implementation goes here
    printf("getSuppressFile\n");
  }

  void getSeverityCounts(std::map<Severity::type, int64_t> & _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData) {
    // Your implementation goes here
    printf("getSeverityCounts\n");
  }

  void getCheckerMsgCounts(std::map<std::string, int64_t> & _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData, const int64_t limit, const int64_t offset) {
    // Your implementation goes here
    printf("getCheckerMsgCounts\n");
  }

  void getReviewStatusCounts(std::map<ReviewStatus::type, int64_t> & _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData) {
    // Your implementation goes here
    printf("getReviewStatusCounts\n");
  }

  void getDetectionStatusCounts(std::map<DetectionStatus::type, int64_t> & _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData) {
    // Your implementation goes here
    printf("getDetectionStatusCounts\n");
  }

  void getFileCounts(std::map<std::string, int64_t> & _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData, const int64_t limit, const int64_t offset) {
    // Your implementation goes here
    printf("getFileCounts\n");
  }

  void getCheckerCounts(CheckerCounts& _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData, const int64_t limit, const int64_t offset) {
    // Your implementation goes here
    printf("getCheckerCounts\n");
  }

  void getRunHistoryTagCounts(RunTagCounts& _return, const std::vector<int64_t> & runIds, const ReportFilter& reportFilter, const CompareData& cmpData) {
    // Your implementation goes here
    printf("getRunHistoryTagCounts\n");
  }

  bool addSourceComponent(const std::string& name, const std::string& value, const std::string& description) {
    // Your implementation goes here
    printf("addSourceComponent\n");
  }

  void getSourceComponents(SourceComponentDataList& _return, const std::vector<std::string> & sourceComponentFilter) {
    // Your implementation goes here
    printf("getSourceComponents\n");
  }

  bool removeSourceComponent(const std::string& name) {
    // Your implementation goes here
    printf("removeSourceComponent\n");
  }

  void getMissingContentHashes(std::vector<std::string> & _return, const std::vector<std::string> & fileHashes) {
    // Your implementation goes here
    printf("getMissingContentHashes\n");
  }

  int64_t massStoreRun(const std::string& runName, const std::string& tag, const std::string& version, const std::string& zipfile, const bool force, const std::vector<std::string> & trimPathPrefixes) {
    // Your implementation goes here
    printf("massStoreRun\n");
  }

  bool allowsStoringAnalysisStatistics() {
    // Your implementation goes here
    printf("allowsStoringAnalysisStatistics\n");
  }

  void getAnalysisStatisticsLimits(std::map<StoreLimitKind::type, int64_t> & _return) {
    // Your implementation goes here
    printf("getAnalysisStatisticsLimits\n");
  }

  bool storeAnalysisStatistics(const std::string& runName, const std::string& zipfile) {
    // Your implementation goes here
    printf("storeAnalysisStatistics\n");
  }

  void getAnalysisStatistics(AnalyzerStatisticsData& _return, const int64_t runId, const int64_t runHistoryId) {
    // Your implementation goes here
    printf("getAnalysisStatistics\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<codeCheckerDBAccessHandler> handler(new codeCheckerDBAccessHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new codeCheckerDBAccessProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

