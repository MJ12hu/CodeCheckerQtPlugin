/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "shared_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>



int _kErrorCodeValues[] = {
  ErrorCode::DATABASE,
  ErrorCode::IOERROR,
  ErrorCode::GENERAL,
  ErrorCode::AUTH_DENIED,
  ErrorCode::UNAUTHORIZED,
  ErrorCode::API_MISMATCH,
  ErrorCode::SOURCE_FILE
};
const char* _kErrorCodeNames[] = {
  "DATABASE",
  "IOERROR",
  "GENERAL",
  "AUTH_DENIED",
  "UNAUTHORIZED",
  "API_MISMATCH",
  "SOURCE_FILE"
};
const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kErrorCodeValues, _kErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ErrorCode::type& val) {
  std::map<int, const char*>::const_iterator it = _ErrorCode_VALUES_TO_NAMES.find(val);
  if (it != _ErrorCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kPermissionValues[] = {
  Permission::SUPERUSER,
  Permission::PRODUCT_ADMIN,
  Permission::PRODUCT_ACCESS,
  Permission::PRODUCT_STORE
};
const char* _kPermissionNames[] = {
  "SUPERUSER",
  "PRODUCT_ADMIN",
  "PRODUCT_ACCESS",
  "PRODUCT_STORE"
};
const std::map<int, const char*> _Permission_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kPermissionValues, _kPermissionNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const Permission::type& val) {
  std::map<int, const char*>::const_iterator it = _Permission_VALUES_TO_NAMES.find(val);
  if (it != _Permission_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kDBStatusValues[] = {
  DBStatus::OK,
  DBStatus::MISSING,
  DBStatus::FAILED_TO_CONNECT,
  DBStatus::SCHEMA_MISMATCH_OK,
  DBStatus::SCHEMA_MISMATCH_NO,
  DBStatus::SCHEMA_MISSING,
  DBStatus::SCHEMA_INIT_ERROR,
  DBStatus::SCHEMA_UPGRADE_FAILED
};
const char* _kDBStatusNames[] = {
  "OK",
  "MISSING",
  "FAILED_TO_CONNECT",
  "SCHEMA_MISMATCH_OK",
  "SCHEMA_MISMATCH_NO",
  "SCHEMA_MISSING",
  "SCHEMA_INIT_ERROR",
  "SCHEMA_UPGRADE_FAILED"
};
const std::map<int, const char*> _DBStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kDBStatusValues, _kDBStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const DBStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _DBStatus_VALUES_TO_NAMES.find(val);
  if (it != _DBStatus_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


RequestFailed::~RequestFailed() throw() {
}


void RequestFailed::__set_errorCode(const ErrorCode::type val) {
  this->errorCode = val;
}

void RequestFailed::__set_message(const std::string& val) {
  this->message = val;
}

void RequestFailed::__set_extraInfo(const std::vector<std::string> & val) {
  this->extraInfo = val;
}
std::ostream& operator<<(std::ostream& out, const RequestFailed& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RequestFailed::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->errorCode = (ErrorCode::type)ecast0;
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->extraInfo.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->extraInfo.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += iprot->readString(this->extraInfo[_i5]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.extraInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RequestFailed::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RequestFailed");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->errorCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("extraInfo", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->extraInfo.size()));
    std::vector<std::string> ::const_iterator _iter6;
    for (_iter6 = this->extraInfo.begin(); _iter6 != this->extraInfo.end(); ++_iter6)
    {
      xfer += oprot->writeString((*_iter6));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestFailed &a, RequestFailed &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.message, b.message);
  swap(a.extraInfo, b.extraInfo);
  swap(a.__isset, b.__isset);
}

RequestFailed::RequestFailed(const RequestFailed& other7) : TException() {
  errorCode = other7.errorCode;
  message = other7.message;
  extraInfo = other7.extraInfo;
  __isset = other7.__isset;
}
RequestFailed& RequestFailed::operator=(const RequestFailed& other8) {
  errorCode = other8.errorCode;
  message = other8.message;
  extraInfo = other8.extraInfo;
  __isset = other8.__isset;
  return *this;
}
void RequestFailed::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RequestFailed(";
  out << "errorCode=" << to_string(errorCode);
  out << ", " << "message=" << to_string(message);
  out << ", " << "extraInfo=" << to_string(extraInfo);
  out << ")";
}

const char* RequestFailed::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: RequestFailed";
  }
}


