/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "report_server_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>



int _kDetectionStatusValues[] = {
  DetectionStatus::NEW,
  DetectionStatus::RESOLVED,
  DetectionStatus::UNRESOLVED,
  DetectionStatus::REOPENED,
  DetectionStatus::OFF,
  DetectionStatus::UNAVAILABLE
};
const char* _kDetectionStatusNames[] = {
  "NEW",
  "RESOLVED",
  "UNRESOLVED",
  "REOPENED",
  "OFF",
  "UNAVAILABLE"
};
const std::map<int, const char*> _DetectionStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kDetectionStatusValues, _kDetectionStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const DetectionStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _DetectionStatus_VALUES_TO_NAMES.find(val);
  if (it != _DetectionStatus_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kDiffTypeValues[] = {
  DiffType::NEW,
  DiffType::RESOLVED,
  DiffType::UNRESOLVED
};
const char* _kDiffTypeNames[] = {
  "NEW",
  "RESOLVED",
  "UNRESOLVED"
};
const std::map<int, const char*> _DiffType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kDiffTypeValues, _kDiffTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const DiffType::type& val) {
  std::map<int, const char*>::const_iterator it = _DiffType_VALUES_TO_NAMES.find(val);
  if (it != _DiffType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kEncodingValues[] = {
  Encoding::DEFAULT,
  Encoding::BASE64
};
const char* _kEncodingNames[] = {
  "DEFAULT",
  "BASE64"
};
const std::map<int, const char*> _Encoding_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kEncodingValues, _kEncodingNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const Encoding::type& val) {
  std::map<int, const char*>::const_iterator it = _Encoding_VALUES_TO_NAMES.find(val);
  if (it != _Encoding_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kOrderValues[] = {
  Order::ASC,
  Order::DESC
};
const char* _kOrderNames[] = {
  "ASC",
  "DESC"
};
const std::map<int, const char*> _Order_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kOrderValues, _kOrderNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const Order::type& val) {
  std::map<int, const char*>::const_iterator it = _Order_VALUES_TO_NAMES.find(val);
  if (it != _Order_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kReviewStatusValues[] = {
  ReviewStatus::UNREVIEWED,
  ReviewStatus::CONFIRMED,
  ReviewStatus::FALSE_POSITIVE,
  ReviewStatus::INTENTIONAL
};
const char* _kReviewStatusNames[] = {
  "UNREVIEWED",
  "CONFIRMED",
  "FALSE_POSITIVE",
  "INTENTIONAL"
};
const std::map<int, const char*> _ReviewStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kReviewStatusValues, _kReviewStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ReviewStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _ReviewStatus_VALUES_TO_NAMES.find(val);
  if (it != _ReviewStatus_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSeverityValues[] = {
  Severity::UNSPECIFIED,
  Severity::STYLE,
  Severity::LOW,
  Severity::MEDIUM,
  Severity::HIGH,
  Severity::CRITICAL
};
const char* _kSeverityNames[] = {
  "UNSPECIFIED",
  "STYLE",
  "LOW",
  "MEDIUM",
  "HIGH",
  "CRITICAL"
};
const std::map<int, const char*> _Severity_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kSeverityValues, _kSeverityNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const Severity::type& val) {
  std::map<int, const char*>::const_iterator it = _Severity_VALUES_TO_NAMES.find(val);
  if (it != _Severity_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSortTypeValues[] = {
  SortType::FILENAME,
  SortType::CHECKER_NAME,
  SortType::SEVERITY,
  SortType::REVIEW_STATUS,
  SortType::DETECTION_STATUS,
  SortType::BUG_PATH_LENGTH
};
const char* _kSortTypeNames[] = {
  "FILENAME",
  "CHECKER_NAME",
  "SEVERITY",
  "REVIEW_STATUS",
  "DETECTION_STATUS",
  "BUG_PATH_LENGTH"
};
const std::map<int, const char*> _SortType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kSortTypeValues, _kSortTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SortType::type& val) {
  std::map<int, const char*>::const_iterator it = _SortType_VALUES_TO_NAMES.find(val);
  if (it != _SortType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kStoreLimitKindValues[] = {
  StoreLimitKind::FAILURE_ZIP_SIZE,
  StoreLimitKind::COMPILATION_DATABASE_SIZE
};
const char* _kStoreLimitKindNames[] = {
  "FAILURE_ZIP_SIZE",
  "COMPILATION_DATABASE_SIZE"
};
const std::map<int, const char*> _StoreLimitKind_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kStoreLimitKindValues, _kStoreLimitKindNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const StoreLimitKind::type& val) {
  std::map<int, const char*>::const_iterator it = _StoreLimitKind_VALUES_TO_NAMES.find(val);
  if (it != _StoreLimitKind_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kExtendedReportDataTypeValues[] = {
  ExtendedReportDataType::NOTE,
  ExtendedReportDataType::MACRO,
  ExtendedReportDataType::FIXIT
};
const char* _kExtendedReportDataTypeNames[] = {
  "NOTE",
  "MACRO",
  "FIXIT"
};
const std::map<int, const char*> _ExtendedReportDataType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kExtendedReportDataTypeValues, _kExtendedReportDataTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ExtendedReportDataType::type& val) {
  std::map<int, const char*>::const_iterator it = _ExtendedReportDataType_VALUES_TO_NAMES.find(val);
  if (it != _ExtendedReportDataType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


SourceFileData::~SourceFileData() throw() {
}


void SourceFileData::__set_fileId(const int64_t val) {
  this->fileId = val;
}

void SourceFileData::__set_filePath(const std::string& val) {
  this->filePath = val;
}

void SourceFileData::__set_fileContent(const std::string& val) {
  this->fileContent = val;
__isset.fileContent = true;
}
std::ostream& operator<<(std::ostream& out, const SourceFileData& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SourceFileData::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fileId);
          this->__isset.fileId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->filePath);
          this->__isset.filePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fileContent);
          this->__isset.fileContent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SourceFileData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SourceFileData");

  xfer += oprot->writeFieldBegin("fileId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->fileId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("filePath", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->filePath);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.fileContent) {
    xfer += oprot->writeFieldBegin("fileContent", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->fileContent);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SourceFileData &a, SourceFileData &b) {
  using ::std::swap;
  swap(a.fileId, b.fileId);
  swap(a.filePath, b.filePath);
  swap(a.fileContent, b.fileContent);
  swap(a.__isset, b.__isset);
}

SourceFileData::SourceFileData(const SourceFileData& other0) {
  fileId = other0.fileId;
  filePath = other0.filePath;
  fileContent = other0.fileContent;
  __isset = other0.__isset;
}
SourceFileData& SourceFileData::operator=(const SourceFileData& other1) {
  fileId = other1.fileId;
  filePath = other1.filePath;
  fileContent = other1.fileContent;
  __isset = other1.__isset;
  return *this;
}
void SourceFileData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SourceFileData(";
  out << "fileId=" << to_string(fileId);
  out << ", " << "filePath=" << to_string(filePath);
  out << ", " << "fileContent="; (__isset.fileContent ? (out << to_string(fileContent)) : (out << "<null>"));
  out << ")";
}


SortMode::~SortMode() throw() {
}


void SortMode::__set_type(const SortType::type val) {
  this->type = val;
}

void SortMode::__set_ord(const Order::type val) {
  this->ord = val;
}
std::ostream& operator<<(std::ostream& out, const SortMode& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SortMode::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->type = (SortType::type)ecast2;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->ord = (Order::type)ecast3;
          this->__isset.ord = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SortMode::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SortMode");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ord", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->ord);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SortMode &a, SortMode &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.ord, b.ord);
  swap(a.__isset, b.__isset);
}

SortMode::SortMode(const SortMode& other4) {
  type = other4.type;
  ord = other4.ord;
  __isset = other4.__isset;
}
SortMode& SortMode::operator=(const SortMode& other5) {
  type = other5.type;
  ord = other5.ord;
  __isset = other5.__isset;
  return *this;
}
void SortMode::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SortMode(";
  out << "type=" << to_string(type);
  out << ", " << "ord=" << to_string(ord);
  out << ")";
}


BugPathEvent::~BugPathEvent() throw() {
}


void BugPathEvent::__set_startLine(const int64_t val) {
  this->startLine = val;
}

void BugPathEvent::__set_startCol(const int64_t val) {
  this->startCol = val;
}

void BugPathEvent::__set_endLine(const int64_t val) {
  this->endLine = val;
}

void BugPathEvent::__set_endCol(const int64_t val) {
  this->endCol = val;
}

void BugPathEvent::__set_msg(const std::string& val) {
  this->msg = val;
}

void BugPathEvent::__set_fileId(const int64_t val) {
  this->fileId = val;
}

void BugPathEvent::__set_filePath(const std::string& val) {
  this->filePath = val;
}
std::ostream& operator<<(std::ostream& out, const BugPathEvent& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BugPathEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startLine);
          this->__isset.startLine = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startCol);
          this->__isset.startCol = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->endLine);
          this->__isset.endLine = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->endCol);
          this->__isset.endCol = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fileId);
          this->__isset.fileId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->filePath);
          this->__isset.filePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BugPathEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BugPathEvent");

  xfer += oprot->writeFieldBegin("startLine", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->startLine);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startCol", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->startCol);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endLine", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->endLine);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endCol", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->endCol);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fileId", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->fileId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("filePath", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->filePath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BugPathEvent &a, BugPathEvent &b) {
  using ::std::swap;
  swap(a.startLine, b.startLine);
  swap(a.startCol, b.startCol);
  swap(a.endLine, b.endLine);
  swap(a.endCol, b.endCol);
  swap(a.msg, b.msg);
  swap(a.fileId, b.fileId);
  swap(a.filePath, b.filePath);
  swap(a.__isset, b.__isset);
}

BugPathEvent::BugPathEvent(const BugPathEvent& other6) {
  startLine = other6.startLine;
  startCol = other6.startCol;
  endLine = other6.endLine;
  endCol = other6.endCol;
  msg = other6.msg;
  fileId = other6.fileId;
  filePath = other6.filePath;
  __isset = other6.__isset;
}
BugPathEvent& BugPathEvent::operator=(const BugPathEvent& other7) {
  startLine = other7.startLine;
  startCol = other7.startCol;
  endLine = other7.endLine;
  endCol = other7.endCol;
  msg = other7.msg;
  fileId = other7.fileId;
  filePath = other7.filePath;
  __isset = other7.__isset;
  return *this;
}
void BugPathEvent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BugPathEvent(";
  out << "startLine=" << to_string(startLine);
  out << ", " << "startCol=" << to_string(startCol);
  out << ", " << "endLine=" << to_string(endLine);
  out << ", " << "endCol=" << to_string(endCol);
  out << ", " << "msg=" << to_string(msg);
  out << ", " << "fileId=" << to_string(fileId);
  out << ", " << "filePath=" << to_string(filePath);
  out << ")";
}


BugPathPos::~BugPathPos() throw() {
}


void BugPathPos::__set_startLine(const int64_t val) {
  this->startLine = val;
}

void BugPathPos::__set_startCol(const int64_t val) {
  this->startCol = val;
}

void BugPathPos::__set_endLine(const int64_t val) {
  this->endLine = val;
}

void BugPathPos::__set_endCol(const int64_t val) {
  this->endCol = val;
}

void BugPathPos::__set_fileId(const int64_t val) {
  this->fileId = val;
}

void BugPathPos::__set_filePath(const std::string& val) {
  this->filePath = val;
}
std::ostream& operator<<(std::ostream& out, const BugPathPos& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BugPathPos::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startLine);
          this->__isset.startLine = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startCol);
          this->__isset.startCol = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->endLine);
          this->__isset.endLine = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->endCol);
          this->__isset.endCol = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fileId);
          this->__isset.fileId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->filePath);
          this->__isset.filePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BugPathPos::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BugPathPos");

  xfer += oprot->writeFieldBegin("startLine", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->startLine);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startCol", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->startCol);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endLine", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->endLine);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endCol", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->endCol);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fileId", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->fileId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("filePath", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->filePath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BugPathPos &a, BugPathPos &b) {
  using ::std::swap;
  swap(a.startLine, b.startLine);
  swap(a.startCol, b.startCol);
  swap(a.endLine, b.endLine);
  swap(a.endCol, b.endCol);
  swap(a.fileId, b.fileId);
  swap(a.filePath, b.filePath);
  swap(a.__isset, b.__isset);
}

BugPathPos::BugPathPos(const BugPathPos& other8) {
  startLine = other8.startLine;
  startCol = other8.startCol;
  endLine = other8.endLine;
  endCol = other8.endCol;
  fileId = other8.fileId;
  filePath = other8.filePath;
  __isset = other8.__isset;
}
BugPathPos& BugPathPos::operator=(const BugPathPos& other9) {
  startLine = other9.startLine;
  startCol = other9.startCol;
  endLine = other9.endLine;
  endCol = other9.endCol;
  fileId = other9.fileId;
  filePath = other9.filePath;
  __isset = other9.__isset;
  return *this;
}
void BugPathPos::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BugPathPos(";
  out << "startLine=" << to_string(startLine);
  out << ", " << "startCol=" << to_string(startCol);
  out << ", " << "endLine=" << to_string(endLine);
  out << ", " << "endCol=" << to_string(endCol);
  out << ", " << "fileId=" << to_string(fileId);
  out << ", " << "filePath=" << to_string(filePath);
  out << ")";
}


ExtendedReportData::~ExtendedReportData() throw() {
}


void ExtendedReportData::__set_type(const ExtendedReportDataType::type val) {
  this->type = val;
}

void ExtendedReportData::__set_startLine(const int64_t val) {
  this->startLine = val;
}

void ExtendedReportData::__set_startCol(const int64_t val) {
  this->startCol = val;
}

void ExtendedReportData::__set_endLine(const int64_t val) {
  this->endLine = val;
}

void ExtendedReportData::__set_endCol(const int64_t val) {
  this->endCol = val;
}

void ExtendedReportData::__set_message(const std::string& val) {
  this->message = val;
}

void ExtendedReportData::__set_fileId(const int64_t val) {
  this->fileId = val;
}

void ExtendedReportData::__set_filePath(const std::string& val) {
  this->filePath = val;
}
std::ostream& operator<<(std::ostream& out, const ExtendedReportData& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ExtendedReportData::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast10;
          xfer += iprot->readI32(ecast10);
          this->type = (ExtendedReportDataType::type)ecast10;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startLine);
          this->__isset.startLine = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startCol);
          this->__isset.startCol = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->endLine);
          this->__isset.endLine = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->endCol);
          this->__isset.endCol = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fileId);
          this->__isset.fileId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->filePath);
          this->__isset.filePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExtendedReportData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ExtendedReportData");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startLine", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->startLine);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startCol", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->startCol);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endLine", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->endLine);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endCol", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->endCol);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fileId", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->fileId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("filePath", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->filePath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ExtendedReportData &a, ExtendedReportData &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.startLine, b.startLine);
  swap(a.startCol, b.startCol);
  swap(a.endLine, b.endLine);
  swap(a.endCol, b.endCol);
  swap(a.message, b.message);
  swap(a.fileId, b.fileId);
  swap(a.filePath, b.filePath);
  swap(a.__isset, b.__isset);
}

ExtendedReportData::ExtendedReportData(const ExtendedReportData& other11) {
  type = other11.type;
  startLine = other11.startLine;
  startCol = other11.startCol;
  endLine = other11.endLine;
  endCol = other11.endCol;
  message = other11.message;
  fileId = other11.fileId;
  filePath = other11.filePath;
  __isset = other11.__isset;
}
ExtendedReportData& ExtendedReportData::operator=(const ExtendedReportData& other12) {
  type = other12.type;
  startLine = other12.startLine;
  startCol = other12.startCol;
  endLine = other12.endLine;
  endCol = other12.endCol;
  message = other12.message;
  fileId = other12.fileId;
  filePath = other12.filePath;
  __isset = other12.__isset;
  return *this;
}
void ExtendedReportData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ExtendedReportData(";
  out << "type=" << to_string(type);
  out << ", " << "startLine=" << to_string(startLine);
  out << ", " << "startCol=" << to_string(startCol);
  out << ", " << "endLine=" << to_string(endLine);
  out << ", " << "endCol=" << to_string(endCol);
  out << ", " << "message=" << to_string(message);
  out << ", " << "fileId=" << to_string(fileId);
  out << ", " << "filePath=" << to_string(filePath);
  out << ")";
}


ReportDetails::~ReportDetails() throw() {
}


void ReportDetails::__set_pathEvents(const BugPathEvents& val) {
  this->pathEvents = val;
}

void ReportDetails::__set_executionPath(const BugPath& val) {
  this->executionPath = val;
}

void ReportDetails::__set_extendedData(const ExtendedReportDataList& val) {
  this->extendedData = val;
__isset.extendedData = true;
}
std::ostream& operator<<(std::ostream& out, const ReportDetails& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ReportDetails::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->pathEvents.clear();
            uint32_t _size13;
            ::apache::thrift::protocol::TType _etype16;
            xfer += iprot->readListBegin(_etype16, _size13);
            this->pathEvents.resize(_size13);
            uint32_t _i17;
            for (_i17 = 0; _i17 < _size13; ++_i17)
            {
              xfer += this->pathEvents[_i17].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.pathEvents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->executionPath.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            xfer += iprot->readListBegin(_etype21, _size18);
            this->executionPath.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += this->executionPath[_i22].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.executionPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->extendedData.clear();
            uint32_t _size23;
            ::apache::thrift::protocol::TType _etype26;
            xfer += iprot->readListBegin(_etype26, _size23);
            this->extendedData.resize(_size23);
            uint32_t _i27;
            for (_i27 = 0; _i27 < _size23; ++_i27)
            {
              xfer += this->extendedData[_i27].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.extendedData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReportDetails::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ReportDetails");

  xfer += oprot->writeFieldBegin("pathEvents", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->pathEvents.size()));
    std::vector<BugPathEvent> ::const_iterator _iter28;
    for (_iter28 = this->pathEvents.begin(); _iter28 != this->pathEvents.end(); ++_iter28)
    {
      xfer += (*_iter28).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("executionPath", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->executionPath.size()));
    std::vector<BugPathPos> ::const_iterator _iter29;
    for (_iter29 = this->executionPath.begin(); _iter29 != this->executionPath.end(); ++_iter29)
    {
      xfer += (*_iter29).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.extendedData) {
    xfer += oprot->writeFieldBegin("extendedData", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->extendedData.size()));
      std::vector<ExtendedReportData> ::const_iterator _iter30;
      for (_iter30 = this->extendedData.begin(); _iter30 != this->extendedData.end(); ++_iter30)
      {
        xfer += (*_iter30).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReportDetails &a, ReportDetails &b) {
  using ::std::swap;
  swap(a.pathEvents, b.pathEvents);
  swap(a.executionPath, b.executionPath);
  swap(a.extendedData, b.extendedData);
  swap(a.__isset, b.__isset);
}

ReportDetails::ReportDetails(const ReportDetails& other31) {
  pathEvents = other31.pathEvents;
  executionPath = other31.executionPath;
  extendedData = other31.extendedData;
  __isset = other31.__isset;
}
ReportDetails& ReportDetails::operator=(const ReportDetails& other32) {
  pathEvents = other32.pathEvents;
  executionPath = other32.executionPath;
  extendedData = other32.extendedData;
  __isset = other32.__isset;
  return *this;
}
void ReportDetails::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ReportDetails(";
  out << "pathEvents=" << to_string(pathEvents);
  out << ", " << "executionPath=" << to_string(executionPath);
  out << ", " << "extendedData="; (__isset.extendedData ? (out << to_string(extendedData)) : (out << "<null>"));
  out << ")";
}


AnalyzerStatistics::~AnalyzerStatistics() throw() {
}


void AnalyzerStatistics::__set_version(const std::string& val) {
  this->version = val;
}

void AnalyzerStatistics::__set_failed(const int64_t val) {
  this->failed = val;
}

void AnalyzerStatistics::__set_successful(const int64_t val) {
  this->successful = val;
}

void AnalyzerStatistics::__set_failedFilePaths(const std::vector<std::string> & val) {
  this->failedFilePaths = val;
}
std::ostream& operator<<(std::ostream& out, const AnalyzerStatistics& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AnalyzerStatistics::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->failed);
          this->__isset.failed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->successful);
          this->__isset.successful = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->failedFilePaths.clear();
            uint32_t _size33;
            ::apache::thrift::protocol::TType _etype36;
            xfer += iprot->readListBegin(_etype36, _size33);
            this->failedFilePaths.resize(_size33);
            uint32_t _i37;
            for (_i37 = 0; _i37 < _size33; ++_i37)
            {
              xfer += iprot->readString(this->failedFilePaths[_i37]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.failedFilePaths = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AnalyzerStatistics::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AnalyzerStatistics");

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("failed", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->failed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("successful", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->successful);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("failedFilePaths", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->failedFilePaths.size()));
    std::vector<std::string> ::const_iterator _iter38;
    for (_iter38 = this->failedFilePaths.begin(); _iter38 != this->failedFilePaths.end(); ++_iter38)
    {
      xfer += oprot->writeString((*_iter38));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AnalyzerStatistics &a, AnalyzerStatistics &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.failed, b.failed);
  swap(a.successful, b.successful);
  swap(a.failedFilePaths, b.failedFilePaths);
  swap(a.__isset, b.__isset);
}

AnalyzerStatistics::AnalyzerStatistics(const AnalyzerStatistics& other39) {
  version = other39.version;
  failed = other39.failed;
  successful = other39.successful;
  failedFilePaths = other39.failedFilePaths;
  __isset = other39.__isset;
}
AnalyzerStatistics& AnalyzerStatistics::operator=(const AnalyzerStatistics& other40) {
  version = other40.version;
  failed = other40.failed;
  successful = other40.successful;
  failedFilePaths = other40.failedFilePaths;
  __isset = other40.__isset;
  return *this;
}
void AnalyzerStatistics::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AnalyzerStatistics(";
  out << "version=" << to_string(version);
  out << ", " << "failed=" << to_string(failed);
  out << ", " << "successful=" << to_string(successful);
  out << ", " << "failedFilePaths=" << to_string(failedFilePaths);
  out << ")";
}


RunData::~RunData() throw() {
}


void RunData::__set_runId(const int64_t val) {
  this->runId = val;
}

void RunData::__set_runDate(const std::string& val) {
  this->runDate = val;
}

void RunData::__set_name(const std::string& val) {
  this->name = val;
}

void RunData::__set_duration(const int64_t val) {
  this->duration = val;
}

void RunData::__set_resultCount(const int64_t val) {
  this->resultCount = val;
}

void RunData::__set_runCmd(const std::string& val) {
  this->runCmd = val;
}

void RunData::__set_detectionStatusCount(const std::map<DetectionStatus::type, int32_t> & val) {
  this->detectionStatusCount = val;
}

void RunData::__set_versionTag(const std::string& val) {
  this->versionTag = val;
}

void RunData::__set_codeCheckerVersion(const std::string& val) {
  this->codeCheckerVersion = val;
}

void RunData::__set_analyzerStatistics(const AnalyzerStatisticsData& val) {
  this->analyzerStatistics = val;
}
std::ostream& operator<<(std::ostream& out, const RunData& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RunData::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->runId);
          this->__isset.runId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->runDate);
          this->__isset.runDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->duration);
          this->__isset.duration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->resultCount);
          this->__isset.resultCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->runCmd);
          this->__isset.runCmd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->detectionStatusCount.clear();
            uint32_t _size41;
            ::apache::thrift::protocol::TType _ktype42;
            ::apache::thrift::protocol::TType _vtype43;
            xfer += iprot->readMapBegin(_ktype42, _vtype43, _size41);
            uint32_t _i45;
            for (_i45 = 0; _i45 < _size41; ++_i45)
            {
              DetectionStatus::type _key46;
              int32_t ecast48;
              xfer += iprot->readI32(ecast48);
              _key46 = (DetectionStatus::type)ecast48;
              int32_t& _val47 = this->detectionStatusCount[_key46];
              xfer += iprot->readI32(_val47);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.detectionStatusCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->versionTag);
          this->__isset.versionTag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->codeCheckerVersion);
          this->__isset.codeCheckerVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->analyzerStatistics.clear();
            uint32_t _size49;
            ::apache::thrift::protocol::TType _ktype50;
            ::apache::thrift::protocol::TType _vtype51;
            xfer += iprot->readMapBegin(_ktype50, _vtype51, _size49);
            uint32_t _i53;
            for (_i53 = 0; _i53 < _size49; ++_i53)
            {
              AnalyzerType _key54;
              xfer += iprot->readString(_key54);
              AnalyzerStatistics& _val55 = this->analyzerStatistics[_key54];
              xfer += _val55.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.analyzerStatistics = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RunData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RunData");

  xfer += oprot->writeFieldBegin("runId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->runId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("runDate", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->runDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("duration", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->duration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("resultCount", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->resultCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("runCmd", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->runCmd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("detectionStatusCount", ::apache::thrift::protocol::T_MAP, 7);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->detectionStatusCount.size()));
    std::map<DetectionStatus::type, int32_t> ::const_iterator _iter56;
    for (_iter56 = this->detectionStatusCount.begin(); _iter56 != this->detectionStatusCount.end(); ++_iter56)
    {
      xfer += oprot->writeI32((int32_t)_iter56->first);
      xfer += oprot->writeI32(_iter56->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("versionTag", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->versionTag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("codeCheckerVersion", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->codeCheckerVersion);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("analyzerStatistics", ::apache::thrift::protocol::T_MAP, 10);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->analyzerStatistics.size()));
    std::map<AnalyzerType, AnalyzerStatistics> ::const_iterator _iter57;
    for (_iter57 = this->analyzerStatistics.begin(); _iter57 != this->analyzerStatistics.end(); ++_iter57)
    {
      xfer += oprot->writeString(_iter57->first);
      xfer += _iter57->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RunData &a, RunData &b) {
  using ::std::swap;
  swap(a.runId, b.runId);
  swap(a.runDate, b.runDate);
  swap(a.name, b.name);
  swap(a.duration, b.duration);
  swap(a.resultCount, b.resultCount);
  swap(a.runCmd, b.runCmd);
  swap(a.detectionStatusCount, b.detectionStatusCount);
  swap(a.versionTag, b.versionTag);
  swap(a.codeCheckerVersion, b.codeCheckerVersion);
  swap(a.analyzerStatistics, b.analyzerStatistics);
  swap(a.__isset, b.__isset);
}

RunData::RunData(const RunData& other58) {
  runId = other58.runId;
  runDate = other58.runDate;
  name = other58.name;
  duration = other58.duration;
  resultCount = other58.resultCount;
  runCmd = other58.runCmd;
  detectionStatusCount = other58.detectionStatusCount;
  versionTag = other58.versionTag;
  codeCheckerVersion = other58.codeCheckerVersion;
  analyzerStatistics = other58.analyzerStatistics;
  __isset = other58.__isset;
}
RunData& RunData::operator=(const RunData& other59) {
  runId = other59.runId;
  runDate = other59.runDate;
  name = other59.name;
  duration = other59.duration;
  resultCount = other59.resultCount;
  runCmd = other59.runCmd;
  detectionStatusCount = other59.detectionStatusCount;
  versionTag = other59.versionTag;
  codeCheckerVersion = other59.codeCheckerVersion;
  analyzerStatistics = other59.analyzerStatistics;
  __isset = other59.__isset;
  return *this;
}
void RunData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RunData(";
  out << "runId=" << to_string(runId);
  out << ", " << "runDate=" << to_string(runDate);
  out << ", " << "name=" << to_string(name);
  out << ", " << "duration=" << to_string(duration);
  out << ", " << "resultCount=" << to_string(resultCount);
  out << ", " << "runCmd=" << to_string(runCmd);
  out << ", " << "detectionStatusCount=" << to_string(detectionStatusCount);
  out << ", " << "versionTag=" << to_string(versionTag);
  out << ", " << "codeCheckerVersion=" << to_string(codeCheckerVersion);
  out << ", " << "analyzerStatistics=" << to_string(analyzerStatistics);
  out << ")";
}


RunHistoryData::~RunHistoryData() throw() {
}


void RunHistoryData::__set_runId(const int64_t val) {
  this->runId = val;
}

void RunHistoryData::__set_runName(const std::string& val) {
  this->runName = val;
}

void RunHistoryData::__set_versionTag(const std::string& val) {
  this->versionTag = val;
}

void RunHistoryData::__set_user(const std::string& val) {
  this->user = val;
}

void RunHistoryData::__set_time(const std::string& val) {
  this->time = val;
}

void RunHistoryData::__set_id(const int64_t val) {
  this->id = val;
}

void RunHistoryData::__set_checkCommand(const std::string& val) {
  this->checkCommand = val;
}

void RunHistoryData::__set_codeCheckerVersion(const std::string& val) {
  this->codeCheckerVersion = val;
}

void RunHistoryData::__set_analyzerStatistics(const AnalyzerStatisticsData& val) {
  this->analyzerStatistics = val;
}
std::ostream& operator<<(std::ostream& out, const RunHistoryData& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RunHistoryData::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->runId);
          this->__isset.runId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->runName);
          this->__isset.runName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->versionTag);
          this->__isset.versionTag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user);
          this->__isset.user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->time);
          this->__isset.time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->checkCommand);
          this->__isset.checkCommand = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->codeCheckerVersion);
          this->__isset.codeCheckerVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->analyzerStatistics.clear();
            uint32_t _size60;
            ::apache::thrift::protocol::TType _ktype61;
            ::apache::thrift::protocol::TType _vtype62;
            xfer += iprot->readMapBegin(_ktype61, _vtype62, _size60);
            uint32_t _i64;
            for (_i64 = 0; _i64 < _size60; ++_i64)
            {
              AnalyzerType _key65;
              xfer += iprot->readString(_key65);
              AnalyzerStatistics& _val66 = this->analyzerStatistics[_key65];
              xfer += _val66.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.analyzerStatistics = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RunHistoryData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RunHistoryData");

  xfer += oprot->writeFieldBegin("runId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->runId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("runName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->runName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("versionTag", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->versionTag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->user);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("checkCommand", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->checkCommand);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("codeCheckerVersion", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->codeCheckerVersion);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("analyzerStatistics", ::apache::thrift::protocol::T_MAP, 9);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->analyzerStatistics.size()));
    std::map<AnalyzerType, AnalyzerStatistics> ::const_iterator _iter67;
    for (_iter67 = this->analyzerStatistics.begin(); _iter67 != this->analyzerStatistics.end(); ++_iter67)
    {
      xfer += oprot->writeString(_iter67->first);
      xfer += _iter67->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RunHistoryData &a, RunHistoryData &b) {
  using ::std::swap;
  swap(a.runId, b.runId);
  swap(a.runName, b.runName);
  swap(a.versionTag, b.versionTag);
  swap(a.user, b.user);
  swap(a.time, b.time);
  swap(a.id, b.id);
  swap(a.checkCommand, b.checkCommand);
  swap(a.codeCheckerVersion, b.codeCheckerVersion);
  swap(a.analyzerStatistics, b.analyzerStatistics);
  swap(a.__isset, b.__isset);
}

RunHistoryData::RunHistoryData(const RunHistoryData& other68) {
  runId = other68.runId;
  runName = other68.runName;
  versionTag = other68.versionTag;
  user = other68.user;
  time = other68.time;
  id = other68.id;
  checkCommand = other68.checkCommand;
  codeCheckerVersion = other68.codeCheckerVersion;
  analyzerStatistics = other68.analyzerStatistics;
  __isset = other68.__isset;
}
RunHistoryData& RunHistoryData::operator=(const RunHistoryData& other69) {
  runId = other69.runId;
  runName = other69.runName;
  versionTag = other69.versionTag;
  user = other69.user;
  time = other69.time;
  id = other69.id;
  checkCommand = other69.checkCommand;
  codeCheckerVersion = other69.codeCheckerVersion;
  analyzerStatistics = other69.analyzerStatistics;
  __isset = other69.__isset;
  return *this;
}
void RunHistoryData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RunHistoryData(";
  out << "runId=" << to_string(runId);
  out << ", " << "runName=" << to_string(runName);
  out << ", " << "versionTag=" << to_string(versionTag);
  out << ", " << "user=" << to_string(user);
  out << ", " << "time=" << to_string(time);
  out << ", " << "id=" << to_string(id);
  out << ", " << "checkCommand=" << to_string(checkCommand);
  out << ", " << "codeCheckerVersion=" << to_string(codeCheckerVersion);
  out << ", " << "analyzerStatistics=" << to_string(analyzerStatistics);
  out << ")";
}


RunHistoryFilter::~RunHistoryFilter() throw() {
}


void RunHistoryFilter::__set_tagNames(const std::vector<std::string> & val) {
  this->tagNames = val;
}
std::ostream& operator<<(std::ostream& out, const RunHistoryFilter& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RunHistoryFilter::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tagNames.clear();
            uint32_t _size70;
            ::apache::thrift::protocol::TType _etype73;
            xfer += iprot->readListBegin(_etype73, _size70);
            this->tagNames.resize(_size70);
            uint32_t _i74;
            for (_i74 = 0; _i74 < _size70; ++_i74)
            {
              xfer += iprot->readString(this->tagNames[_i74]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tagNames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RunHistoryFilter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RunHistoryFilter");

  xfer += oprot->writeFieldBegin("tagNames", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tagNames.size()));
    std::vector<std::string> ::const_iterator _iter75;
    for (_iter75 = this->tagNames.begin(); _iter75 != this->tagNames.end(); ++_iter75)
    {
      xfer += oprot->writeString((*_iter75));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RunHistoryFilter &a, RunHistoryFilter &b) {
  using ::std::swap;
  swap(a.tagNames, b.tagNames);
  swap(a.__isset, b.__isset);
}

RunHistoryFilter::RunHistoryFilter(const RunHistoryFilter& other76) {
  tagNames = other76.tagNames;
  __isset = other76.__isset;
}
RunHistoryFilter& RunHistoryFilter::operator=(const RunHistoryFilter& other77) {
  tagNames = other77.tagNames;
  __isset = other77.__isset;
  return *this;
}
void RunHistoryFilter::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RunHistoryFilter(";
  out << "tagNames=" << to_string(tagNames);
  out << ")";
}


RunTagCount::~RunTagCount() throw() {
}


void RunTagCount::__set_time(const std::string& val) {
  this->time = val;
}

void RunTagCount::__set_name(const std::string& val) {
  this->name = val;
}

void RunTagCount::__set_count(const int64_t val) {
  this->count = val;
}

void RunTagCount::__set_id(const int64_t val) {
  this->id = val;
}

void RunTagCount::__set_runName(const std::string& val) {
  this->runName = val;
}
std::ostream& operator<<(std::ostream& out, const RunTagCount& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RunTagCount::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->time);
          this->__isset.time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->runName);
          this->__isset.runName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RunTagCount::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RunTagCount");

  xfer += oprot->writeFieldBegin("time", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("runName", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->runName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RunTagCount &a, RunTagCount &b) {
  using ::std::swap;
  swap(a.time, b.time);
  swap(a.name, b.name);
  swap(a.count, b.count);
  swap(a.id, b.id);
  swap(a.runName, b.runName);
  swap(a.__isset, b.__isset);
}

RunTagCount::RunTagCount(const RunTagCount& other78) {
  time = other78.time;
  name = other78.name;
  count = other78.count;
  id = other78.id;
  runName = other78.runName;
  __isset = other78.__isset;
}
RunTagCount& RunTagCount::operator=(const RunTagCount& other79) {
  time = other79.time;
  name = other79.name;
  count = other79.count;
  id = other79.id;
  runName = other79.runName;
  __isset = other79.__isset;
  return *this;
}
void RunTagCount::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RunTagCount(";
  out << "time=" << to_string(time);
  out << ", " << "name=" << to_string(name);
  out << ", " << "count=" << to_string(count);
  out << ", " << "id=" << to_string(id);
  out << ", " << "runName=" << to_string(runName);
  out << ")";
}


ReviewData::~ReviewData() throw() {
}


void ReviewData::__set_status(const ReviewStatus::type val) {
  this->status = val;
}

void ReviewData::__set_comment(const std::string& val) {
  this->comment = val;
}

void ReviewData::__set_author(const std::string& val) {
  this->author = val;
}

void ReviewData::__set_date(const std::string& val) {
  this->date = val;
}
std::ostream& operator<<(std::ostream& out, const ReviewData& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ReviewData::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast80;
          xfer += iprot->readI32(ecast80);
          this->status = (ReviewStatus::type)ecast80;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->author);
          this->__isset.author = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->date);
          this->__isset.date = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReviewData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ReviewData");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("author", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->author);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("date", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->date);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReviewData &a, ReviewData &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.comment, b.comment);
  swap(a.author, b.author);
  swap(a.date, b.date);
  swap(a.__isset, b.__isset);
}

ReviewData::ReviewData(const ReviewData& other81) {
  status = other81.status;
  comment = other81.comment;
  author = other81.author;
  date = other81.date;
  __isset = other81.__isset;
}
ReviewData& ReviewData::operator=(const ReviewData& other82) {
  status = other82.status;
  comment = other82.comment;
  author = other82.author;
  date = other82.date;
  __isset = other82.__isset;
  return *this;
}
void ReviewData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ReviewData(";
  out << "status=" << to_string(status);
  out << ", " << "comment=" << to_string(comment);
  out << ", " << "author=" << to_string(author);
  out << ", " << "date=" << to_string(date);
  out << ")";
}


ReportData::~ReportData() throw() {
}


void ReportData::__set_runId(const int64_t val) {
  this->runId = val;
}

void ReportData::__set_checkerId(const std::string& val) {
  this->checkerId = val;
}

void ReportData::__set_bugHash(const std::string& val) {
  this->bugHash = val;
}

void ReportData::__set_checkedFile(const std::string& val) {
  this->checkedFile = val;
}

void ReportData::__set_checkerMsg(const std::string& val) {
  this->checkerMsg = val;
}

void ReportData::__set_reportId(const int64_t val) {
  this->reportId = val;
}

void ReportData::__set_fileId(const int64_t val) {
  this->fileId = val;
}

void ReportData::__set_line(const int64_t val) {
  this->line = val;
}

void ReportData::__set_column(const int64_t val) {
  this->column = val;
}

void ReportData::__set_severity(const Severity::type val) {
  this->severity = val;
}

void ReportData::__set_reviewData(const ReviewData& val) {
  this->reviewData = val;
}

void ReportData::__set_detectionStatus(const DetectionStatus::type val) {
  this->detectionStatus = val;
}

void ReportData::__set_detectedAt(const std::string& val) {
  this->detectedAt = val;
}

void ReportData::__set_fixedAt(const std::string& val) {
  this->fixedAt = val;
}

void ReportData::__set_bugPathLength(const int64_t val) {
  this->bugPathLength = val;
}

void ReportData::__set_details(const ReportDetails& val) {
  this->details = val;
__isset.details = true;
}
std::ostream& operator<<(std::ostream& out, const ReportData& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ReportData::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->runId);
          this->__isset.runId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->checkerId);
          this->__isset.checkerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bugHash);
          this->__isset.bugHash = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->checkedFile);
          this->__isset.checkedFile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->checkerMsg);
          this->__isset.checkerMsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->reportId);
          this->__isset.reportId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fileId);
          this->__isset.fileId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->line);
          this->__isset.line = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->column);
          this->__isset.column = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast83;
          xfer += iprot->readI32(ecast83);
          this->severity = (Severity::type)ecast83;
          this->__isset.severity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->reviewData.read(iprot);
          this->__isset.reviewData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast84;
          xfer += iprot->readI32(ecast84);
          this->detectionStatus = (DetectionStatus::type)ecast84;
          this->__isset.detectionStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->detectedAt);
          this->__isset.detectedAt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fixedAt);
          this->__isset.fixedAt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bugPathLength);
          this->__isset.bugPathLength = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->details.read(iprot);
          this->__isset.details = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReportData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ReportData");

  xfer += oprot->writeFieldBegin("runId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->runId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("checkerId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->checkerId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bugHash", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->bugHash);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("checkedFile", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->checkedFile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("checkerMsg", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->checkerMsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reportId", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->reportId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fileId", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->fileId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("line", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->line);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->column);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("severity", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32((int32_t)this->severity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reviewData", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->reviewData.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("detectionStatus", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32((int32_t)this->detectionStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("detectedAt", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->detectedAt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fixedAt", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->fixedAt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bugPathLength", ::apache::thrift::protocol::T_I64, 15);
  xfer += oprot->writeI64(this->bugPathLength);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.details) {
    xfer += oprot->writeFieldBegin("details", ::apache::thrift::protocol::T_STRUCT, 16);
    xfer += this->details.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReportData &a, ReportData &b) {
  using ::std::swap;
  swap(a.runId, b.runId);
  swap(a.checkerId, b.checkerId);
  swap(a.bugHash, b.bugHash);
  swap(a.checkedFile, b.checkedFile);
  swap(a.checkerMsg, b.checkerMsg);
  swap(a.reportId, b.reportId);
  swap(a.fileId, b.fileId);
  swap(a.line, b.line);
  swap(a.column, b.column);
  swap(a.severity, b.severity);
  swap(a.reviewData, b.reviewData);
  swap(a.detectionStatus, b.detectionStatus);
  swap(a.detectedAt, b.detectedAt);
  swap(a.fixedAt, b.fixedAt);
  swap(a.bugPathLength, b.bugPathLength);
  swap(a.details, b.details);
  swap(a.__isset, b.__isset);
}

ReportData::ReportData(const ReportData& other85) {
  runId = other85.runId;
  checkerId = other85.checkerId;
  bugHash = other85.bugHash;
  checkedFile = other85.checkedFile;
  checkerMsg = other85.checkerMsg;
  reportId = other85.reportId;
  fileId = other85.fileId;
  line = other85.line;
  column = other85.column;
  severity = other85.severity;
  reviewData = other85.reviewData;
  detectionStatus = other85.detectionStatus;
  detectedAt = other85.detectedAt;
  fixedAt = other85.fixedAt;
  bugPathLength = other85.bugPathLength;
  details = other85.details;
  __isset = other85.__isset;
}
ReportData& ReportData::operator=(const ReportData& other86) {
  runId = other86.runId;
  checkerId = other86.checkerId;
  bugHash = other86.bugHash;
  checkedFile = other86.checkedFile;
  checkerMsg = other86.checkerMsg;
  reportId = other86.reportId;
  fileId = other86.fileId;
  line = other86.line;
  column = other86.column;
  severity = other86.severity;
  reviewData = other86.reviewData;
  detectionStatus = other86.detectionStatus;
  detectedAt = other86.detectedAt;
  fixedAt = other86.fixedAt;
  bugPathLength = other86.bugPathLength;
  details = other86.details;
  __isset = other86.__isset;
  return *this;
}
void ReportData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ReportData(";
  out << "runId=" << to_string(runId);
  out << ", " << "checkerId=" << to_string(checkerId);
  out << ", " << "bugHash=" << to_string(bugHash);
  out << ", " << "checkedFile=" << to_string(checkedFile);
  out << ", " << "checkerMsg=" << to_string(checkerMsg);
  out << ", " << "reportId=" << to_string(reportId);
  out << ", " << "fileId=" << to_string(fileId);
  out << ", " << "line=" << to_string(line);
  out << ", " << "column=" << to_string(column);
  out << ", " << "severity=" << to_string(severity);
  out << ", " << "reviewData=" << to_string(reviewData);
  out << ", " << "detectionStatus=" << to_string(detectionStatus);
  out << ", " << "detectedAt=" << to_string(detectedAt);
  out << ", " << "fixedAt=" << to_string(fixedAt);
  out << ", " << "bugPathLength=" << to_string(bugPathLength);
  out << ", " << "details="; (__isset.details ? (out << to_string(details)) : (out << "<null>"));
  out << ")";
}


BugPathLengthRange::~BugPathLengthRange() throw() {
}


void BugPathLengthRange::__set_min(const int64_t val) {
  this->min = val;
}

void BugPathLengthRange::__set_max(const int64_t val) {
  this->max = val;
}
std::ostream& operator<<(std::ostream& out, const BugPathLengthRange& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BugPathLengthRange::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->min);
          this->__isset.min = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->max);
          this->__isset.max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BugPathLengthRange::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BugPathLengthRange");

  xfer += oprot->writeFieldBegin("min", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->min);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BugPathLengthRange &a, BugPathLengthRange &b) {
  using ::std::swap;
  swap(a.min, b.min);
  swap(a.max, b.max);
  swap(a.__isset, b.__isset);
}

BugPathLengthRange::BugPathLengthRange(const BugPathLengthRange& other87) {
  min = other87.min;
  max = other87.max;
  __isset = other87.__isset;
}
BugPathLengthRange& BugPathLengthRange::operator=(const BugPathLengthRange& other88) {
  min = other88.min;
  max = other88.max;
  __isset = other88.__isset;
  return *this;
}
void BugPathLengthRange::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BugPathLengthRange(";
  out << "min=" << to_string(min);
  out << ", " << "max=" << to_string(max);
  out << ")";
}


ReportFilter::~ReportFilter() throw() {
}


void ReportFilter::__set_filepath(const std::vector<std::string> & val) {
  this->filepath = val;
}

void ReportFilter::__set_checkerMsg(const std::vector<std::string> & val) {
  this->checkerMsg = val;
}

void ReportFilter::__set_checkerName(const std::vector<std::string> & val) {
  this->checkerName = val;
}

void ReportFilter::__set_reportHash(const std::vector<std::string> & val) {
  this->reportHash = val;
}

void ReportFilter::__set_severity(const std::vector<Severity::type> & val) {
  this->severity = val;
}

void ReportFilter::__set_reviewStatus(const std::vector<ReviewStatus::type> & val) {
  this->reviewStatus = val;
}

void ReportFilter::__set_detectionStatus(const std::vector<DetectionStatus::type> & val) {
  this->detectionStatus = val;
}

void ReportFilter::__set_runHistoryTag(const std::vector<std::string> & val) {
  this->runHistoryTag = val;
}

void ReportFilter::__set_firstDetectionDate(const int64_t val) {
  this->firstDetectionDate = val;
__isset.firstDetectionDate = true;
}

void ReportFilter::__set_fixDate(const int64_t val) {
  this->fixDate = val;
__isset.fixDate = true;
}

void ReportFilter::__set_isUnique(const bool val) {
  this->isUnique = val;
__isset.isUnique = true;
}

void ReportFilter::__set_runName(const std::vector<std::string> & val) {
  this->runName = val;
}

void ReportFilter::__set_runTag(const std::vector<int64_t> & val) {
  this->runTag = val;
}

void ReportFilter::__set_componentNames(const std::vector<std::string> & val) {
  this->componentNames = val;
}

void ReportFilter::__set_bugPathLength(const BugPathLengthRange& val) {
  this->bugPathLength = val;
__isset.bugPathLength = true;
}
std::ostream& operator<<(std::ostream& out, const ReportFilter& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ReportFilter::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->filepath.clear();
            uint32_t _size89;
            ::apache::thrift::protocol::TType _etype92;
            xfer += iprot->readListBegin(_etype92, _size89);
            this->filepath.resize(_size89);
            uint32_t _i93;
            for (_i93 = 0; _i93 < _size89; ++_i93)
            {
              xfer += iprot->readString(this->filepath[_i93]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.filepath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->checkerMsg.clear();
            uint32_t _size94;
            ::apache::thrift::protocol::TType _etype97;
            xfer += iprot->readListBegin(_etype97, _size94);
            this->checkerMsg.resize(_size94);
            uint32_t _i98;
            for (_i98 = 0; _i98 < _size94; ++_i98)
            {
              xfer += iprot->readString(this->checkerMsg[_i98]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.checkerMsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->checkerName.clear();
            uint32_t _size99;
            ::apache::thrift::protocol::TType _etype102;
            xfer += iprot->readListBegin(_etype102, _size99);
            this->checkerName.resize(_size99);
            uint32_t _i103;
            for (_i103 = 0; _i103 < _size99; ++_i103)
            {
              xfer += iprot->readString(this->checkerName[_i103]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.checkerName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->reportHash.clear();
            uint32_t _size104;
            ::apache::thrift::protocol::TType _etype107;
            xfer += iprot->readListBegin(_etype107, _size104);
            this->reportHash.resize(_size104);
            uint32_t _i108;
            for (_i108 = 0; _i108 < _size104; ++_i108)
            {
              xfer += iprot->readString(this->reportHash[_i108]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.reportHash = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->severity.clear();
            uint32_t _size109;
            ::apache::thrift::protocol::TType _etype112;
            xfer += iprot->readListBegin(_etype112, _size109);
            this->severity.resize(_size109);
            uint32_t _i113;
            for (_i113 = 0; _i113 < _size109; ++_i113)
            {
              int32_t ecast114;
              xfer += iprot->readI32(ecast114);
              this->severity[_i113] = (Severity::type)ecast114;
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.severity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->reviewStatus.clear();
            uint32_t _size115;
            ::apache::thrift::protocol::TType _etype118;
            xfer += iprot->readListBegin(_etype118, _size115);
            this->reviewStatus.resize(_size115);
            uint32_t _i119;
            for (_i119 = 0; _i119 < _size115; ++_i119)
            {
              int32_t ecast120;
              xfer += iprot->readI32(ecast120);
              this->reviewStatus[_i119] = (ReviewStatus::type)ecast120;
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.reviewStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->detectionStatus.clear();
            uint32_t _size121;
            ::apache::thrift::protocol::TType _etype124;
            xfer += iprot->readListBegin(_etype124, _size121);
            this->detectionStatus.resize(_size121);
            uint32_t _i125;
            for (_i125 = 0; _i125 < _size121; ++_i125)
            {
              int32_t ecast126;
              xfer += iprot->readI32(ecast126);
              this->detectionStatus[_i125] = (DetectionStatus::type)ecast126;
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.detectionStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->runHistoryTag.clear();
            uint32_t _size127;
            ::apache::thrift::protocol::TType _etype130;
            xfer += iprot->readListBegin(_etype130, _size127);
            this->runHistoryTag.resize(_size127);
            uint32_t _i131;
            for (_i131 = 0; _i131 < _size127; ++_i131)
            {
              xfer += iprot->readString(this->runHistoryTag[_i131]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.runHistoryTag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->firstDetectionDate);
          this->__isset.firstDetectionDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fixDate);
          this->__isset.fixDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isUnique);
          this->__isset.isUnique = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->runName.clear();
            uint32_t _size132;
            ::apache::thrift::protocol::TType _etype135;
            xfer += iprot->readListBegin(_etype135, _size132);
            this->runName.resize(_size132);
            uint32_t _i136;
            for (_i136 = 0; _i136 < _size132; ++_i136)
            {
              xfer += iprot->readString(this->runName[_i136]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.runName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->runTag.clear();
            uint32_t _size137;
            ::apache::thrift::protocol::TType _etype140;
            xfer += iprot->readListBegin(_etype140, _size137);
            this->runTag.resize(_size137);
            uint32_t _i141;
            for (_i141 = 0; _i141 < _size137; ++_i141)
            {
              xfer += iprot->readI64(this->runTag[_i141]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.runTag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->componentNames.clear();
            uint32_t _size142;
            ::apache::thrift::protocol::TType _etype145;
            xfer += iprot->readListBegin(_etype145, _size142);
            this->componentNames.resize(_size142);
            uint32_t _i146;
            for (_i146 = 0; _i146 < _size142; ++_i146)
            {
              xfer += iprot->readString(this->componentNames[_i146]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.componentNames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->bugPathLength.read(iprot);
          this->__isset.bugPathLength = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReportFilter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ReportFilter");

  xfer += oprot->writeFieldBegin("filepath", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->filepath.size()));
    std::vector<std::string> ::const_iterator _iter147;
    for (_iter147 = this->filepath.begin(); _iter147 != this->filepath.end(); ++_iter147)
    {
      xfer += oprot->writeString((*_iter147));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("checkerMsg", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->checkerMsg.size()));
    std::vector<std::string> ::const_iterator _iter148;
    for (_iter148 = this->checkerMsg.begin(); _iter148 != this->checkerMsg.end(); ++_iter148)
    {
      xfer += oprot->writeString((*_iter148));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("checkerName", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->checkerName.size()));
    std::vector<std::string> ::const_iterator _iter149;
    for (_iter149 = this->checkerName.begin(); _iter149 != this->checkerName.end(); ++_iter149)
    {
      xfer += oprot->writeString((*_iter149));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reportHash", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->reportHash.size()));
    std::vector<std::string> ::const_iterator _iter150;
    for (_iter150 = this->reportHash.begin(); _iter150 != this->reportHash.end(); ++_iter150)
    {
      xfer += oprot->writeString((*_iter150));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("severity", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->severity.size()));
    std::vector<Severity::type> ::const_iterator _iter151;
    for (_iter151 = this->severity.begin(); _iter151 != this->severity.end(); ++_iter151)
    {
      xfer += oprot->writeI32((int32_t)(*_iter151));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reviewStatus", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->reviewStatus.size()));
    std::vector<ReviewStatus::type> ::const_iterator _iter152;
    for (_iter152 = this->reviewStatus.begin(); _iter152 != this->reviewStatus.end(); ++_iter152)
    {
      xfer += oprot->writeI32((int32_t)(*_iter152));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("detectionStatus", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->detectionStatus.size()));
    std::vector<DetectionStatus::type> ::const_iterator _iter153;
    for (_iter153 = this->detectionStatus.begin(); _iter153 != this->detectionStatus.end(); ++_iter153)
    {
      xfer += oprot->writeI32((int32_t)(*_iter153));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("runHistoryTag", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->runHistoryTag.size()));
    std::vector<std::string> ::const_iterator _iter154;
    for (_iter154 = this->runHistoryTag.begin(); _iter154 != this->runHistoryTag.end(); ++_iter154)
    {
      xfer += oprot->writeString((*_iter154));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.firstDetectionDate) {
    xfer += oprot->writeFieldBegin("firstDetectionDate", ::apache::thrift::protocol::T_I64, 9);
    xfer += oprot->writeI64(this->firstDetectionDate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fixDate) {
    xfer += oprot->writeFieldBegin("fixDate", ::apache::thrift::protocol::T_I64, 10);
    xfer += oprot->writeI64(this->fixDate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isUnique) {
    xfer += oprot->writeFieldBegin("isUnique", ::apache::thrift::protocol::T_BOOL, 11);
    xfer += oprot->writeBool(this->isUnique);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("runName", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->runName.size()));
    std::vector<std::string> ::const_iterator _iter155;
    for (_iter155 = this->runName.begin(); _iter155 != this->runName.end(); ++_iter155)
    {
      xfer += oprot->writeString((*_iter155));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("runTag", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->runTag.size()));
    std::vector<int64_t> ::const_iterator _iter156;
    for (_iter156 = this->runTag.begin(); _iter156 != this->runTag.end(); ++_iter156)
    {
      xfer += oprot->writeI64((*_iter156));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("componentNames", ::apache::thrift::protocol::T_LIST, 14);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->componentNames.size()));
    std::vector<std::string> ::const_iterator _iter157;
    for (_iter157 = this->componentNames.begin(); _iter157 != this->componentNames.end(); ++_iter157)
    {
      xfer += oprot->writeString((*_iter157));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.bugPathLength) {
    xfer += oprot->writeFieldBegin("bugPathLength", ::apache::thrift::protocol::T_STRUCT, 15);
    xfer += this->bugPathLength.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReportFilter &a, ReportFilter &b) {
  using ::std::swap;
  swap(a.filepath, b.filepath);
  swap(a.checkerMsg, b.checkerMsg);
  swap(a.checkerName, b.checkerName);
  swap(a.reportHash, b.reportHash);
  swap(a.severity, b.severity);
  swap(a.reviewStatus, b.reviewStatus);
  swap(a.detectionStatus, b.detectionStatus);
  swap(a.runHistoryTag, b.runHistoryTag);
  swap(a.firstDetectionDate, b.firstDetectionDate);
  swap(a.fixDate, b.fixDate);
  swap(a.isUnique, b.isUnique);
  swap(a.runName, b.runName);
  swap(a.runTag, b.runTag);
  swap(a.componentNames, b.componentNames);
  swap(a.bugPathLength, b.bugPathLength);
  swap(a.__isset, b.__isset);
}

ReportFilter::ReportFilter(const ReportFilter& other158) {
  filepath = other158.filepath;
  checkerMsg = other158.checkerMsg;
  checkerName = other158.checkerName;
  reportHash = other158.reportHash;
  severity = other158.severity;
  reviewStatus = other158.reviewStatus;
  detectionStatus = other158.detectionStatus;
  runHistoryTag = other158.runHistoryTag;
  firstDetectionDate = other158.firstDetectionDate;
  fixDate = other158.fixDate;
  isUnique = other158.isUnique;
  runName = other158.runName;
  runTag = other158.runTag;
  componentNames = other158.componentNames;
  bugPathLength = other158.bugPathLength;
  __isset = other158.__isset;
}
ReportFilter& ReportFilter::operator=(const ReportFilter& other159) {
  filepath = other159.filepath;
  checkerMsg = other159.checkerMsg;
  checkerName = other159.checkerName;
  reportHash = other159.reportHash;
  severity = other159.severity;
  reviewStatus = other159.reviewStatus;
  detectionStatus = other159.detectionStatus;
  runHistoryTag = other159.runHistoryTag;
  firstDetectionDate = other159.firstDetectionDate;
  fixDate = other159.fixDate;
  isUnique = other159.isUnique;
  runName = other159.runName;
  runTag = other159.runTag;
  componentNames = other159.componentNames;
  bugPathLength = other159.bugPathLength;
  __isset = other159.__isset;
  return *this;
}
void ReportFilter::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ReportFilter(";
  out << "filepath=" << to_string(filepath);
  out << ", " << "checkerMsg=" << to_string(checkerMsg);
  out << ", " << "checkerName=" << to_string(checkerName);
  out << ", " << "reportHash=" << to_string(reportHash);
  out << ", " << "severity=" << to_string(severity);
  out << ", " << "reviewStatus=" << to_string(reviewStatus);
  out << ", " << "detectionStatus=" << to_string(detectionStatus);
  out << ", " << "runHistoryTag=" << to_string(runHistoryTag);
  out << ", " << "firstDetectionDate="; (__isset.firstDetectionDate ? (out << to_string(firstDetectionDate)) : (out << "<null>"));
  out << ", " << "fixDate="; (__isset.fixDate ? (out << to_string(fixDate)) : (out << "<null>"));
  out << ", " << "isUnique="; (__isset.isUnique ? (out << to_string(isUnique)) : (out << "<null>"));
  out << ", " << "runName=" << to_string(runName);
  out << ", " << "runTag=" << to_string(runTag);
  out << ", " << "componentNames=" << to_string(componentNames);
  out << ", " << "bugPathLength="; (__isset.bugPathLength ? (out << to_string(bugPathLength)) : (out << "<null>"));
  out << ")";
}


RunReportCount::~RunReportCount() throw() {
}


void RunReportCount::__set_runId(const int64_t val) {
  this->runId = val;
}

void RunReportCount::__set_name(const std::string& val) {
  this->name = val;
}

void RunReportCount::__set_reportCount(const int64_t val) {
  this->reportCount = val;
}
std::ostream& operator<<(std::ostream& out, const RunReportCount& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RunReportCount::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->runId);
          this->__isset.runId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->reportCount);
          this->__isset.reportCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RunReportCount::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RunReportCount");

  xfer += oprot->writeFieldBegin("runId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->runId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reportCount", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->reportCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RunReportCount &a, RunReportCount &b) {
  using ::std::swap;
  swap(a.runId, b.runId);
  swap(a.name, b.name);
  swap(a.reportCount, b.reportCount);
  swap(a.__isset, b.__isset);
}

RunReportCount::RunReportCount(const RunReportCount& other160) {
  runId = other160.runId;
  name = other160.name;
  reportCount = other160.reportCount;
  __isset = other160.__isset;
}
RunReportCount& RunReportCount::operator=(const RunReportCount& other161) {
  runId = other161.runId;
  name = other161.name;
  reportCount = other161.reportCount;
  __isset = other161.__isset;
  return *this;
}
void RunReportCount::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RunReportCount(";
  out << "runId=" << to_string(runId);
  out << ", " << "name=" << to_string(name);
  out << ", " << "reportCount=" << to_string(reportCount);
  out << ")";
}


CheckerCount::~CheckerCount() throw() {
}


void CheckerCount::__set_name(const std::string& val) {
  this->name = val;
}

void CheckerCount::__set_severity(const Severity::type val) {
  this->severity = val;
}

void CheckerCount::__set_count(const int64_t val) {
  this->count = val;
}
std::ostream& operator<<(std::ostream& out, const CheckerCount& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CheckerCount::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast162;
          xfer += iprot->readI32(ecast162);
          this->severity = (Severity::type)ecast162;
          this->__isset.severity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CheckerCount::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CheckerCount");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("severity", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->severity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CheckerCount &a, CheckerCount &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.severity, b.severity);
  swap(a.count, b.count);
  swap(a.__isset, b.__isset);
}

CheckerCount::CheckerCount(const CheckerCount& other163) {
  name = other163.name;
  severity = other163.severity;
  count = other163.count;
  __isset = other163.__isset;
}
CheckerCount& CheckerCount::operator=(const CheckerCount& other164) {
  name = other164.name;
  severity = other164.severity;
  count = other164.count;
  __isset = other164.__isset;
  return *this;
}
void CheckerCount::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CheckerCount(";
  out << "name=" << to_string(name);
  out << ", " << "severity=" << to_string(severity);
  out << ", " << "count=" << to_string(count);
  out << ")";
}


CommentData::~CommentData() throw() {
}


void CommentData::__set_id(const int64_t val) {
  this->id = val;
}

void CommentData::__set_author(const std::string& val) {
  this->author = val;
}

void CommentData::__set_message(const std::string& val) {
  this->message = val;
}

void CommentData::__set_createdAt(const std::string& val) {
  this->createdAt = val;
}
std::ostream& operator<<(std::ostream& out, const CommentData& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CommentData::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->author);
          this->__isset.author = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->createdAt);
          this->__isset.createdAt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CommentData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CommentData");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("author", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->author);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createdAt", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->createdAt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CommentData &a, CommentData &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.author, b.author);
  swap(a.message, b.message);
  swap(a.createdAt, b.createdAt);
  swap(a.__isset, b.__isset);
}

CommentData::CommentData(const CommentData& other165) {
  id = other165.id;
  author = other165.author;
  message = other165.message;
  createdAt = other165.createdAt;
  __isset = other165.__isset;
}
CommentData& CommentData::operator=(const CommentData& other166) {
  id = other166.id;
  author = other166.author;
  message = other166.message;
  createdAt = other166.createdAt;
  __isset = other166.__isset;
  return *this;
}
void CommentData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CommentData(";
  out << "id=" << to_string(id);
  out << ", " << "author=" << to_string(author);
  out << ", " << "message=" << to_string(message);
  out << ", " << "createdAt=" << to_string(createdAt);
  out << ")";
}


RunFilter::~RunFilter() throw() {
}


void RunFilter::__set_ids(const std::vector<int64_t> & val) {
  this->ids = val;
}

void RunFilter::__set_names(const std::vector<std::string> & val) {
  this->names = val;
}

void RunFilter::__set_exactMatch(const bool val) {
  this->exactMatch = val;
}
std::ostream& operator<<(std::ostream& out, const RunFilter& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RunFilter::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ids.clear();
            uint32_t _size167;
            ::apache::thrift::protocol::TType _etype170;
            xfer += iprot->readListBegin(_etype170, _size167);
            this->ids.resize(_size167);
            uint32_t _i171;
            for (_i171 = 0; _i171 < _size167; ++_i171)
            {
              xfer += iprot->readI64(this->ids[_i171]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->names.clear();
            uint32_t _size172;
            ::apache::thrift::protocol::TType _etype175;
            xfer += iprot->readListBegin(_etype175, _size172);
            this->names.resize(_size172);
            uint32_t _i176;
            for (_i176 = 0; _i176 < _size172; ++_i176)
            {
              xfer += iprot->readString(this->names[_i176]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.names = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->exactMatch);
          this->__isset.exactMatch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RunFilter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RunFilter");

  xfer += oprot->writeFieldBegin("ids", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->ids.size()));
    std::vector<int64_t> ::const_iterator _iter177;
    for (_iter177 = this->ids.begin(); _iter177 != this->ids.end(); ++_iter177)
    {
      xfer += oprot->writeI64((*_iter177));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("names", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->names.size()));
    std::vector<std::string> ::const_iterator _iter178;
    for (_iter178 = this->names.begin(); _iter178 != this->names.end(); ++_iter178)
    {
      xfer += oprot->writeString((*_iter178));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("exactMatch", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->exactMatch);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RunFilter &a, RunFilter &b) {
  using ::std::swap;
  swap(a.ids, b.ids);
  swap(a.names, b.names);
  swap(a.exactMatch, b.exactMatch);
  swap(a.__isset, b.__isset);
}

RunFilter::RunFilter(const RunFilter& other179) {
  ids = other179.ids;
  names = other179.names;
  exactMatch = other179.exactMatch;
  __isset = other179.__isset;
}
RunFilter& RunFilter::operator=(const RunFilter& other180) {
  ids = other180.ids;
  names = other180.names;
  exactMatch = other180.exactMatch;
  __isset = other180.__isset;
  return *this;
}
void RunFilter::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RunFilter(";
  out << "ids=" << to_string(ids);
  out << ", " << "names=" << to_string(names);
  out << ", " << "exactMatch=" << to_string(exactMatch);
  out << ")";
}


CompareData::~CompareData() throw() {
}


void CompareData::__set_runIds(const std::vector<int64_t> & val) {
  this->runIds = val;
}

void CompareData::__set_diffType(const DiffType::type val) {
  this->diffType = val;
}

void CompareData::__set_runTag(const std::vector<int64_t> & val) {
  this->runTag = val;
}
std::ostream& operator<<(std::ostream& out, const CompareData& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CompareData::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->runIds.clear();
            uint32_t _size181;
            ::apache::thrift::protocol::TType _etype184;
            xfer += iprot->readListBegin(_etype184, _size181);
            this->runIds.resize(_size181);
            uint32_t _i185;
            for (_i185 = 0; _i185 < _size181; ++_i185)
            {
              xfer += iprot->readI64(this->runIds[_i185]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.runIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast186;
          xfer += iprot->readI32(ecast186);
          this->diffType = (DiffType::type)ecast186;
          this->__isset.diffType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->runTag.clear();
            uint32_t _size187;
            ::apache::thrift::protocol::TType _etype190;
            xfer += iprot->readListBegin(_etype190, _size187);
            this->runTag.resize(_size187);
            uint32_t _i191;
            for (_i191 = 0; _i191 < _size187; ++_i191)
            {
              xfer += iprot->readI64(this->runTag[_i191]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.runTag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CompareData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CompareData");

  xfer += oprot->writeFieldBegin("runIds", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->runIds.size()));
    std::vector<int64_t> ::const_iterator _iter192;
    for (_iter192 = this->runIds.begin(); _iter192 != this->runIds.end(); ++_iter192)
    {
      xfer += oprot->writeI64((*_iter192));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("diffType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->diffType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("runTag", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->runTag.size()));
    std::vector<int64_t> ::const_iterator _iter193;
    for (_iter193 = this->runTag.begin(); _iter193 != this->runTag.end(); ++_iter193)
    {
      xfer += oprot->writeI64((*_iter193));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CompareData &a, CompareData &b) {
  using ::std::swap;
  swap(a.runIds, b.runIds);
  swap(a.diffType, b.diffType);
  swap(a.runTag, b.runTag);
  swap(a.__isset, b.__isset);
}

CompareData::CompareData(const CompareData& other194) {
  runIds = other194.runIds;
  diffType = other194.diffType;
  runTag = other194.runTag;
  __isset = other194.__isset;
}
CompareData& CompareData::operator=(const CompareData& other195) {
  runIds = other195.runIds;
  diffType = other195.diffType;
  runTag = other195.runTag;
  __isset = other195.__isset;
  return *this;
}
void CompareData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CompareData(";
  out << "runIds=" << to_string(runIds);
  out << ", " << "diffType=" << to_string(diffType);
  out << ", " << "runTag=" << to_string(runTag);
  out << ")";
}


LinesInFilesRequested::~LinesInFilesRequested() throw() {
}


void LinesInFilesRequested::__set_fileId(const int64_t val) {
  this->fileId = val;
}

void LinesInFilesRequested::__set_lines(const std::set<int64_t> & val) {
  this->lines = val;
}
std::ostream& operator<<(std::ostream& out, const LinesInFilesRequested& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LinesInFilesRequested::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fileId);
          this->__isset.fileId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->lines.clear();
            uint32_t _size196;
            ::apache::thrift::protocol::TType _etype199;
            xfer += iprot->readSetBegin(_etype199, _size196);
            uint32_t _i200;
            for (_i200 = 0; _i200 < _size196; ++_i200)
            {
              int64_t _elem201;
              xfer += iprot->readI64(_elem201);
              this->lines.insert(_elem201);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.lines = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LinesInFilesRequested::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LinesInFilesRequested");

  xfer += oprot->writeFieldBegin("fileId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->fileId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lines", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->lines.size()));
    std::set<int64_t> ::const_iterator _iter202;
    for (_iter202 = this->lines.begin(); _iter202 != this->lines.end(); ++_iter202)
    {
      xfer += oprot->writeI64((*_iter202));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LinesInFilesRequested &a, LinesInFilesRequested &b) {
  using ::std::swap;
  swap(a.fileId, b.fileId);
  swap(a.lines, b.lines);
  swap(a.__isset, b.__isset);
}

LinesInFilesRequested::LinesInFilesRequested(const LinesInFilesRequested& other203) {
  fileId = other203.fileId;
  lines = other203.lines;
  __isset = other203.__isset;
}
LinesInFilesRequested& LinesInFilesRequested::operator=(const LinesInFilesRequested& other204) {
  fileId = other204.fileId;
  lines = other204.lines;
  __isset = other204.__isset;
  return *this;
}
void LinesInFilesRequested::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LinesInFilesRequested(";
  out << "fileId=" << to_string(fileId);
  out << ", " << "lines=" << to_string(lines);
  out << ")";
}


SourceComponentData::~SourceComponentData() throw() {
}


void SourceComponentData::__set_name(const std::string& val) {
  this->name = val;
}

void SourceComponentData::__set_value(const std::string& val) {
  this->value = val;
}

void SourceComponentData::__set_description(const std::string& val) {
  this->description = val;
}
std::ostream& operator<<(std::ostream& out, const SourceComponentData& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SourceComponentData::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SourceComponentData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SourceComponentData");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SourceComponentData &a, SourceComponentData &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.value, b.value);
  swap(a.description, b.description);
  swap(a.__isset, b.__isset);
}

SourceComponentData::SourceComponentData(const SourceComponentData& other205) {
  name = other205.name;
  value = other205.value;
  description = other205.description;
  __isset = other205.__isset;
}
SourceComponentData& SourceComponentData::operator=(const SourceComponentData& other206) {
  name = other206.name;
  value = other206.value;
  description = other206.description;
  __isset = other206.__isset;
  return *this;
}
void SourceComponentData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SourceComponentData(";
  out << "name=" << to_string(name);
  out << ", " << "value=" << to_string(value);
  out << ", " << "description=" << to_string(description);
  out << ")";
}


