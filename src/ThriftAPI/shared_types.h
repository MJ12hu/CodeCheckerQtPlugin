/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef shared_TYPES_H
#define shared_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>




struct ErrorCode {
  enum type {
    DATABASE = 0,
    IOERROR = 1,
    GENERAL = 2,
    AUTH_DENIED = 3,
    UNAUTHORIZED = 4,
    API_MISMATCH = 5,
    SOURCE_FILE = 6
  };
};

extern const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ErrorCode::type& val);

struct Permission {
  enum type {
    SUPERUSER = 1,
    PRODUCT_ADMIN = 16,
    PRODUCT_ACCESS = 17,
    PRODUCT_STORE = 18
  };
};

extern const std::map<int, const char*> _Permission_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const Permission::type& val);

struct DBStatus {
  enum type {
    OK = 0,
    MISSING = 1,
    FAILED_TO_CONNECT = 2,
    SCHEMA_MISMATCH_OK = 3,
    SCHEMA_MISMATCH_NO = 4,
    SCHEMA_MISSING = 5,
    SCHEMA_INIT_ERROR = 6,
    SCHEMA_UPGRADE_FAILED = 7
  };
};

extern const std::map<int, const char*> _DBStatus_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const DBStatus::type& val);

class RequestFailed;

typedef struct _RequestFailed__isset {
  _RequestFailed__isset() : errorCode(false), message(false), extraInfo(false) {}
  bool errorCode :1;
  bool message :1;
  bool extraInfo :1;
} _RequestFailed__isset;

class RequestFailed : public ::apache::thrift::TException {
 public:

  RequestFailed(const RequestFailed&);
  RequestFailed& operator=(const RequestFailed&);
  RequestFailed() : errorCode((ErrorCode::type)0), message() {
  }

  virtual ~RequestFailed() throw();
  ErrorCode::type errorCode;
  std::string message;
  std::vector<std::string>  extraInfo;

  _RequestFailed__isset __isset;

  void __set_errorCode(const ErrorCode::type val);

  void __set_message(const std::string& val);

  void __set_extraInfo(const std::vector<std::string> & val);

  bool operator == (const RequestFailed & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (!(message == rhs.message))
      return false;
    if (!(extraInfo == rhs.extraInfo))
      return false;
    return true;
  }
  bool operator != (const RequestFailed &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestFailed & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(RequestFailed &a, RequestFailed &b);

std::ostream& operator<<(std::ostream& out, const RequestFailed& obj);



#endif
