/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef report_server_TYPES_H
#define report_server_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "shared_types.h"




struct DetectionStatus {
  enum type {
    NEW = 0,
    RESOLVED = 1,
    UNRESOLVED = 2,
    REOPENED = 3,
    OFF = 4,
    UNAVAILABLE = 5
  };
};

extern const std::map<int, const char*> _DetectionStatus_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const DetectionStatus::type& val);

struct DiffType {
  enum type {
    NEW = 0,
    RESOLVED = 1,
    UNRESOLVED = 2
  };
};

extern const std::map<int, const char*> _DiffType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const DiffType::type& val);

struct Encoding {
  enum type {
    DEFAULT = 0,
    BASE64 = 1
  };
};

extern const std::map<int, const char*> _Encoding_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const Encoding::type& val);

struct Order {
  enum type {
    ASC = 0,
    DESC = 1
  };
};

extern const std::map<int, const char*> _Order_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const Order::type& val);

struct ReviewStatus {
  enum type {
    UNREVIEWED = 0,
    CONFIRMED = 1,
    FALSE_POSITIVE = 2,
    INTENTIONAL = 3
  };
};

extern const std::map<int, const char*> _ReviewStatus_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ReviewStatus::type& val);

struct Severity {
  enum type {
    UNSPECIFIED = 0,
    STYLE = 10,
    LOW = 20,
    MEDIUM = 30,
    HIGH = 40,
    CRITICAL = 50
  };
};

extern const std::map<int, const char*> _Severity_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const Severity::type& val);

struct SortType {
  enum type {
    FILENAME = 0,
    CHECKER_NAME = 1,
    SEVERITY = 2,
    REVIEW_STATUS = 3,
    DETECTION_STATUS = 4,
    BUG_PATH_LENGTH = 5
  };
};

extern const std::map<int, const char*> _SortType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SortType::type& val);

struct StoreLimitKind {
  enum type {
    FAILURE_ZIP_SIZE = 0,
    COMPILATION_DATABASE_SIZE = 1
  };
};

extern const std::map<int, const char*> _StoreLimitKind_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const StoreLimitKind::type& val);

struct ExtendedReportDataType {
  enum type {
    NOTE = 0,
    MACRO = 10,
    FIXIT = 20
  };
};

extern const std::map<int, const char*> _ExtendedReportDataType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ExtendedReportDataType::type& val);

typedef std::vector<class BugPathEvent>  BugPathEvents;

typedef std::vector<class BugPathPos>  BugPath;

typedef std::vector<class ExtendedReportData>  ExtendedReportDataList;

typedef std::string AnalyzerType;

typedef std::map<AnalyzerType, class AnalyzerStatistics>  AnalyzerStatisticsData;

typedef std::vector<class RunData>  RunDataList;

typedef std::vector<class RunHistoryData>  RunHistoryDataList;

typedef std::vector<class RunTagCount>  RunTagCounts;

typedef std::vector<class ReportData>  ReportDataList;

typedef std::vector<class RunReportCount>  RunReportCounts;

typedef std::vector<class CheckerCount>  CheckerCounts;

typedef std::vector<class CommentData>  CommentDataList;

typedef std::vector<class LinesInFilesRequested>  LinesInFilesRequestedList;

typedef std::vector<class SourceComponentData>  SourceComponentDataList;

class SourceFileData;

class SortMode;

class BugPathEvent;

class BugPathPos;

class ExtendedReportData;

class ReportDetails;

class AnalyzerStatistics;

class RunData;

class RunHistoryData;

class RunHistoryFilter;

class RunTagCount;

class ReviewData;

class ReportData;

class BugPathLengthRange;

class ReportFilter;

class RunReportCount;

class CheckerCount;

class CommentData;

class RunFilter;

class CompareData;

class LinesInFilesRequested;

class SourceComponentData;

typedef struct _SourceFileData__isset {
  _SourceFileData__isset() : fileId(false), filePath(false), fileContent(false) {}
  bool fileId :1;
  bool filePath :1;
  bool fileContent :1;
} _SourceFileData__isset;

class SourceFileData : public virtual ::apache::thrift::TBase {
 public:

  SourceFileData(const SourceFileData&);
  SourceFileData& operator=(const SourceFileData&);
  SourceFileData() : fileId(0), filePath(), fileContent() {
  }

  virtual ~SourceFileData() throw();
  int64_t fileId;
  std::string filePath;
  std::string fileContent;

  _SourceFileData__isset __isset;

  void __set_fileId(const int64_t val);

  void __set_filePath(const std::string& val);

  void __set_fileContent(const std::string& val);

  bool operator == (const SourceFileData & rhs) const
  {
    if (!(fileId == rhs.fileId))
      return false;
    if (!(filePath == rhs.filePath))
      return false;
    if (__isset.fileContent != rhs.__isset.fileContent)
      return false;
    else if (__isset.fileContent && !(fileContent == rhs.fileContent))
      return false;
    return true;
  }
  bool operator != (const SourceFileData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SourceFileData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SourceFileData &a, SourceFileData &b);

std::ostream& operator<<(std::ostream& out, const SourceFileData& obj);

typedef struct _SortMode__isset {
  _SortMode__isset() : type(false), ord(false) {}
  bool type :1;
  bool ord :1;
} _SortMode__isset;

class SortMode : public virtual ::apache::thrift::TBase {
 public:

  SortMode(const SortMode&);
  SortMode& operator=(const SortMode&);
  SortMode() : type((SortType::type)0), ord((Order::type)0) {
  }

  virtual ~SortMode() throw();
  SortType::type type;
  Order::type ord;

  _SortMode__isset __isset;

  void __set_type(const SortType::type val);

  void __set_ord(const Order::type val);

  bool operator == (const SortMode & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(ord == rhs.ord))
      return false;
    return true;
  }
  bool operator != (const SortMode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SortMode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SortMode &a, SortMode &b);

std::ostream& operator<<(std::ostream& out, const SortMode& obj);

typedef struct _BugPathEvent__isset {
  _BugPathEvent__isset() : startLine(false), startCol(false), endLine(false), endCol(false), msg(false), fileId(false), filePath(false) {}
  bool startLine :1;
  bool startCol :1;
  bool endLine :1;
  bool endCol :1;
  bool msg :1;
  bool fileId :1;
  bool filePath :1;
} _BugPathEvent__isset;

class BugPathEvent : public virtual ::apache::thrift::TBase {
 public:

  BugPathEvent(const BugPathEvent&);
  BugPathEvent& operator=(const BugPathEvent&);
  BugPathEvent() : startLine(0), startCol(0), endLine(0), endCol(0), msg(), fileId(0), filePath() {
  }

  virtual ~BugPathEvent() throw();
  int64_t startLine;
  int64_t startCol;
  int64_t endLine;
  int64_t endCol;
  std::string msg;
  int64_t fileId;
  std::string filePath;

  _BugPathEvent__isset __isset;

  void __set_startLine(const int64_t val);

  void __set_startCol(const int64_t val);

  void __set_endLine(const int64_t val);

  void __set_endCol(const int64_t val);

  void __set_msg(const std::string& val);

  void __set_fileId(const int64_t val);

  void __set_filePath(const std::string& val);

  bool operator == (const BugPathEvent & rhs) const
  {
    if (!(startLine == rhs.startLine))
      return false;
    if (!(startCol == rhs.startCol))
      return false;
    if (!(endLine == rhs.endLine))
      return false;
    if (!(endCol == rhs.endCol))
      return false;
    if (!(msg == rhs.msg))
      return false;
    if (!(fileId == rhs.fileId))
      return false;
    if (!(filePath == rhs.filePath))
      return false;
    return true;
  }
  bool operator != (const BugPathEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BugPathEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BugPathEvent &a, BugPathEvent &b);

std::ostream& operator<<(std::ostream& out, const BugPathEvent& obj);

typedef struct _BugPathPos__isset {
  _BugPathPos__isset() : startLine(false), startCol(false), endLine(false), endCol(false), fileId(false), filePath(false) {}
  bool startLine :1;
  bool startCol :1;
  bool endLine :1;
  bool endCol :1;
  bool fileId :1;
  bool filePath :1;
} _BugPathPos__isset;

class BugPathPos : public virtual ::apache::thrift::TBase {
 public:

  BugPathPos(const BugPathPos&);
  BugPathPos& operator=(const BugPathPos&);
  BugPathPos() : startLine(0), startCol(0), endLine(0), endCol(0), fileId(0), filePath() {
  }

  virtual ~BugPathPos() throw();
  int64_t startLine;
  int64_t startCol;
  int64_t endLine;
  int64_t endCol;
  int64_t fileId;
  std::string filePath;

  _BugPathPos__isset __isset;

  void __set_startLine(const int64_t val);

  void __set_startCol(const int64_t val);

  void __set_endLine(const int64_t val);

  void __set_endCol(const int64_t val);

  void __set_fileId(const int64_t val);

  void __set_filePath(const std::string& val);

  bool operator == (const BugPathPos & rhs) const
  {
    if (!(startLine == rhs.startLine))
      return false;
    if (!(startCol == rhs.startCol))
      return false;
    if (!(endLine == rhs.endLine))
      return false;
    if (!(endCol == rhs.endCol))
      return false;
    if (!(fileId == rhs.fileId))
      return false;
    if (!(filePath == rhs.filePath))
      return false;
    return true;
  }
  bool operator != (const BugPathPos &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BugPathPos & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BugPathPos &a, BugPathPos &b);

std::ostream& operator<<(std::ostream& out, const BugPathPos& obj);

typedef struct _ExtendedReportData__isset {
  _ExtendedReportData__isset() : type(false), startLine(false), startCol(false), endLine(false), endCol(false), message(false), fileId(false), filePath(false) {}
  bool type :1;
  bool startLine :1;
  bool startCol :1;
  bool endLine :1;
  bool endCol :1;
  bool message :1;
  bool fileId :1;
  bool filePath :1;
} _ExtendedReportData__isset;

class ExtendedReportData : public virtual ::apache::thrift::TBase {
 public:

  ExtendedReportData(const ExtendedReportData&);
  ExtendedReportData& operator=(const ExtendedReportData&);
  ExtendedReportData() : type((ExtendedReportDataType::type)0), startLine(0), startCol(0), endLine(0), endCol(0), message(), fileId(0), filePath() {
  }

  virtual ~ExtendedReportData() throw();
  ExtendedReportDataType::type type;
  int64_t startLine;
  int64_t startCol;
  int64_t endLine;
  int64_t endCol;
  std::string message;
  int64_t fileId;
  std::string filePath;

  _ExtendedReportData__isset __isset;

  void __set_type(const ExtendedReportDataType::type val);

  void __set_startLine(const int64_t val);

  void __set_startCol(const int64_t val);

  void __set_endLine(const int64_t val);

  void __set_endCol(const int64_t val);

  void __set_message(const std::string& val);

  void __set_fileId(const int64_t val);

  void __set_filePath(const std::string& val);

  bool operator == (const ExtendedReportData & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(startLine == rhs.startLine))
      return false;
    if (!(startCol == rhs.startCol))
      return false;
    if (!(endLine == rhs.endLine))
      return false;
    if (!(endCol == rhs.endCol))
      return false;
    if (!(message == rhs.message))
      return false;
    if (!(fileId == rhs.fileId))
      return false;
    if (!(filePath == rhs.filePath))
      return false;
    return true;
  }
  bool operator != (const ExtendedReportData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtendedReportData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ExtendedReportData &a, ExtendedReportData &b);

std::ostream& operator<<(std::ostream& out, const ExtendedReportData& obj);

typedef struct _ReportDetails__isset {
  _ReportDetails__isset() : pathEvents(false), executionPath(false), extendedData(false) {}
  bool pathEvents :1;
  bool executionPath :1;
  bool extendedData :1;
} _ReportDetails__isset;

class ReportDetails : public virtual ::apache::thrift::TBase {
 public:

  ReportDetails(const ReportDetails&);
  ReportDetails& operator=(const ReportDetails&);
  ReportDetails() {
  }

  virtual ~ReportDetails() throw();
  BugPathEvents pathEvents;
  BugPath executionPath;
  ExtendedReportDataList extendedData;

  _ReportDetails__isset __isset;

  void __set_pathEvents(const BugPathEvents& val);

  void __set_executionPath(const BugPath& val);

  void __set_extendedData(const ExtendedReportDataList& val);

  bool operator == (const ReportDetails & rhs) const
  {
    if (!(pathEvents == rhs.pathEvents))
      return false;
    if (!(executionPath == rhs.executionPath))
      return false;
    if (__isset.extendedData != rhs.__isset.extendedData)
      return false;
    else if (__isset.extendedData && !(extendedData == rhs.extendedData))
      return false;
    return true;
  }
  bool operator != (const ReportDetails &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReportDetails & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ReportDetails &a, ReportDetails &b);

std::ostream& operator<<(std::ostream& out, const ReportDetails& obj);

typedef struct _AnalyzerStatistics__isset {
  _AnalyzerStatistics__isset() : version(false), failed(false), successful(false), failedFilePaths(false) {}
  bool version :1;
  bool failed :1;
  bool successful :1;
  bool failedFilePaths :1;
} _AnalyzerStatistics__isset;

class AnalyzerStatistics : public virtual ::apache::thrift::TBase {
 public:

  AnalyzerStatistics(const AnalyzerStatistics&);
  AnalyzerStatistics& operator=(const AnalyzerStatistics&);
  AnalyzerStatistics() : version(), failed(0), successful(0) {
  }

  virtual ~AnalyzerStatistics() throw();
  std::string version;
  int64_t failed;
  int64_t successful;
  std::vector<std::string>  failedFilePaths;

  _AnalyzerStatistics__isset __isset;

  void __set_version(const std::string& val);

  void __set_failed(const int64_t val);

  void __set_successful(const int64_t val);

  void __set_failedFilePaths(const std::vector<std::string> & val);

  bool operator == (const AnalyzerStatistics & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(failed == rhs.failed))
      return false;
    if (!(successful == rhs.successful))
      return false;
    if (!(failedFilePaths == rhs.failedFilePaths))
      return false;
    return true;
  }
  bool operator != (const AnalyzerStatistics &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AnalyzerStatistics & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AnalyzerStatistics &a, AnalyzerStatistics &b);

std::ostream& operator<<(std::ostream& out, const AnalyzerStatistics& obj);

typedef struct _RunData__isset {
  _RunData__isset() : runId(false), runDate(false), name(false), duration(false), resultCount(false), runCmd(false), detectionStatusCount(false), versionTag(false), codeCheckerVersion(false), analyzerStatistics(false) {}
  bool runId :1;
  bool runDate :1;
  bool name :1;
  bool duration :1;
  bool resultCount :1;
  bool runCmd :1;
  bool detectionStatusCount :1;
  bool versionTag :1;
  bool codeCheckerVersion :1;
  bool analyzerStatistics :1;
} _RunData__isset;

class RunData : public virtual ::apache::thrift::TBase {
 public:

  RunData(const RunData&);
  RunData& operator=(const RunData&);
  RunData() : runId(0), runDate(), name(), duration(0), resultCount(0), runCmd(), versionTag(), codeCheckerVersion() {
  }

  virtual ~RunData() throw();
  int64_t runId;
  std::string runDate;
  std::string name;
  int64_t duration;
  int64_t resultCount;
  std::string runCmd;
  std::map<DetectionStatus::type, int32_t>  detectionStatusCount;
  std::string versionTag;
  std::string codeCheckerVersion;
  AnalyzerStatisticsData analyzerStatistics;

  _RunData__isset __isset;

  void __set_runId(const int64_t val);

  void __set_runDate(const std::string& val);

  void __set_name(const std::string& val);

  void __set_duration(const int64_t val);

  void __set_resultCount(const int64_t val);

  void __set_runCmd(const std::string& val);

  void __set_detectionStatusCount(const std::map<DetectionStatus::type, int32_t> & val);

  void __set_versionTag(const std::string& val);

  void __set_codeCheckerVersion(const std::string& val);

  void __set_analyzerStatistics(const AnalyzerStatisticsData& val);

  bool operator == (const RunData & rhs) const
  {
    if (!(runId == rhs.runId))
      return false;
    if (!(runDate == rhs.runDate))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(duration == rhs.duration))
      return false;
    if (!(resultCount == rhs.resultCount))
      return false;
    if (!(runCmd == rhs.runCmd))
      return false;
    if (!(detectionStatusCount == rhs.detectionStatusCount))
      return false;
    if (!(versionTag == rhs.versionTag))
      return false;
    if (!(codeCheckerVersion == rhs.codeCheckerVersion))
      return false;
    if (!(analyzerStatistics == rhs.analyzerStatistics))
      return false;
    return true;
  }
  bool operator != (const RunData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RunData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RunData &a, RunData &b);

std::ostream& operator<<(std::ostream& out, const RunData& obj);

typedef struct _RunHistoryData__isset {
  _RunHistoryData__isset() : runId(false), runName(false), versionTag(false), user(false), time(false), id(false), checkCommand(false), codeCheckerVersion(false), analyzerStatistics(false) {}
  bool runId :1;
  bool runName :1;
  bool versionTag :1;
  bool user :1;
  bool time :1;
  bool id :1;
  bool checkCommand :1;
  bool codeCheckerVersion :1;
  bool analyzerStatistics :1;
} _RunHistoryData__isset;

class RunHistoryData : public virtual ::apache::thrift::TBase {
 public:

  RunHistoryData(const RunHistoryData&);
  RunHistoryData& operator=(const RunHistoryData&);
  RunHistoryData() : runId(0), runName(), versionTag(), user(), time(), id(0), checkCommand(), codeCheckerVersion() {
  }

  virtual ~RunHistoryData() throw();
  int64_t runId;
  std::string runName;
  std::string versionTag;
  std::string user;
  std::string time;
  int64_t id;
  std::string checkCommand;
  std::string codeCheckerVersion;
  AnalyzerStatisticsData analyzerStatistics;

  _RunHistoryData__isset __isset;

  void __set_runId(const int64_t val);

  void __set_runName(const std::string& val);

  void __set_versionTag(const std::string& val);

  void __set_user(const std::string& val);

  void __set_time(const std::string& val);

  void __set_id(const int64_t val);

  void __set_checkCommand(const std::string& val);

  void __set_codeCheckerVersion(const std::string& val);

  void __set_analyzerStatistics(const AnalyzerStatisticsData& val);

  bool operator == (const RunHistoryData & rhs) const
  {
    if (!(runId == rhs.runId))
      return false;
    if (!(runName == rhs.runName))
      return false;
    if (!(versionTag == rhs.versionTag))
      return false;
    if (!(user == rhs.user))
      return false;
    if (!(time == rhs.time))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(checkCommand == rhs.checkCommand))
      return false;
    if (!(codeCheckerVersion == rhs.codeCheckerVersion))
      return false;
    if (!(analyzerStatistics == rhs.analyzerStatistics))
      return false;
    return true;
  }
  bool operator != (const RunHistoryData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RunHistoryData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RunHistoryData &a, RunHistoryData &b);

std::ostream& operator<<(std::ostream& out, const RunHistoryData& obj);

typedef struct _RunHistoryFilter__isset {
  _RunHistoryFilter__isset() : tagNames(false) {}
  bool tagNames :1;
} _RunHistoryFilter__isset;

class RunHistoryFilter : public virtual ::apache::thrift::TBase {
 public:

  RunHistoryFilter(const RunHistoryFilter&);
  RunHistoryFilter& operator=(const RunHistoryFilter&);
  RunHistoryFilter() {
  }

  virtual ~RunHistoryFilter() throw();
  std::vector<std::string>  tagNames;

  _RunHistoryFilter__isset __isset;

  void __set_tagNames(const std::vector<std::string> & val);

  bool operator == (const RunHistoryFilter & rhs) const
  {
    if (!(tagNames == rhs.tagNames))
      return false;
    return true;
  }
  bool operator != (const RunHistoryFilter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RunHistoryFilter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RunHistoryFilter &a, RunHistoryFilter &b);

std::ostream& operator<<(std::ostream& out, const RunHistoryFilter& obj);

typedef struct _RunTagCount__isset {
  _RunTagCount__isset() : time(false), name(false), count(false), id(false), runName(false) {}
  bool time :1;
  bool name :1;
  bool count :1;
  bool id :1;
  bool runName :1;
} _RunTagCount__isset;

class RunTagCount : public virtual ::apache::thrift::TBase {
 public:

  RunTagCount(const RunTagCount&);
  RunTagCount& operator=(const RunTagCount&);
  RunTagCount() : time(), name(), count(0), id(0), runName() {
  }

  virtual ~RunTagCount() throw();
  std::string time;
  std::string name;
  int64_t count;
  int64_t id;
  std::string runName;

  _RunTagCount__isset __isset;

  void __set_time(const std::string& val);

  void __set_name(const std::string& val);

  void __set_count(const int64_t val);

  void __set_id(const int64_t val);

  void __set_runName(const std::string& val);

  bool operator == (const RunTagCount & rhs) const
  {
    if (!(time == rhs.time))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(count == rhs.count))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(runName == rhs.runName))
      return false;
    return true;
  }
  bool operator != (const RunTagCount &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RunTagCount & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RunTagCount &a, RunTagCount &b);

std::ostream& operator<<(std::ostream& out, const RunTagCount& obj);

typedef struct _ReviewData__isset {
  _ReviewData__isset() : status(false), comment(false), author(false), date(false) {}
  bool status :1;
  bool comment :1;
  bool author :1;
  bool date :1;
} _ReviewData__isset;

class ReviewData : public virtual ::apache::thrift::TBase {
 public:

  ReviewData(const ReviewData&);
  ReviewData& operator=(const ReviewData&);
  ReviewData() : status((ReviewStatus::type)0), comment(), author(), date() {
  }

  virtual ~ReviewData() throw();
  ReviewStatus::type status;
  std::string comment;
  std::string author;
  std::string date;

  _ReviewData__isset __isset;

  void __set_status(const ReviewStatus::type val);

  void __set_comment(const std::string& val);

  void __set_author(const std::string& val);

  void __set_date(const std::string& val);

  bool operator == (const ReviewData & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(comment == rhs.comment))
      return false;
    if (!(author == rhs.author))
      return false;
    if (!(date == rhs.date))
      return false;
    return true;
  }
  bool operator != (const ReviewData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReviewData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ReviewData &a, ReviewData &b);

std::ostream& operator<<(std::ostream& out, const ReviewData& obj);

typedef struct _ReportData__isset {
  _ReportData__isset() : runId(false), checkerId(false), bugHash(false), checkedFile(false), checkerMsg(false), reportId(false), fileId(false), line(false), column(false), severity(false), reviewData(false), detectionStatus(false), detectedAt(false), fixedAt(false), bugPathLength(false), details(false) {}
  bool runId :1;
  bool checkerId :1;
  bool bugHash :1;
  bool checkedFile :1;
  bool checkerMsg :1;
  bool reportId :1;
  bool fileId :1;
  bool line :1;
  bool column :1;
  bool severity :1;
  bool reviewData :1;
  bool detectionStatus :1;
  bool detectedAt :1;
  bool fixedAt :1;
  bool bugPathLength :1;
  bool details :1;
} _ReportData__isset;

class ReportData : public virtual ::apache::thrift::TBase {
 public:

  ReportData(const ReportData&);
  ReportData& operator=(const ReportData&);
  ReportData() : runId(0), checkerId(), bugHash(), checkedFile(), checkerMsg(), reportId(0), fileId(0), line(0), column(0), severity((Severity::type)0), detectionStatus((DetectionStatus::type)0), detectedAt(), fixedAt(), bugPathLength(0) {
  }

  virtual ~ReportData() throw();
  int64_t runId;
  std::string checkerId;
  std::string bugHash;
  std::string checkedFile;
  std::string checkerMsg;
  int64_t reportId;
  int64_t fileId;
  int64_t line;
  int64_t column;
  Severity::type severity;
  ReviewData reviewData;
  DetectionStatus::type detectionStatus;
  std::string detectedAt;
  std::string fixedAt;
  int64_t bugPathLength;
  ReportDetails details;

  _ReportData__isset __isset;

  void __set_runId(const int64_t val);

  void __set_checkerId(const std::string& val);

  void __set_bugHash(const std::string& val);

  void __set_checkedFile(const std::string& val);

  void __set_checkerMsg(const std::string& val);

  void __set_reportId(const int64_t val);

  void __set_fileId(const int64_t val);

  void __set_line(const int64_t val);

  void __set_column(const int64_t val);

  void __set_severity(const Severity::type val);

  void __set_reviewData(const ReviewData& val);

  void __set_detectionStatus(const DetectionStatus::type val);

  void __set_detectedAt(const std::string& val);

  void __set_fixedAt(const std::string& val);

  void __set_bugPathLength(const int64_t val);

  void __set_details(const ReportDetails& val);

  bool operator == (const ReportData & rhs) const
  {
    if (!(runId == rhs.runId))
      return false;
    if (!(checkerId == rhs.checkerId))
      return false;
    if (!(bugHash == rhs.bugHash))
      return false;
    if (!(checkedFile == rhs.checkedFile))
      return false;
    if (!(checkerMsg == rhs.checkerMsg))
      return false;
    if (!(reportId == rhs.reportId))
      return false;
    if (!(fileId == rhs.fileId))
      return false;
    if (!(line == rhs.line))
      return false;
    if (!(column == rhs.column))
      return false;
    if (!(severity == rhs.severity))
      return false;
    if (!(reviewData == rhs.reviewData))
      return false;
    if (!(detectionStatus == rhs.detectionStatus))
      return false;
    if (!(detectedAt == rhs.detectedAt))
      return false;
    if (!(fixedAt == rhs.fixedAt))
      return false;
    if (!(bugPathLength == rhs.bugPathLength))
      return false;
    if (__isset.details != rhs.__isset.details)
      return false;
    else if (__isset.details && !(details == rhs.details))
      return false;
    return true;
  }
  bool operator != (const ReportData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReportData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ReportData &a, ReportData &b);

std::ostream& operator<<(std::ostream& out, const ReportData& obj);

typedef struct _BugPathLengthRange__isset {
  _BugPathLengthRange__isset() : min(false), max(false) {}
  bool min :1;
  bool max :1;
} _BugPathLengthRange__isset;

class BugPathLengthRange : public virtual ::apache::thrift::TBase {
 public:

  BugPathLengthRange(const BugPathLengthRange&);
  BugPathLengthRange& operator=(const BugPathLengthRange&);
  BugPathLengthRange() : min(0), max(0) {
  }

  virtual ~BugPathLengthRange() throw();
  int64_t min;
  int64_t max;

  _BugPathLengthRange__isset __isset;

  void __set_min(const int64_t val);

  void __set_max(const int64_t val);

  bool operator == (const BugPathLengthRange & rhs) const
  {
    if (!(min == rhs.min))
      return false;
    if (!(max == rhs.max))
      return false;
    return true;
  }
  bool operator != (const BugPathLengthRange &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BugPathLengthRange & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BugPathLengthRange &a, BugPathLengthRange &b);

std::ostream& operator<<(std::ostream& out, const BugPathLengthRange& obj);

typedef struct _ReportFilter__isset {
  _ReportFilter__isset() : filepath(false), checkerMsg(false), checkerName(false), reportHash(false), severity(false), reviewStatus(false), detectionStatus(false), runHistoryTag(false), firstDetectionDate(false), fixDate(false), isUnique(false), runName(false), runTag(false), componentNames(false), bugPathLength(false) {}
  bool filepath :1;
  bool checkerMsg :1;
  bool checkerName :1;
  bool reportHash :1;
  bool severity :1;
  bool reviewStatus :1;
  bool detectionStatus :1;
  bool runHistoryTag :1;
  bool firstDetectionDate :1;
  bool fixDate :1;
  bool isUnique :1;
  bool runName :1;
  bool runTag :1;
  bool componentNames :1;
  bool bugPathLength :1;
} _ReportFilter__isset;

class ReportFilter : public virtual ::apache::thrift::TBase {
 public:

  ReportFilter(const ReportFilter&);
  ReportFilter& operator=(const ReportFilter&);
  ReportFilter() : firstDetectionDate(0), fixDate(0), isUnique(0) {
  }

  virtual ~ReportFilter() throw();
  std::vector<std::string>  filepath;
  std::vector<std::string>  checkerMsg;
  std::vector<std::string>  checkerName;
  std::vector<std::string>  reportHash;
  std::vector<Severity::type>  severity;
  std::vector<ReviewStatus::type>  reviewStatus;
  std::vector<DetectionStatus::type>  detectionStatus;
  std::vector<std::string>  runHistoryTag;
  int64_t firstDetectionDate;
  int64_t fixDate;
  bool isUnique;
  std::vector<std::string>  runName;
  std::vector<int64_t>  runTag;
  std::vector<std::string>  componentNames;
  BugPathLengthRange bugPathLength;

  _ReportFilter__isset __isset;

  void __set_filepath(const std::vector<std::string> & val);

  void __set_checkerMsg(const std::vector<std::string> & val);

  void __set_checkerName(const std::vector<std::string> & val);

  void __set_reportHash(const std::vector<std::string> & val);

  void __set_severity(const std::vector<Severity::type> & val);

  void __set_reviewStatus(const std::vector<ReviewStatus::type> & val);

  void __set_detectionStatus(const std::vector<DetectionStatus::type> & val);

  void __set_runHistoryTag(const std::vector<std::string> & val);

  void __set_firstDetectionDate(const int64_t val);

  void __set_fixDate(const int64_t val);

  void __set_isUnique(const bool val);

  void __set_runName(const std::vector<std::string> & val);

  void __set_runTag(const std::vector<int64_t> & val);

  void __set_componentNames(const std::vector<std::string> & val);

  void __set_bugPathLength(const BugPathLengthRange& val);

  bool operator == (const ReportFilter & rhs) const
  {
    if (!(filepath == rhs.filepath))
      return false;
    if (!(checkerMsg == rhs.checkerMsg))
      return false;
    if (!(checkerName == rhs.checkerName))
      return false;
    if (!(reportHash == rhs.reportHash))
      return false;
    if (!(severity == rhs.severity))
      return false;
    if (!(reviewStatus == rhs.reviewStatus))
      return false;
    if (!(detectionStatus == rhs.detectionStatus))
      return false;
    if (!(runHistoryTag == rhs.runHistoryTag))
      return false;
    if (__isset.firstDetectionDate != rhs.__isset.firstDetectionDate)
      return false;
    else if (__isset.firstDetectionDate && !(firstDetectionDate == rhs.firstDetectionDate))
      return false;
    if (__isset.fixDate != rhs.__isset.fixDate)
      return false;
    else if (__isset.fixDate && !(fixDate == rhs.fixDate))
      return false;
    if (__isset.isUnique != rhs.__isset.isUnique)
      return false;
    else if (__isset.isUnique && !(isUnique == rhs.isUnique))
      return false;
    if (!(runName == rhs.runName))
      return false;
    if (!(runTag == rhs.runTag))
      return false;
    if (!(componentNames == rhs.componentNames))
      return false;
    if (__isset.bugPathLength != rhs.__isset.bugPathLength)
      return false;
    else if (__isset.bugPathLength && !(bugPathLength == rhs.bugPathLength))
      return false;
    return true;
  }
  bool operator != (const ReportFilter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReportFilter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ReportFilter &a, ReportFilter &b);

std::ostream& operator<<(std::ostream& out, const ReportFilter& obj);

typedef struct _RunReportCount__isset {
  _RunReportCount__isset() : runId(false), name(false), reportCount(false) {}
  bool runId :1;
  bool name :1;
  bool reportCount :1;
} _RunReportCount__isset;

class RunReportCount : public virtual ::apache::thrift::TBase {
 public:

  RunReportCount(const RunReportCount&);
  RunReportCount& operator=(const RunReportCount&);
  RunReportCount() : runId(0), name(), reportCount(0) {
  }

  virtual ~RunReportCount() throw();
  int64_t runId;
  std::string name;
  int64_t reportCount;

  _RunReportCount__isset __isset;

  void __set_runId(const int64_t val);

  void __set_name(const std::string& val);

  void __set_reportCount(const int64_t val);

  bool operator == (const RunReportCount & rhs) const
  {
    if (!(runId == rhs.runId))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(reportCount == rhs.reportCount))
      return false;
    return true;
  }
  bool operator != (const RunReportCount &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RunReportCount & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RunReportCount &a, RunReportCount &b);

std::ostream& operator<<(std::ostream& out, const RunReportCount& obj);

typedef struct _CheckerCount__isset {
  _CheckerCount__isset() : name(false), severity(false), count(false) {}
  bool name :1;
  bool severity :1;
  bool count :1;
} _CheckerCount__isset;

class CheckerCount : public virtual ::apache::thrift::TBase {
 public:

  CheckerCount(const CheckerCount&);
  CheckerCount& operator=(const CheckerCount&);
  CheckerCount() : name(), severity((Severity::type)0), count(0) {
  }

  virtual ~CheckerCount() throw();
  std::string name;
  Severity::type severity;
  int64_t count;

  _CheckerCount__isset __isset;

  void __set_name(const std::string& val);

  void __set_severity(const Severity::type val);

  void __set_count(const int64_t val);

  bool operator == (const CheckerCount & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(severity == rhs.severity))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const CheckerCount &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CheckerCount & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CheckerCount &a, CheckerCount &b);

std::ostream& operator<<(std::ostream& out, const CheckerCount& obj);

typedef struct _CommentData__isset {
  _CommentData__isset() : id(false), author(false), message(false), createdAt(false) {}
  bool id :1;
  bool author :1;
  bool message :1;
  bool createdAt :1;
} _CommentData__isset;

class CommentData : public virtual ::apache::thrift::TBase {
 public:

  CommentData(const CommentData&);
  CommentData& operator=(const CommentData&);
  CommentData() : id(0), author(), message(), createdAt() {
  }

  virtual ~CommentData() throw();
  int64_t id;
  std::string author;
  std::string message;
  std::string createdAt;

  _CommentData__isset __isset;

  void __set_id(const int64_t val);

  void __set_author(const std::string& val);

  void __set_message(const std::string& val);

  void __set_createdAt(const std::string& val);

  bool operator == (const CommentData & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(author == rhs.author))
      return false;
    if (!(message == rhs.message))
      return false;
    if (!(createdAt == rhs.createdAt))
      return false;
    return true;
  }
  bool operator != (const CommentData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommentData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CommentData &a, CommentData &b);

std::ostream& operator<<(std::ostream& out, const CommentData& obj);

typedef struct _RunFilter__isset {
  _RunFilter__isset() : ids(false), names(false), exactMatch(false) {}
  bool ids :1;
  bool names :1;
  bool exactMatch :1;
} _RunFilter__isset;

class RunFilter : public virtual ::apache::thrift::TBase {
 public:

  RunFilter(const RunFilter&);
  RunFilter& operator=(const RunFilter&);
  RunFilter() : exactMatch(0) {
  }

  virtual ~RunFilter() throw();
  std::vector<int64_t>  ids;
  std::vector<std::string>  names;
  bool exactMatch;

  _RunFilter__isset __isset;

  void __set_ids(const std::vector<int64_t> & val);

  void __set_names(const std::vector<std::string> & val);

  void __set_exactMatch(const bool val);

  bool operator == (const RunFilter & rhs) const
  {
    if (!(ids == rhs.ids))
      return false;
    if (!(names == rhs.names))
      return false;
    if (!(exactMatch == rhs.exactMatch))
      return false;
    return true;
  }
  bool operator != (const RunFilter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RunFilter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RunFilter &a, RunFilter &b);

std::ostream& operator<<(std::ostream& out, const RunFilter& obj);

typedef struct _CompareData__isset {
  _CompareData__isset() : runIds(false), diffType(false), runTag(false) {}
  bool runIds :1;
  bool diffType :1;
  bool runTag :1;
} _CompareData__isset;

class CompareData : public virtual ::apache::thrift::TBase {
 public:

  CompareData(const CompareData&);
  CompareData& operator=(const CompareData&);
  CompareData() : diffType((DiffType::type)0) {
  }

  virtual ~CompareData() throw();
  std::vector<int64_t>  runIds;
  DiffType::type diffType;
  std::vector<int64_t>  runTag;

  _CompareData__isset __isset;

  void __set_runIds(const std::vector<int64_t> & val);

  void __set_diffType(const DiffType::type val);

  void __set_runTag(const std::vector<int64_t> & val);

  bool operator == (const CompareData & rhs) const
  {
    if (!(runIds == rhs.runIds))
      return false;
    if (!(diffType == rhs.diffType))
      return false;
    if (!(runTag == rhs.runTag))
      return false;
    return true;
  }
  bool operator != (const CompareData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CompareData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CompareData &a, CompareData &b);

std::ostream& operator<<(std::ostream& out, const CompareData& obj);

typedef struct _LinesInFilesRequested__isset {
  _LinesInFilesRequested__isset() : fileId(false), lines(false) {}
  bool fileId :1;
  bool lines :1;
} _LinesInFilesRequested__isset;

class LinesInFilesRequested : public virtual ::apache::thrift::TBase {
 public:

  LinesInFilesRequested(const LinesInFilesRequested&);
  LinesInFilesRequested& operator=(const LinesInFilesRequested&);
  LinesInFilesRequested() : fileId(0) {
  }

  virtual ~LinesInFilesRequested() throw();
  int64_t fileId;
  std::set<int64_t>  lines;

  _LinesInFilesRequested__isset __isset;

  void __set_fileId(const int64_t val);

  void __set_lines(const std::set<int64_t> & val);

  bool operator == (const LinesInFilesRequested & rhs) const
  {
    if (!(fileId == rhs.fileId))
      return false;
    if (!(lines == rhs.lines))
      return false;
    return true;
  }
  bool operator != (const LinesInFilesRequested &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LinesInFilesRequested & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LinesInFilesRequested &a, LinesInFilesRequested &b);

std::ostream& operator<<(std::ostream& out, const LinesInFilesRequested& obj);

typedef struct _SourceComponentData__isset {
  _SourceComponentData__isset() : name(false), value(false), description(false) {}
  bool name :1;
  bool value :1;
  bool description :1;
} _SourceComponentData__isset;

class SourceComponentData : public virtual ::apache::thrift::TBase {
 public:

  SourceComponentData(const SourceComponentData&);
  SourceComponentData& operator=(const SourceComponentData&);
  SourceComponentData() : name(), value(), description() {
  }

  virtual ~SourceComponentData() throw();
  std::string name;
  std::string value;
  std::string description;

  _SourceComponentData__isset __isset;

  void __set_name(const std::string& val);

  void __set_value(const std::string& val);

  void __set_description(const std::string& val);

  bool operator == (const SourceComponentData & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const SourceComponentData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SourceComponentData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SourceComponentData &a, SourceComponentData &b);

std::ostream& operator<<(std::ostream& out, const SourceComponentData& obj);



#endif
